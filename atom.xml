<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gary Wu</title>
  
  <subtitle>运维架构师 - 从入门到放弃</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://garywu520.github.io/blog/"/>
  <updated>2020-02-07T02:59:41.136Z</updated>
  <id>https://garywu520.github.io/blog/</id>
  
  <author>
    <name>Gary Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker日志限制与docker日志清理</title>
    <link href="https://garywu520.github.io/blog/2020/02/07/docker%E6%97%A5%E5%BF%97%E9%99%90%E5%88%B6%E4%B8%8Edocker%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/"/>
    <id>https://garywu520.github.io/blog/2020/02/07/docker日志限制与docker日志清理/</id>
    <published>2020-02-07T02:50:21.000Z</published>
    <updated>2020-02-07T02:59:41.136Z</updated>
    
    <content type="html"><![CDATA[<p>环境中日志产生量太大导致磁盘被爆, 很大原因是因为docker没有限制日志大小造成的。</p><h5 id="1-限制docker容器log大小"><a href="#1-限制docker容器log大小" class="headerlink" title="1. 限制docker容器log大小"></a>1. 限制docker容器log大小</h5><p>vim  /etc/docker/daemon.json [此文件没有则创建]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">增加<span class="built_in">log</span>-opts参数</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "log-driver":"json-file",</span><br><span class="line">  "log-opts": &#123;"max-size":"500m", "max-file":"3"&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>max-size=500m，意味着一个容器日志大小上限是500M， </p></li><li><p>max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json</p><a id="more"></a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure><p>注：此配置只针对新增的容器生效，故建议一开始优化的时候就配置上</p><h5 id="2-docker日常清理"><a href="#2-docker日常清理" class="headerlink" title="2. docker日常清理"></a>2. docker日常清理</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">来删除那些已停止的容器、dangling 镜像、未被容器引用的 network 和构建过程中的 cache，以及未被引用的volumes</span></span><br><span class="line">docker system prune --all --force --volumes</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;环境中日志产生量太大导致磁盘被爆, 很大原因是因为docker没有限制日志大小造成的。&lt;/p&gt;
&lt;h5 id=&quot;1-限制docker容器log大小&quot;&gt;&lt;a href=&quot;#1-限制docker容器log大小&quot; class=&quot;headerlink&quot; title=&quot;1. 限制docker容器log大小&quot;&gt;&lt;/a&gt;1. 限制docker容器log大小&lt;/h5&gt;&lt;p&gt;vim  /etc/docker/daemon.json [此文件没有则创建]&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;增加&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;-opts参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;log-driver&quot;:&quot;json-file&quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;log-opts&quot;: &amp;#123;&quot;max-size&quot;:&quot;500m&quot;, &quot;max-file&quot;:&quot;3&quot;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;max-size=500m，意味着一个容器日志大小上限是500M， &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;max-file=3，意味着一个容器有三个日志，分别是id+.json、id+1.json、id+2.json&lt;/p&gt;
    
    </summary>
    
    
      <category term="docker日志" scheme="https://garywu520.github.io/blog/tags/docker%E6%97%A5%E5%BF%97/"/>
    
      <category term="docker日志清理" scheme="https://garywu520.github.io/blog/tags/docker%E6%97%A5%E5%BF%97%E6%B8%85%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>CTOP--docker容器运行状态TOP工具</title>
    <link href="https://garywu520.github.io/blog/2020/02/03/CTOP-docker%E5%AE%B9%E5%99%A8%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81TOP%E5%B7%A5%E5%85%B7/"/>
    <id>https://garywu520.github.io/blog/2020/02/03/CTOP-docker容器运行状态TOP工具/</id>
    <published>2020-02-03T13:29:44.000Z</published>
    <updated>2020-02-03T13:31:06.137Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>官网：<a href="https://ctop.sh/" target="_blank" rel="noopener">https://ctop.sh/</a><br>github: <a href="https://github.com/bcicen/ctop" target="_blank" rel="noopener">https://github.com/bcicen/ctop</a></p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https:<span class="regexp">//gi</span>thub.com<span class="regexp">/bcicen/</span>ctop<span class="regexp">/releases/</span>download<span class="regexp">/v0.7.3/</span>ctop-<span class="number">0.7</span>.<span class="number">3</span>-linux-amd64 -O <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>ctop</span><br><span class="line"></span><br><span class="line">chmod +x <span class="regexp">/usr/</span>local<span class="regexp">/bin/</span>ctop</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;官网：&lt;a href=&quot;https://ctop.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://ctop.sh/&lt;/a&gt;&lt;br&gt;github: &lt;a href=&quot;https://github.com/bci
      
    
    </summary>
    
    
      <category term="htop" scheme="https://garywu520.github.io/blog/tags/htop/"/>
    
      <category term="top" scheme="https://garywu520.github.io/blog/tags/top/"/>
    
      <category term="ctop" scheme="https://garywu520.github.io/blog/tags/ctop/"/>
    
  </entry>
  
  <entry>
    <title>nacos高可用集群方案-Docker</title>
    <link href="https://garywu520.github.io/blog/2020/01/08/nacos%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E6%96%B9%E6%A1%88-Docker/"/>
    <id>https://garywu520.github.io/blog/2020/01/08/nacos高可用集群方案-Docker/</id>
    <published>2020-01-08T10:40:49.000Z</published>
    <updated>2020-01-08T10:43:24.845Z</updated>
    
    <content type="html"><![CDATA[<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><table><thead><tr><th align="center">服务名称</th><th align="center">IP</th><th align="center">宿主机IP</th><th align="center">Docker子网</th></tr></thead><tbody><tr><td align="center">Nacos1</td><td align="center">10.100.10.2:8848</td><td align="center">192.168.1.201:8848</td><td align="center">10.100.10.0/24</td></tr><tr><td align="center">Nacos2</td><td align="center">10.100.20.2:8848</td><td align="center">192.168.1.202:8848</td><td align="center">10.100.20.0/24</td></tr><tr><td align="center">Nacos3</td><td align="center">10.100.30.2:8848</td><td align="center">192.168.1.203:8848</td><td align="center">10.100.30.0/24</td></tr><tr><td align="center">MySQL主</td><td align="center">172.17.0.2:3306</td><td align="center"></td><td align="center">172.17.0.0/16</td></tr><tr><td align="center">MySQL从</td><td align="center">172.17.0.3:3306</td><td align="center"></td><td align="center">172.17.0.0/16</td></tr></tbody></table><p><strong>注：准备好MySQL主从环境</strong></p><a id="more"></a><h5 id="1-Nacos初始化SQL"><a href="#1-Nacos初始化SQL" class="headerlink" title="1. Nacos初始化SQL"></a>1. Nacos初始化SQL</h5><p>下载 <a href="https://github.com/alibaba/nacos/blob/master/distribution/conf/nacos-mysql.sql" target="_blank" rel="noopener">nacos.sql Github</a> 后导入MySQL主库中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p -h 127.0.0.1 -P 3305</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create database nacos_config;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> use nacos_config;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">source</span> /root/nacos-mysql.sql</span></span><br></pre></td></tr></table></figure><h5 id="2-配置Nacos1-201"><a href="#2-配置Nacos1-201" class="headerlink" title="2. 配置Nacos1-201"></a>2. 配置Nacos1-201</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">init.d/custom.properties是官方提供的自选功能配置文件，每个节点均需要此文件，保持默认即可</span></span><br><span class="line">mkdir -p /root/nacos-cluster-docker/init.d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">nacos1/docker-compose-nacos1.yml是第一个Nacos节点的Docker-compose配置文件</span></span><br><span class="line">mkdir -p /root/nacos-cluster-docker/nacos1</span><br></pre></td></tr></table></figure><p>官方的init.d/custom.properties配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">spring.security.enabled=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.security=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">security.basic.enabled=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">nacos.security.ignore.urls=/**</span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.elastic.host=http://localhost:9200</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> metrics <span class="keyword">for</span> prometheus</span></span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> metrics <span class="keyword">for</span> elastic search</span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.elastic.enabled=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.elastic.host=http://localhost:9200</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> metrics <span class="keyword">for</span> influx</span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.influx.enabled=<span class="literal">false</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.influx.db=springboot</span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.influx.uri=http://localhost:8086</span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.influx.auto-create-db=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.influx.consistency=one</span></span><br><span class="line"><span class="meta">#</span><span class="bash">management.metrics.export.influx.compressed=<span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>Nacos1-201服务器的docker-compose-nacos1.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">version: '2'  #注：自定义网段要求使用版本2，版本3会报错</span><br><span class="line">services:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> nacos-server服务注册与发现，配置中心服务    </span></span><br><span class="line">  docker-nacos-server:</span><br><span class="line">    image: nacos/nacos-server:latest</span><br><span class="line">    container_name: nacos-server-1</span><br><span class="line">    ports:</span><br><span class="line">      - "8848:8848"</span><br><span class="line">      - "9555:9555"</span><br><span class="line">    networks:</span><br><span class="line">      default:</span><br><span class="line">        ipv4_address: 10.100.10.2</span><br><span class="line">    restart: on-failure</span><br><span class="line">    privileged: true</span><br><span class="line">    environment:</span><br><span class="line">      PREFER_HOST_MODE: ip</span><br><span class="line">      SPRING_DATASOURCE_PLATFORM: mysql</span><br><span class="line">      NACOS_SERVER_IP: 10.100.10.2</span><br><span class="line">      NACOS_SERVERS: 10.100.10.2:8848 10.100.20.2:8848 10.100.30.2:8848</span><br><span class="line">      MYSQL_MASTER_SERVICE_HOST: 172.17.0.2 #mysql配置，Master为主节点，Slave为从节点</span><br><span class="line">      MYSQL_MASTER_SERVICE_PORT: 3306</span><br><span class="line">      MYSQL_MASTER_SERVICE_DB_NAME: nacos_config</span><br><span class="line">      MYSQL_MASTER_SERVICE_USER: root</span><br><span class="line">      MYSQL_MASTER_SERVICE_PASSWORD: root</span><br><span class="line">      MYSQL_SLAVE_SERVICE_HOST: 172.17.0.3</span><br><span class="line">      MYSQL_SLAVE_SERVICE_PORT: 3306</span><br><span class="line">      #JVM调优参数</span><br><span class="line">      #JVM_XMS:  -Xms default :700m</span><br><span class="line">      #JVM_XMX:  -Xmx default :700m</span><br><span class="line">      #JVM_XMN:  -Xmn default :500m</span><br><span class="line">      #JVM_MS:   #-XX:MetaspaceSize default :128m</span><br><span class="line">      #JVM_MMS:  #-XX:MaxMetaspaceSize default :320m</span><br><span class="line">      #NACOS_DEBUG: n #是否开启远程debug，y/n，默认n</span><br><span class="line">      #TOMCAT_ACCESSLOG_ENABLED: true #是否开始tomcat访问日志的记录，默认false</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/A/nacos1:/home/nacos/logs #日志输出目录</span><br><span class="line">      - ../init.d/custom.properties:/home/nacos/init.d/custom.properties</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">      - subnet: 10.100.10.0/24</span><br><span class="line">        gateway: 10.100.10.1</span><br></pre></td></tr></table></figure><p>配置静态路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加mysql回程静态路由</span></span><br><span class="line">ip route add 10.100.20.0/24 via 192.168.1.202</span><br><span class="line">ip route add 10.100.30.0/24 via 192.168.1.203</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">添加永久路由</span></span><br><span class="line"><span class="meta">$</span><span class="bash">vim /etc/sysconfig/network-scripts/route-interface</span></span><br><span class="line">10.100.20.0/24 via 192.168.1.202 dev eth0</span><br><span class="line">10.100.30.0/24 via 192.168.1.203 dev eth0</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/nacos-cluster-docker/nacos1</span><br><span class="line">docker-compose -f docker-compose-nacos1.yml up -d</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">iptables允许新增的子网网卡转发</span></span><br><span class="line">iptables -A FORWARD -i br-a76f81948ced -o eth0 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth0 -o br-a76f81948ced -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i br-a76f81948ced -o br-a76f81948ced -j ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看<span class="built_in">log</span></span></span><br><span class="line">tail -f /data/A/nacos1/start.out</span><br><span class="line">2020-01-07 12:08:40,788 INFO Nacos started successfully in cluster mode.</span><br></pre></td></tr></table></figure><h5 id="3-配置Nacos2-202"><a href="#3-配置Nacos2-202" class="headerlink" title="3. 配置Nacos2-202"></a>3. 配置Nacos2-202</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">init.d/custom.properties是官方提供的自选功能配置文件，每个节点均需要此文件，保持默认即可</span></span><br><span class="line">mkdir -p /root/nacos-cluster-docker/init.d</span><br><span class="line">mkdir -p /root/nacos-cluster-docker/nacos2</span><br></pre></td></tr></table></figure><p>官方的init.d/custom.properties配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><p>Nacos2-202服务器的docker-compose-nacos2.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">version: '2' </span><br><span class="line">services:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> nacos-server服务注册与发现，配置中心服务    </span></span><br><span class="line">  docker-nacos-server:</span><br><span class="line">    image: nacos/nacos-server:latest</span><br><span class="line">    container_name: nacos-server-2</span><br><span class="line">    ports:</span><br><span class="line">      - "8848:8848"</span><br><span class="line">      - "9555:9555"</span><br><span class="line">    networks:</span><br><span class="line">      default:</span><br><span class="line">        ipv4_address: 10.100.20.2</span><br><span class="line">      </span><br><span class="line">    restart: on-failure</span><br><span class="line">    privileged: true</span><br><span class="line">    environment:</span><br><span class="line">      PREFER_HOST_MODE: ip</span><br><span class="line">      SPRING_DATASOURCE_PLATFORM: mysql</span><br><span class="line">      NACOS_SERVER_IP: 10.100.20.2</span><br><span class="line">      NACOS_SERVERS: 10.100.10.2:8848 10.100.20.2:8848 10.100.30.2:8848</span><br><span class="line">      MYSQL_MASTER_SERVICE_HOST: 172.17.0.2 #mysql配置，Master为主节点，Slave为从节点</span><br><span class="line">      MYSQL_MASTER_SERVICE_PORT: 3306</span><br><span class="line">      MYSQL_MASTER_SERVICE_DB_NAME: nacos_config</span><br><span class="line">      MYSQL_MASTER_SERVICE_USER: root</span><br><span class="line">      MYSQL_MASTER_SERVICE_PASSWORD: root</span><br><span class="line">      MYSQL_SLAVE_SERVICE_HOST: 172.17.0.3</span><br><span class="line">      MYSQL_SLAVE_SERVICE_PORT: 3306</span><br><span class="line">      #JVM调优参数</span><br><span class="line">      #JVM_XMS:  -Xms default :700m</span><br><span class="line">      #JVM_XMX:  -Xmx default :700m</span><br><span class="line">      #JVM_XMN:  -Xmn default :500m</span><br><span class="line">      #JVM_MS:   #-XX:MetaspaceSize default :128m</span><br><span class="line">      #JVM_MMS:  #-XX:MaxMetaspaceSize default :320m</span><br><span class="line">      #NACOS_DEBUG: n #是否开启远程debug，y/n，默认n</span><br><span class="line">      #TOMCAT_ACCESSLOG_ENABLED: true #是否开始tomcat访问日志的记录，默认false</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/A/nacos2:/home/nacos/logs #日志输出目录</span><br><span class="line">      - ../init.d/custom.properties:/home/nacos/init.d/custom.properties</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">      - subnet: 10.100.20.0/24</span><br><span class="line">        gateway: 10.100.20.1</span><br></pre></td></tr></table></figure><p>添加静态路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">移除本机docker0网卡[否则网段冲突，无法添加]</span></span><br><span class="line">yum -y install bridge-utils</span><br><span class="line">ip link set dev docker0 down</span><br><span class="line">brctl delbr docker0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里静态路由，主要是能让nacos访问mysql</span></span><br><span class="line">ip route add 172.17.0.0/16 via 192.168.1.201</span><br><span class="line">ip route add 10.100.10.0/24 via 192.168.1.201</span><br><span class="line">ip route add 10.100.30.0/24 via 192.168.1.203</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置永久路由</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/sysconfig/network-scripts/route-interface</span></span><br><span class="line">172.17.0.0/16 via 192.168.1.201 dev eth0</span><br><span class="line">10.100.10.0/24 via 192.168.1.201 dev eth0</span><br><span class="line">10.100.30.0/24 via 192.168.1.203 dev eth0</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/nacos-cluster-docker/nacos2</span><br><span class="line">docker-compose -f docker-compose-nacos2.yml up -d</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">iptables允许新增的子网网卡转发(略)</span></span><br></pre></td></tr></table></figure><h5 id="4-配置Nacos3-203"><a href="#4-配置Nacos3-203" class="headerlink" title="4. 配置Nacos3-203"></a>4. 配置Nacos3-203</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">init.d/custom.properties是官方提供的自选功能配置文件，每个节点均需要此文件，保持默认即可</span></span><br><span class="line">mkdir -p /root/nacos-cluster-docker/init.d</span><br><span class="line">mkdir -p /root/nacos-cluster-docker/nacos3</span><br></pre></td></tr></table></figure><p>官方的init.d/custom.properties配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">略</span><br></pre></td></tr></table></figure><p>Nacos3-203服务器的docker-compose-nacos3.yml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">version: '2' </span><br><span class="line">services:</span><br><span class="line"><span class="meta">  #</span><span class="bash"> nacos-server服务注册与发现，配置中心服务    </span></span><br><span class="line">  docker-nacos-server:</span><br><span class="line">    image: nacos/nacos-server:latest</span><br><span class="line">    container_name: nacos-server-3</span><br><span class="line">    ports:</span><br><span class="line">      - "8848:8848"</span><br><span class="line">      - "9555:9555"</span><br><span class="line">    networks:</span><br><span class="line">      default:</span><br><span class="line">        ipv4_address: 10.100.30.2</span><br><span class="line">      </span><br><span class="line">    restart: on-failure</span><br><span class="line">    privileged: true</span><br><span class="line">    environment:</span><br><span class="line">      PREFER_HOST_MODE: ip</span><br><span class="line">      SPRING_DATASOURCE_PLATFORM: mysql</span><br><span class="line">      NACOS_SERVER_IP: 10.100.30.2</span><br><span class="line">      NACOS_SERVERS: 10.100.10.2:8848 10.100.20.2:8848 10.100.30.2:8848</span><br><span class="line">      MYSQL_MASTER_SERVICE_HOST: 172.17.0.2 #mysql配置，Master为主节点，Slave为从节点</span><br><span class="line">      MYSQL_MASTER_SERVICE_PORT: 3306</span><br><span class="line">      MYSQL_MASTER_SERVICE_DB_NAME: nacos_config</span><br><span class="line">      MYSQL_MASTER_SERVICE_USER: root</span><br><span class="line">      MYSQL_MASTER_SERVICE_PASSWORD: root</span><br><span class="line">      MYSQL_SLAVE_SERVICE_HOST: 172.17.0.3</span><br><span class="line">      MYSQL_SLAVE_SERVICE_PORT: 3306</span><br><span class="line">      #JVM调优参数</span><br><span class="line">      #JVM_XMS:  -Xms default :700m</span><br><span class="line">      #JVM_XMX:  -Xmx default :700m</span><br><span class="line">      #JVM_XMN:  -Xmn default :500m</span><br><span class="line">      #JVM_MS:   #-XX:MetaspaceSize default :128m</span><br><span class="line">      #JVM_MMS:  #-XX:MaxMetaspaceSize default :320m</span><br><span class="line">      #NACOS_DEBUG: n #是否开启远程debug，y/n，默认n</span><br><span class="line">      #TOMCAT_ACCESSLOG_ENABLED: true #是否开始tomcat访问日志的记录，默认false</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/A/nacos3:/home/nacos/logs #日志输出目录</span><br><span class="line">      - ../init.d/custom.properties:/home/nacos/init.d/custom.properties</span><br><span class="line"></span><br><span class="line">networks:</span><br><span class="line">  default:</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      driver: default</span><br><span class="line">      config:</span><br><span class="line">      - subnet: 10.100.30.0/24</span><br><span class="line">        gateway: 10.100.30.1</span><br></pre></td></tr></table></figure><p>添加静态路由</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">移除本机docker0网卡[否则网段冲突，无法添加]</span></span><br><span class="line">yum -y install bridge-utils</span><br><span class="line">ip link set dev docker0 down</span><br><span class="line">brctl delbr docker0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">这里静态路由，主要是能让nacos访问mysql</span></span><br><span class="line">ip route add 172.17.0.0/16 via 192.168.1.201</span><br><span class="line">ip route add 10.100.10.0/24 via 192.168.1.201</span><br><span class="line">ip route add 10.100.20.0/24 via 192.168.1.202</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">配置永久路由</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/sysconfig/network-scripts/route-interface</span></span><br><span class="line">172.17.0.0/16 via 192.168.1.201 dev eth0</span><br><span class="line">10.100.10.0/24 via 192.168.1.201 dev eth0</span><br><span class="line">10.100.20.0/24 via 192.168.1.202 dev eth0</span><br></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/nacos-cluster-docker/nacos3</span><br><span class="line">docker-compose -f docker-compose-nacos3.yml up -d</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">iptables允许新增的子网网卡转发(略)</span></span><br></pre></td></tr></table></figure><h5 id="5-访问Nacos-UI"><a href="#5-访问Nacos-UI" class="headerlink" title="5. 访问Nacos UI"></a>5. 访问Nacos UI</h5><p><a href="http://192.168.1.201:8848/nacos" target="_blank" rel="noopener">http://192.168.1.201:8848/nacos</a>      默认账号密码都是nacos</p><p><strong>集群管理 —&gt;节点列表</strong>:  正常情况下可以看到所有节点，且自动完成Leader选举。</p><table><thead><tr><th>10.100.10.2:8848</th><th>FOLLOWER</th><th>1</th><th>15776</th><th>3500</th></tr></thead><tbody><tr><td>10.100.20.2:8848</td><td>LEADER</td><td>1</td><td>16676</td><td>5000</td></tr><tr><td>10.100.30.2:8848</td><td>FOLLOWER</td><td>0</td><td>10</td><td>1116</td></tr></tbody></table><h5 id="6-Nginx代理Nacos节点"><a href="#6-Nginx代理Nacos节点" class="headerlink" title="6. Nginx代理Nacos节点"></a>6. Nginx代理Nacos节点</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">    upstream nacos-cluster &#123;</span><br><span class="line">        server 10.100.10.2:8848;</span><br><span class="line">        server 10.100.20.2:8848;</span><br><span class="line">        server 10.100.30.2:8848;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen 8848;</span><br><span class="line">        location /&#123;</span><br><span class="line">            proxy_pass http://nacos-cluster;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h5&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;服务名称&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;IP&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;宿主机IP&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Docker子网&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Nacos1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.100.10.2:8848&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.1.201:8848&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.100.10.0/24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Nacos2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.100.20.2:8848&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.1.202:8848&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.100.20.0/24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Nacos3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.100.30.2:8848&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;192.168.1.203:8848&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10.100.30.0/24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;MySQL主&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;172.17.0.2:3306&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;172.17.0.0/16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;MySQL从&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;172.17.0.3:3306&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;172.17.0.0/16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;注：准备好MySQL主从环境&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="nacos" scheme="https://garywu520.github.io/blog/tags/nacos/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose自定义子网及固定容器IP</title>
    <link href="https://garywu520.github.io/blog/2020/01/08/docker-compose%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AD%90%E7%BD%91%E5%8F%8A%E5%9B%BA%E5%AE%9A%E5%AE%B9%E5%99%A8IP/"/>
    <id>https://garywu520.github.io/blog/2020/01/08/docker-compose自定义子网及固定容器IP/</id>
    <published>2020-01-08T07:41:53.000Z</published>
    <updated>2020-01-09T09:36:29.784Z</updated>
    
    <content type="html"><![CDATA[<p>docker-compose定义子网，需要指定version为2，如果version设置为3则会报如下错误</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ERROR: The Compose file './docker-compose-xxx.yml' is invalid because:</span><br><span class="line">networks.default.ipam.config value Additional properties are not allowed ('gateway' was unexpected)</span><br></pre></td></tr></table></figure><a id="more"></a><p>配置Docker-compose自定义子网及固定IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">version: '2'    #这里必须是版本2</span><br><span class="line">services: </span><br><span class="line">  docker-nacos-server:</span><br><span class="line">    image: nacos/nacos-server:latest</span><br><span class="line">    container_name: nacos-server-2</span><br><span class="line">    ports:</span><br><span class="line">      - "8848:8848"</span><br><span class="line">      - "9555:9555"</span><br><span class="line"><span class="meta">#</span><span class="bash">------------------ 引用子网 ----------------------------------<span class="comment">#      </span></span></span><br><span class="line">    networks:</span><br><span class="line">      nacosnat:  #nacosnat是自定义的网络名称</span><br><span class="line">        ipv4_address: 10.100.20.10   #固定IP为10.100.20.10</span><br><span class="line"><span class="meta">#</span><span class="bash">------------------ 结束区域 ----------------------------------<span class="comment">#       </span></span></span><br><span class="line">    restart: on-failure</span><br><span class="line">    privileged: true</span><br><span class="line">    environment:</span><br><span class="line">      PREFER_HOST_MODE: ip</span><br><span class="line">      SPRING_DATASOURCE_PLATFORM: mysql</span><br><span class="line">      NACOS_SERVER_IP: 192.168.1.202</span><br><span class="line">      NACOS_SERVERS: 192.168.1.201:8848 192.168.1.202:8848 192.168.1.203:8848</span><br><span class="line">      MYSQL_MASTER_SERVICE_HOST: 192.168.1.201 </span><br><span class="line">      MYSQL_MASTER_SERVICE_PORT: 3305</span><br><span class="line">      MYSQL_MASTER_SERVICE_DB_NAME: nacos_config</span><br><span class="line">      MYSQL_MASTER_SERVICE_USER: root</span><br><span class="line">      MYSQL_MASTER_SERVICE_PASSWORD: root</span><br><span class="line">      MYSQL_SLAVE_SERVICE_HOST: 192.168.1.201</span><br><span class="line">      MYSQL_SLAVE_SERVICE_PORT: 3304</span><br><span class="line">    volumes:</span><br><span class="line">      - /data/A/nacos2:/home/nacos/logs </span><br><span class="line">      - ../init.d/custom.properties:/home/nacos/init.d/custom.properties</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">------------------ 定义子网信息 ----------------------------------<span class="comment"># </span></span></span><br><span class="line">networks:</span><br><span class="line">  nacosnat:  #nacosnat是自定义的网络名称</span><br><span class="line">    driver: bridge</span><br><span class="line">    ipam:</span><br><span class="line">      config:</span><br><span class="line">        - subnet: 10.100.20.0/24     #指定子网</span><br><span class="line">          gateway: 10.100.20.1       #指定网关</span><br><span class="line"><span class="meta">#</span><span class="bash">------------------ 结束区域 ----------------------------------<span class="comment">#</span></span></span><br></pre></td></tr></table></figure><p>验证容器IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker inspect -f <span class="string">'&#123;&#123;range .NetworkSettings.Networks&#125;&#125;&#123;&#123;.IPAddress&#125;&#125;&#123;&#123;end&#125;&#125;'</span> 1c68d336c524</span></span><br><span class="line">10.100.20.10</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker-compose定义子网，需要指定version为2，如果version设置为3则会报如下错误&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ERROR: The Compose file &#39;./docker-compose-xxx.yml&#39; is invalid because:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;networks.default.ipam.config value Additional properties are not allowed (&#39;gateway&#39; was unexpected)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="docker-compose" scheme="https://garywu520.github.io/blog/tags/docker-compose/"/>
    
      <category term="docker ip" scheme="https://garywu520.github.io/blog/tags/docker-ip/"/>
    
      <category term="ip" scheme="https://garywu520.github.io/blog/tags/ip/"/>
    
  </entry>
  
  <entry>
    <title>Docker部署MySQL主从</title>
    <link href="https://garywu520.github.io/blog/2020/01/07/Docker%E9%83%A8%E7%BD%B2MySQL%E4%B8%BB%E4%BB%8E/"/>
    <id>https://garywu520.github.io/blog/2020/01/07/Docker部署MySQL主从/</id>
    <published>2020-01-07T09:02:35.000Z</published>
    <updated>2020-01-07T09:05:46.770Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-环境"><a href="#1-环境" class="headerlink" title="1.环境"></a>1.环境</h5><ul><li><p>mysql:5.7.28 【主从使用的镜像版本一致】</p></li><li><p><strong>单机双MySQL Docker容器</strong></p><p><strong>MySQL Master:</strong> 192.168.1.201:3305</p><p><strong>MySQL Slave:</strong> 192.168.1.201:3304</p></li><li><p>Iptables 内网开放3304和3305端口</p></li></ul><a id="more"></a><h5 id="2-Master-Docker配置"><a href="#2-Master-Docker配置" class="headerlink" title="2. Master Docker配置"></a>2. Master Docker配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7.28</span><br><span class="line">mkdir -p /data/A/mysql-master</span><br><span class="line">mkdir -p /root/mysql-master-docker/</span><br></pre></td></tr></table></figure><p>vim mysql-master.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"> </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">prompt = \\u@\\h[\\d]&gt;\\_</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash">设置server_id，一般设置为IP，同一局域网内注意要唯一</span></span><br><span class="line">server_id=100</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改字符集</span></span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">default-time_zone = '+8:00'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开启二进制日志功能,名称可以自定义</span></span><br><span class="line">log-bin=edu-mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">主从复制的格式</span></span><br><span class="line">binlog_format=row</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">二进制日志自动删除/过期的天数</span></span><br><span class="line">expire_logs_days=7</span><br></pre></td></tr></table></figure><p><strong>运行Docker容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-master -p 3305:3306 -v /root/mysql-master-docker/mysql-master.cnf:/etc/mysql/conf.d/my.cnf -v /data/A/mysql-master:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7.28</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>容器的3306端口映射到宿主机的3305端口</li><li>把本地的mysql-master.cnf配置文件映射到容器内，修改实时生效。而mysql实际数据最终落地到/data/A/mysql-master目录</li><li>默认情况下，MySQL的启动配置文件是<code>/etc/mysql/my.cnf</code>，而<code>/etc/mysql/conf.d</code>目录下的存在任何<code>.cnf</code>格式的文件时，都会使用该文件中配置项替换默认配置。所以这里采用文件映射方式</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入MySQL Master容器</span></span><br><span class="line">docker exec -it mysql-master /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证配置是否已经加载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p -h 127.0.0.1 -P 3305</span></span><br><span class="line">MySQL [(none)]&gt; show variables like 'server_id';</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 100   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h5 id="3-Slave-Docker配置"><a href="#3-Slave-Docker配置" class="headerlink" title="3. Slave Docker配置"></a>3. Slave Docker配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/A/mysql-slave</span><br><span class="line">mkdir -p /root/mysql-slave-docker/</span><br></pre></td></tr></table></figure><p>vim mysql-slave.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8</span><br><span class="line"> </span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8</span><br><span class="line">prompt = \\u@\\h[\\d]&gt;\\_</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash">设置server_id，一般设置为IP，同一局域网内注意要唯一</span></span><br><span class="line">server_id=101</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定哪个数据库不用同步</span></span><br><span class="line"><span class="meta">#</span><span class="bash">binlog-ignore-db=mysql</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改字符集</span></span><br><span class="line">character-set-server = utf8</span><br><span class="line">collation-server = utf8_general_ci</span><br><span class="line">default-time_zone = '+8:00'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">开启二进制日志功能,名称可以自定义</span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">为每个session 分配的内存，在事务过程中用来存储二进制日志的缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">主从复制的格式</span></span><br><span class="line">binlog_format=row</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">二进制日志自动删除/过期的天数</span></span><br><span class="line">expire_logs_days=7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">跳过错误,如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure><p><strong>运行Docker容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-slave -p 3304:3306 -v /root/mysql-slave-docker/mysql-slave.cnf:/etc/mysql/conf.d/my.cnf -v /data/A/mysql-slave:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:5.7.28</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入MySQL Master容器</span></span><br><span class="line">docker exec -it mysql-slave /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证配置是否已经加载</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p -h 127.0.0.1 -P 3304</span></span><br><span class="line">MySQL [(none)]&gt; show variables like 'server_id';</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 101   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>slave宿主机上测试连接Docker Master </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# mysql -uroot -p -h 192.168.1.201 -P 3305</span><br><span class="line">MySQL [(none)]&gt;</span><br></pre></td></tr></table></figure><h5 id="4-Master配置"><a href="#4-Master配置" class="headerlink" title="4. Master配置"></a>4. Master配置</h5><p>配置数据同步用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant replication slave on *.* to repl@'%' identified by 'repl123';</span><br></pre></td></tr></table></figure><p>查看File position字段的值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mysql -uroot -p -h 192.168.1.201 -P 3305</span></span><br><span class="line">MySQL [(none)]&gt; show master status;</span><br><span class="line"></span><br><span class="line">edu-mysql-bin.000003       429</span><br></pre></td></tr></table></figure><h5 id="5-Slave执行主从复制命令"><a href="#5-Slave执行主从复制命令" class="headerlink" title="5. Slave执行主从复制命令"></a>5. Slave执行主从复制命令</h5><p>mysql -uroot -p -h 192.168.1.201 -P 3304</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST='192.168.1.201',</span><br><span class="line">  MASTER_USER='repl',</span><br><span class="line">  MASTER_PASSWORD='repl123',</span><br><span class="line">  MASTER_PORT=3305,</span><br><span class="line">  MASTER_LOG_FILE='edu-mysql-bin.000003',</span><br><span class="line">  MASTER_LOG_POS=429;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">start slave;</span><br><span class="line">show slave status\G</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">*************************** 1. row ***************************</span><br><span class="line">               Slave_IO_State: Waiting for master to send event</span><br><span class="line">                  Master_Host: 192.168.1.201</span><br><span class="line">                  Master_User: repl</span><br><span class="line">                  Master_Port: 3305</span><br><span class="line">                Connect_Retry: 60</span><br><span class="line">              Master_Log_File: edu-mysql-bin.000003</span><br><span class="line">          Read_Master_Log_Pos: 429</span><br><span class="line">               Relay_Log_File: 820cc66bb667-relay-bin.000002</span><br><span class="line">                Relay_Log_Pos: 324</span><br><span class="line">        Relay_Master_Log_File: edu-mysql-bin.000003</span><br><span class="line">             Slave_IO_Running: Yes</span><br><span class="line">            Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-环境&quot;&gt;&lt;a href=&quot;#1-环境&quot; class=&quot;headerlink&quot; title=&quot;1.环境&quot;&gt;&lt;/a&gt;1.环境&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mysql:5.7.28 【主从使用的镜像版本一致】&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;单机双MySQL Docker容器&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL Master:&lt;/strong&gt; 192.168.1.201:3305&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MySQL Slave:&lt;/strong&gt; 192.168.1.201:3304&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Iptables 内网开放3304和3305端口&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="MySQL" scheme="https://garywu520.github.io/blog/tags/MySQL/"/>
    
      <category term="MySQL主从" scheme="https://garywu520.github.io/blog/tags/MySQL%E4%B8%BB%E4%BB%8E/"/>
    
  </entry>
  
  <entry>
    <title>docker固定容器IP</title>
    <link href="https://garywu520.github.io/blog/2020/01/06/docker%E5%9B%BA%E5%AE%9A%E5%AE%B9%E5%99%A8IP/"/>
    <id>https://garywu520.github.io/blog/2020/01/06/docker固定容器IP/</id>
    <published>2020-01-06T06:17:59.000Z</published>
    <updated>2020-01-06T06:35:16.721Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-Docker三种网络模式"><a href="#1-Docker三种网络模式" class="headerlink" title="1. Docker三种网络模式"></a>1. Docker三种网络模式</h5><p>docker安装后，默认会创建三种网络类型，bridge、host和none</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">631fadbc4865        bridge              bridge              local</span><br><span class="line">2fe72a388b82        host                host                local</span><br><span class="line">09474b45c7bf        none                null                local</span><br></pre></td></tr></table></figure><ul><li>bridge:网络桥接[默认模式]<br>默认情况下启动、创建容器都是用该模式，所以每次docker容器重启时会按照顺序获取对应ip地址，这就导致容器每次重启，ip都发生变化</li><li>none：无指定网络<br>启动容器时，可以通过–network=none,docker容器不会分配局域网ip</li><li>host：主机网络<br>docker容器的网络会附属在主机上，两者是互通的。</li></ul><a id="more"></a><h5 id="2-配置固定IP的容器"><a href="#2-配置固定IP的容器" class="headerlink" title="2. 配置固定IP的容器"></a>2. 配置固定IP的容器</h5><ul><li><p>创建自定义网络,并指定一个子网网段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker network create --subnet=172.18.0.0/16 docker_net</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">631fadbc4865        bridge              bridge              local</span><br><span class="line">e41e337d212b        docker_net          bridge              local</span><br><span class="line">2fe72a388b82        host                host                local</span><br><span class="line">09474b45c7bf        none                null                local</span><br></pre></td></tr></table></figure></li><li><p>运行Docker容器【指定IP地址】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd --name centos_test --network docker_net --ip 172.18.0.2 centos:latest /bin/bash</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li><p>必须在自定义网络上给容器指定IP地址</p></li><li><p>由于我们创建了一个自定义网络，通过ip address可以看到新网卡名称为br-e41e337d212b，故还需要在iptables中添加此网卡的转发规则</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker_net </span></span><br><span class="line">iptables -A FORWARD -i br-e41e337d212b -o eth0 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth0 -o br-e41e337d212b -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i br-e41e337d212b -o br-e41e337d212b -j ACCEPT</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>允许br-e41e337d212b与eth0物理网卡转发，允许br-e41e337d212b网络的容器间转发</code></pre><p>  <strong>docker 与 iptables网络转发:</strong> <a href="[https://garywu520.github.io/blog/2019/12/03/Docker%E4%B8%8Eiptables%E9%98%B2%E7%81%AB%E5%A2%99/](https://garywu520.github.io/blog/2019/12/03/Docker与iptables防火墙/)">参考</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-Docker三种网络模式&quot;&gt;&lt;a href=&quot;#1-Docker三种网络模式&quot; class=&quot;headerlink&quot; title=&quot;1. Docker三种网络模式&quot;&gt;&lt;/a&gt;1. Docker三种网络模式&lt;/h5&gt;&lt;p&gt;docker安装后，默认会创建三种网络类型，bridge、host和none&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; docker network ls&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;NETWORK ID          NAME                DRIVER              SCOPE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;631fadbc4865        bridge              bridge              local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2fe72a388b82        host                host                local&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;09474b45c7bf        none                null                local&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;bridge:网络桥接[默认模式]&lt;br&gt;默认情况下启动、创建容器都是用该模式，所以每次docker容器重启时会按照顺序获取对应ip地址，这就导致容器每次重启，ip都发生变化&lt;/li&gt;
&lt;li&gt;none：无指定网络&lt;br&gt;启动容器时，可以通过–network=none,docker容器不会分配局域网ip&lt;/li&gt;
&lt;li&gt;host：主机网络&lt;br&gt;docker容器的网络会附属在主机上，两者是互通的。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://garywu520.github.io/blog/tags/Docker/"/>
    
      <category term="固定IP" scheme="https://garywu520.github.io/blog/tags/%E5%9B%BA%E5%AE%9AIP/"/>
    
  </entry>
  
  <entry>
    <title>Nginx获取CDN上用户的真实IP地址</title>
    <link href="https://garywu520.github.io/blog/2019/12/23/Nginx%E8%8E%B7%E5%8F%96CDN%E4%B8%8A%E7%94%A8%E6%88%B7%E7%9A%84%E7%9C%9F%E5%AE%9EIP%E5%9C%B0%E5%9D%80/"/>
    <id>https://garywu520.github.io/blog/2019/12/23/Nginx获取CDN上用户的真实IP地址/</id>
    <published>2019-12-23T08:18:42.000Z</published>
    <updated>2019-12-23T09:05:53.544Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、场景"><a href="#一、场景" class="headerlink" title="一、场景"></a>一、场景</h5><blockquote><p>Nginx配置的域名使用了Cloudflare CDN服务，Nginx日志获取到的客户端IP不是用户的真实IP地址，进而不能对相关接口服务做访问限制。</p></blockquote><h5 id="二、一般情况获取用户真实IP"><a href="#二、一般情况获取用户真实IP" class="headerlink" title="二、一般情况获取用户真实IP"></a>二、一般情况获取用户真实IP</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在location区段加入以下配置</span></span><br><span class="line">proxy_set_header Host $host; </span><br><span class="line">proxy_set_header X-Real-IP $remote_addr; </span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="三、获取CDN上用户的真实IP"><a href="#三、获取CDN上用户的真实IP" class="headerlink" title="三、获取CDN上用户的真实IP"></a>三、获取CDN上用户的真实IP</h5><ul><li><p><strong>确认Nginx是否支持</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> nginx -V  </span></span><br><span class="line"><span class="meta">#</span><span class="bash">确认有没有 --with-http_realip_module模块，有表示支持，没有可能需要编译</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>编译</strong></p><ol><li>进入nginx 源码安装包目录下</li><li>configure  的参数就和原来保持一样，只是增加一个–with-http_realip_module </li><li>例如：–prefix=/usr/local/nginx  –with-http_stub_status_module  –with-http_realip_module</li><li>make &amp;&amp; make install </li><li>至于平滑升级，可直接执行 killall -s USR2 nginx</li></ol><ul><li><p><strong>接下来编辑location区段，加入以下信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Cloudflare CDN IP段</span></span><br><span class="line">set_real_ip_from 131.0.72.0/22;</span><br><span class="line">set_real_ip_from 131.0.72.0/22;</span><br><span class="line">......</span><br><span class="line">real_ip_header  X-Forwarded-For;</span><br><span class="line">real_ip_recursive on;</span><br></pre></td></tr></table></figure><p>注：set_real_ip_from要填写CDN真实的IP或IP段</p><p><strong>Cloudflare CDN IP段: <a href="https://www.cloudflare.com/ips/" target="_blank" rel="noopener">https://www.cloudflare.com/ips/</a></strong></p></li></ul><p>到此配置完成，结合allow/deny规则 即可对客户端IP做访问限制了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、场景&quot;&gt;&lt;a href=&quot;#一、场景&quot; class=&quot;headerlink&quot; title=&quot;一、场景&quot;&gt;&lt;/a&gt;一、场景&lt;/h5&gt;&lt;blockquote&gt;
&lt;p&gt;Nginx配置的域名使用了Cloudflare CDN服务，Nginx日志获取到的客户端IP不是用户的真实IP地址，进而不能对相关接口服务做访问限制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;二、一般情况获取用户真实IP&quot;&gt;&lt;a href=&quot;#二、一般情况获取用户真实IP&quot; class=&quot;headerlink&quot; title=&quot;二、一般情况获取用户真实IP&quot;&gt;&lt;/a&gt;二、一般情况获取用户真实IP&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;在location区段加入以下配置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy_set_header Host $host; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy_set_header X-Real-IP $remote_addr; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Nginx" scheme="https://garywu520.github.io/blog/tags/Nginx/"/>
    
      <category term="CDN" scheme="https://garywu520.github.io/blog/tags/CDN/"/>
    
      <category term="IP" scheme="https://garywu520.github.io/blog/tags/IP/"/>
    
  </entry>
  
  <entry>
    <title>docker部署网盘seafile</title>
    <link href="https://garywu520.github.io/blog/2019/12/18/docker%E9%83%A8%E7%BD%B2%E7%BD%91%E7%9B%98seafile/"/>
    <id>https://garywu520.github.io/blog/2019/12/18/docker部署网盘seafile/</id>
    <published>2019-12-18T06:37:19.000Z</published>
    <updated>2019-12-18T06:47:31.481Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-Github项目"><a href="#1-Github项目" class="headerlink" title="1. Github项目"></a>1. Github项目</h5><ul><li><a href="https://github.com/haiwen/seafile-docker" target="_blank" rel="noopener">seafile docker</a></li></ul><a id="more"></a><h5 id="2-运行seafile"><a href="#2-运行seafile" class="headerlink" title="2. 运行seafile"></a>2. 运行seafile</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name seafile \</span><br><span class="line">  -e SEAFILE_SERVER_HOSTNAME=cloud.qst.com \</span><br><span class="line">  -e SEAFILE_ADMIN_EMAIL=admin@xxx.com \</span><br><span class="line">  -e SEAFILE_ADMIN_PASSWORD=passworld \</span><br><span class="line">  -v /data/A/seafile:/shared \</span><br><span class="line">  -p 9003:80 \</span><br><span class="line">  seafileltd/seafile:latest</span><br></pre></td></tr></table></figure><p><strong>注：使用如下参数设定管理员账号密码</strong></p><ul><li><p>-e SEAFILE_SERVER_HOSTNAME  这里不能写IP，必须写域名</p></li><li><p>-e SEAFILE_ADMIN_EMAIL=admin@xxx.com  </p></li><li><p>-e SEAFILE_ADMIN_PASSWORD=passworld </p></li></ul><h5 id="3-访问"><a href="#3-访问" class="headerlink" title="3. 访问"></a>3. 访问</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.1.8:9003</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-Github项目&quot;&gt;&lt;a href=&quot;#1-Github项目&quot; class=&quot;headerlink&quot; title=&quot;1. Github项目&quot;&gt;&lt;/a&gt;1. Github项目&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/haiwen/seafile-docker&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;seafile docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="seafile" scheme="https://garywu520.github.io/blog/tags/seafile/"/>
    
  </entry>
  
  <entry>
    <title>docker数据持久化</title>
    <link href="https://garywu520.github.io/blog/2019/12/17/docker%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://garywu520.github.io/blog/2019/12/17/docker数据持久化/</id>
    <published>2019-12-17T09:25:43.000Z</published>
    <updated>2019-12-18T06:38:12.778Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h5><p>对于业务首先考虑清楚，docker容器服务数据是存放在哪个目录的，那么就持久化这个目录或子目录即可。</p><p>而对于二进制启动文件与数据目录[如log目录]在同目录下，那么只需持久化log子目录即可。需要使用–privileged=true参数用来防止目录没有权限</p><a id="more"></a><h5 id="二、创建数据卷"><a href="#二、创建数据卷" class="headerlink" title="二、创建数据卷"></a>二、创建数据卷</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Dockerfile声明数据卷</span></span><br><span class="line">VOLUME /var/lib/mysql</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">docker run过程中创建数据卷</span></span><br><span class="line">docker run --name nginx-data -v /data/A/mysql:/var/lib/mysql mysql</span><br></pre></td></tr></table></figure><p><strong>注：</strong></p><ul><li>Docker会自动生成一个目录作为挂载的目录。</li><li><strong>即使容器被删除，宿主机中的目录也不会被删除。</strong></li></ul><h5 id="三、查看删除数据卷"><a href="#三、查看删除数据卷" class="headerlink" title="三、查看删除数据卷"></a>三、查看删除数据卷</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看docker容器数据卷</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker inspect 容器ID</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">删除数据卷</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker rm -v 容器ID</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、前言&quot;&gt;&lt;a href=&quot;#一、前言&quot; class=&quot;headerlink&quot; title=&quot;一、前言&quot;&gt;&lt;/a&gt;一、前言&lt;/h5&gt;&lt;p&gt;对于业务首先考虑清楚，docker容器服务数据是存放在哪个目录的，那么就持久化这个目录或子目录即可。&lt;/p&gt;
&lt;p&gt;而对于二进制启动文件与数据目录[如log目录]在同目录下，那么只需持久化log子目录即可。需要使用–privileged=true参数用来防止目录没有权限&lt;/p&gt;
    
    </summary>
    
    
      <category term="Docker" scheme="https://garywu520.github.io/blog/tags/Docker/"/>
    
      <category term="持久化" scheme="https://garywu520.github.io/blog/tags/%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>给zookeeper添加ACL基本认证</title>
    <link href="https://garywu520.github.io/blog/2019/12/12/%E7%BB%99zookeeper%E6%B7%BB%E5%8A%A0%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/"/>
    <id>https://garywu520.github.io/blog/2019/12/12/给zookeeper添加基本认证/</id>
    <published>2019-12-12T08:58:01.000Z</published>
    <updated>2019-12-12T09:15:19.858Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>添加一个认证用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">密码为明文</span></span><br><span class="line">addauth digest user1:'password1'</span><br></pre></td></tr></table></figure></li><li><p>设置权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setAcl / auth:user1:password1:cdrwa</span><br></pre></td></tr></table></figure></li><li><p>查看ACL设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getAcl /path</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>连接示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> zkCli.sh -server 127.0.0.1:12181</span></span><br><span class="line">[zk: 127.0.0.1:12181(CONNECTED) 1] ls /</span><br><span class="line">Authentication is not valid : /</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">[zk: 127.0.0.1:12181(CONNECTED) 2] getAcl /</span></span><br><span class="line">'digest,'user1:xuyC7ITdZYcNgdrRrz+l5XtaUog=</span><br><span class="line">: cdrwa</span><br><span class="line">[zk: 127.0.0.1:12181(CONNECTED) 3] addauth digest zhaiwei:'xxxxxx'</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:12181(CONNECTED) 4] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://cloud.tencent.com/developer/article/1047819" target="_blank" rel="noopener">阿里云社区</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加一个认证用户&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;密码为明文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addauth digest user1:&#39;password1&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置权限&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setAcl / auth:user1:password1:cdrwa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看ACL设置&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getAcl /path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="zookeeper" scheme="https://garywu520.github.io/blog/tags/zookeeper/"/>
    
      <category term="zk" scheme="https://garywu520.github.io/blog/tags/zk/"/>
    
      <category term="ACL" scheme="https://garywu520.github.io/blog/tags/ACL/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云免费的Docker私有仓库</title>
    <link href="https://garywu520.github.io/blog/2019/12/11/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%8D%E8%B4%B9%E7%9A%84Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>https://garywu520.github.io/blog/2019/12/11/使用阿里云免费的Docker私有仓库/</id>
    <published>2019-12-11T07:30:13.000Z</published>
    <updated>2019-12-11T07:34:06.901Z</updated>
    
    <content type="html"><![CDATA[<p>貌似只要购买了ECC云服务器，就可以免费开通这个服务。</p><h5 id="1-访问-阿里云容器镜像服务"><a href="#1-访问-阿里云容器镜像服务" class="headerlink" title="1. 访问 阿里云容器镜像服务"></a>1. 访问 阿里云容器镜像服务</h5><p>链接：<a href="https://cr.console.aliyun.com/cn-hongkong/instances/repositories" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hongkong/instances/repositories</a></p><p>首先要设置一个叫做Registry密码，这个密码用来推送/拉取Docker镜像使用</p><h5 id="2-创建私有镜像仓库"><a href="#2-创建私有镜像仓库" class="headerlink" title="2. 创建私有镜像仓库"></a>2. 创建私有镜像仓库</h5><p>默认实例 —&gt; 镜像仓库 —&gt; 创建镜像仓库</p><p>可以选择镜像仓库的地域，这里开通的是香港节点的私有仓库</p><a id="more"></a><h5 id="3-推送本地Docker镜像到阿里云私有仓库"><a href="#3-推送本地Docker镜像到阿里云私有仓库" class="headerlink" title="3. 推送本地Docker镜像到阿里云私有仓库"></a>3. 推送本地Docker镜像到阿里云私有仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">登录阿里云Docker Registry[按照提示输入Registry密码]</span></span><br><span class="line">docker login --username=xxxxxx@1009xxx8864439 registry.cn-hongkong.aliyuncs.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置镜像Tag</span></span><br><span class="line">sudo docker tag [Image Id] registry.cn-hongkong.aliyuncs.com/qst_images/qst_store:[镜像名_版本号]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">推送镜像</span></span><br><span class="line">docker push registry.cn-hongkong.aliyuncs.com/qst_images/qst_store:[镜像名_版本号]</span><br></pre></td></tr></table></figure><h5 id="4-拉取阿里云私有仓库镜像"><a href="#4-拉取阿里云私有仓库镜像" class="headerlink" title="4. 拉取阿里云私有仓库镜像"></a>4. 拉取阿里云私有仓库镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">登录阿里云Docker Registry</span></span><br><span class="line">docker login --username=--username=xxxxxx@1009xxx8864439 registry.cn-hongkong.aliyuncs.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull registry.cn-hongkong.aliyuncs.com/qst_images/qst_store:[镜像名_版本号]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;貌似只要购买了ECC云服务器，就可以免费开通这个服务。&lt;/p&gt;
&lt;h5 id=&quot;1-访问-阿里云容器镜像服务&quot;&gt;&lt;a href=&quot;#1-访问-阿里云容器镜像服务&quot; class=&quot;headerlink&quot; title=&quot;1. 访问 阿里云容器镜像服务&quot;&gt;&lt;/a&gt;1. 访问 阿里云容器镜像服务&lt;/h5&gt;&lt;p&gt;链接：&lt;a href=&quot;https://cr.console.aliyun.com/cn-hongkong/instances/repositories&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cr.console.aliyun.com/cn-hongkong/instances/repositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先要设置一个叫做Registry密码，这个密码用来推送/拉取Docker镜像使用&lt;/p&gt;
&lt;h5 id=&quot;2-创建私有镜像仓库&quot;&gt;&lt;a href=&quot;#2-创建私有镜像仓库&quot; class=&quot;headerlink&quot; title=&quot;2. 创建私有镜像仓库&quot;&gt;&lt;/a&gt;2. 创建私有镜像仓库&lt;/h5&gt;&lt;p&gt;默认实例 —&amp;gt; 镜像仓库 —&amp;gt; 创建镜像仓库&lt;/p&gt;
&lt;p&gt;可以选择镜像仓库的地域，这里开通的是香港节点的私有仓库&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://garywu520.github.io/blog/tags/Docker/"/>
    
      <category term="阿里云" scheme="https://garywu520.github.io/blog/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="镜像仓库" scheme="https://garywu520.github.io/blog/tags/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Maven私服部署-Docker安装nexus3</title>
    <link href="https://garywu520.github.io/blog/2019/12/10/Maven%E7%A7%81%E6%9C%8D%E9%83%A8%E7%BD%B2-Docker%E5%AE%89%E8%A3%85nexus3/"/>
    <id>https://garywu520.github.io/blog/2019/12/10/Maven私服部署-Docker安装nexus3/</id>
    <published>2019-12-10T08:37:29.000Z</published>
    <updated>2019-12-10T08:39:40.527Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-拉取nexus3镜像"><a href="#1-拉取nexus3镜像" class="headerlink" title="1. 拉取nexus3镜像"></a>1. 拉取nexus3镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search nexus3</span><br><span class="line">docker pull sonatype/nexus3</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="2-运行nexus容器"><a href="#2-运行nexus容器" class="headerlink" title="2. 运行nexus容器"></a>2. 运行nexus容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --privileged=true --name=nexus3 --restart=always -p 18081:8081 -v /data/A/nexus:/data/A/nexus sonatype/nexus3:latest</span><br></pre></td></tr></table></figure><a id="more"></a><p>参数解释：</p><ul><li>-id 创建守护式容器</li><li>–privileed=true  授权root权限(当挂载目录时，必须使用此项授权，否则容器会访问宿主机权限不足)</li><li>–name  给容器命名</li><li>-p  映射端口</li><li>-v  映射目录</li></ul><h5 id="3-访问nexus3"><a href="#3-访问nexus3" class="headerlink" title="3. 访问nexus3"></a>3. 访问nexus3</h5><p>docker运行后，稍等几分钟再进行访问</p><p>Web访问地址：http://公网IP:18081</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">默认账号：admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">默认密码需要登录docker查看，密码保存在了/nexus-data/admin.password文件中，进入docker查看：</span></span><br><span class="line">docker exec -it nexus3 /bin/bash</span><br><span class="line">cat /nexus-data/admin.password</span><br></pre></td></tr></table></figure><h5 id="4-查看仓库"><a href="#4-查看仓库" class="headerlink" title="4. 查看仓库"></a>4. 查看仓库</h5><p>设置齿轮 —&gt;  Repositories</p><h5 id="5-在项目中配置私服"><a href="#5-在项目中配置私服" class="headerlink" title="5. 在项目中配置私服"></a>5. 在项目中配置私服</h5><p>在 设置齿轮 —&gt;  Repositories —&gt;maven-public , URL列，点击COPY</p><p>把这个地址配置在本地maven的settings文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意：是public group仓库地址而不是releases或snapshots仓库，public默认包含了这两个仓库</span></span><br><span class="line"></span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;  </span><br><span class="line">    &lt;id&gt;dev&lt;/id&gt;  </span><br><span class="line">    &lt;repositories&gt;  </span><br><span class="line">     &lt;repository&gt;  </span><br><span class="line">        &lt;id&gt;local-nexus&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;http://192.168.3.128:8081/repository/maven-public/&lt;/url&gt;  </span><br><span class="line">        &lt;releases&gt;  </span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/releases&gt;  </span><br><span class="line">        &lt;snapshots&gt;  </span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;  </span><br><span class="line">        &lt;/snapshots&gt;  </span><br><span class="line">      &lt;/repository&gt; </span><br><span class="line">    &lt;/repositories&gt;  </span><br><span class="line">  &lt;/profile&gt;  </span><br><span class="line">  &lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>配置maven settings文件的服务器用户名密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意：id为私服中releases和snapshots仓库名，必须一致</span></span><br><span class="line">&lt;servers&gt;</span><br><span class="line">    &lt;server&gt;  </span><br><span class="line">        &lt;id&gt;maven-releases&lt;/id&gt;  </span><br><span class="line">        &lt;username&gt;admin&lt;/username&gt;  </span><br><span class="line">        &lt;password&gt;admin123&lt;/password&gt;  </span><br><span class="line">      &lt;/server&gt;  </span><br><span class="line">      &lt;server&gt;  </span><br><span class="line">        &lt;id&gt;maven-snapshots&lt;/id&gt;  </span><br><span class="line">        &lt;username&gt;admin&lt;/username&gt;  </span><br><span class="line">        &lt;password&gt;admin123&lt;/password&gt;  </span><br><span class="line">      &lt;/server&gt; </span><br><span class="line">  &lt;/servers&gt;</span><br></pre></td></tr></table></figure><p>在项目父pom文件中配置部署环境，注意id及URL必须与nexus仓库对应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--私服仓库--&gt;</span><br><span class="line">    &lt;distributionManagement&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;maven-releases&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Nexus Release Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://192.168.3.128:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;id&gt;maven-snapshots&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://192.168.3.128:8081/repository/maven-snapshots/&lt;/url&gt;</span><br><span class="line">        &lt;/snapshotRepository&gt;</span><br><span class="line">    &lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure><p>重新打开项目，对需要的模块进行deploy</p><p>最后在nexus中查看上传的jar包即可</p><p>参考：<a href="https://www.jianshu.com/p/09a6cab3785a" target="_blank" rel="noopener">Maven私服:Docker安装nexus3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-拉取nexus3镜像&quot;&gt;&lt;a href=&quot;#1-拉取nexus3镜像&quot; class=&quot;headerlink&quot; title=&quot;1. 拉取nexus3镜像&quot;&gt;&lt;/a&gt;1. 拉取nexus3镜像&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker search nexus3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull sonatype/nexus3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;2-运行nexus容器&quot;&gt;&lt;a href=&quot;#2-运行nexus容器&quot; class=&quot;headerlink&quot; title=&quot;2. 运行nexus容器&quot;&gt;&lt;/a&gt;2. 运行nexus容器&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -id --privileged=true --name=nexus3 --restart=always -p 18081:8081 -v /data/A/nexus:/data/A/nexus sonatype/nexus3:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="maven" scheme="https://garywu520.github.io/blog/tags/maven/"/>
    
      <category term="nexus3" scheme="https://garywu520.github.io/blog/tags/nexus3/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器应用的logs日志收集</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/Docker%E5%AE%B9%E5%99%A8%E5%BA%94%E7%94%A8%E7%9A%84LOG%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/Docker容器应用的LOG日志收集/</id>
    <published>2019-12-03T07:18:35.000Z</published>
    <updated>2019-12-04T07:38:31.760Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-查看容器log插件"><a href="#1-查看容器log插件" class="headerlink" title="1. 查看容器log插件"></a>1. 查看容器log插件</h5><p>Docker有很多日志插件，默认使用json-file。只有使用json-file格式的时候，docker logs -f 才可以显示实时日志。</p><p>查看docker默认的日志插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep 'Logging Driver'</span><br></pre></td></tr></table></figure><p>当容器运行时，docker会在宿主机上创建一个该容器相关的文件，然后将容器产生的日志转存到该文件下。docker logs -f 命令就会找到该文件内容并显示在终端上</p><a id="more"></a><h5 id="2-启用syslog服务"><a href="#2-启用syslog服务" class="headerlink" title="2. 启用syslog服务"></a>2. 启用syslog服务</h5><p>默认，Linux 操作系统已经安装了 Syslog 软件包，但它叫 Rsyslog。无需单独安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsyslogd -v</span><br></pre></td></tr></table></figure><p>如果要开启 Rsyslog 服务，我们必须对 Rsyslog 进行配置</p><p>vim /etc/rsyslog.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启用服务器端口监听</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imtcp</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputTcpServerRun 5000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当有多个docker容器服务的日志发送到syslog的时候，进行日志区分,实际区分名称与docker容器ID一一对应</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template DockerLogs,<span class="string">"/var/log/syslog/%fromhost-ip%-%programname%.log"</span></span></span><br><span class="line">*.* ?DockerLogs</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/log/syslog</span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"></span><br><span class="line">[root@test ~]# netstat -lntup|grep 5000            </span><br><span class="line">tcp    0   0 0.0.0.0:5000       0.0.0.0:*      LISTEN      9406/rsyslogd       </span><br><span class="line">tcp6   0   0 :::5000            :::*           LISTEN      9406/rsyslogd</span><br></pre></td></tr></table></figure><h5 id="3-为容器配置log插件"><a href="#3-为容器配置log插件" class="headerlink" title="3. 为容器配置log插件"></a>3. 为容器配置log插件</h5><blockquote><p>默认支持的log插件：<a href="https://docs.docker.com/config/containers/logging/configure/" target="_blank" rel="noopener">参考</a></p></blockquote><p>在启动容器时，可以使用 –log-driver 参数指定不同的日志插件，并使用 –log-opt参数进行响应设置。</p><p>下面是一个指定 Logging Driver 为 syslog 并传送到 logstash 的例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-v /etc/trojan:/etc/trojan \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--name trojan \</span><br><span class="line">--log-driver syslog \</span><br><span class="line">--log-opt syslog-address=tcp://192.168.1.10:5000 \</span><br><span class="line">--log-opt syslog-facility=daemon \</span><br><span class="line"> -d trojan:v2</span><br></pre></td></tr></table></figure><p>注释：</p><ul><li>–log-driver 指定日志插件为syslog</li><li>–log-opt syslog-address 指定把日志发送到的syslog服务器地址</li><li>–log-opt syslog-facility  指定要使用的syslog工具</li></ul><h5 id="4-收集容器应用log"><a href="#4-收集容器应用log" class="headerlink" title="4. 收集容器应用log"></a>4. 收集容器应用log</h5><p>在收集之前，可以先确认系统/var/log/message中是否已经有了docker中的trojan日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test supervisord.d]# tail -f /var/log/syslog/127.0.0.1-23357beeb213.log</span><br><span class="line">......</span><br><span class="line">Dec  4 14:12:07 localhost 23357beeb213[27509]: [2019-12-04 06:12:07] [INFO] 172.17.0.1:56160 disconnected, 10250 bytes received, 395 bytes sent, lasted for 17 seconds</span><br><span class="line">Dec  4 14:12:07 localhost 23357beeb213[27509]: [2019-12-04 06:12:07] [INFO] 172.17.0.1:56168 disconnected, 1338 bytes received, 395 bytes sent, lasted for 16 seconds</span><br><span class="line">Dec  4 14:12:20 localhost 23357beeb213[27509]: [2019-12-04 06:12:20] [INFO] 172.17.0.1:56212 requested connection to beacons.gvt2.com:443</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>既然文件都已经存储到系统文件了，索性logstash input直接使用file模块好了，就不用syslog了。如下：</p><p>logstash配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; ["/var/log/syslog/127.0.0.1-23357beeb213.log"]</span><br><span class="line">    type =&gt; "trojan_docker_1080"</span><br><span class="line">    start_position =&gt; "beginning"</span><br><span class="line">    sincedb_path =&gt; "/usr/local/logstash-6.5.4/tmp/sincedb1"</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  if [type] == "trojan_docker_1080" &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; ["xx.xx.xx.xx:9200"]</span><br><span class="line">      index =&gt; "logstash-trojan_docker_1080-%&#123;+YYYY-MM-dd&#125;"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">测试语法正确性</span></span><br><span class="line">bin/logstash -f /usr/local/logstash-6.5.4/conf.d/logstash.conf -t</span><br></pre></td></tr></table></figure><p>重启logstash</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-查看容器log插件&quot;&gt;&lt;a href=&quot;#1-查看容器log插件&quot; class=&quot;headerlink&quot; title=&quot;1. 查看容器log插件&quot;&gt;&lt;/a&gt;1. 查看容器log插件&lt;/h5&gt;&lt;p&gt;Docker有很多日志插件，默认使用json-file。只有使用json-file格式的时候，docker logs -f 才可以显示实时日志。&lt;/p&gt;
&lt;p&gt;查看docker默认的日志插件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker info | grep &#39;Logging Driver&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当容器运行时，docker会在宿主机上创建一个该容器相关的文件，然后将容器产生的日志转存到该文件下。docker logs -f 命令就会找到该文件内容并显示在终端上&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="logs" scheme="https://garywu520.github.io/blog/tags/logs/"/>
    
      <category term="日志收集" scheme="https://garywu520.github.io/blog/tags/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>centos7 yum docker</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/centos7-yum-docker/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/centos7-yum-docker/</id>
    <published>2019-12-03T05:36:48.000Z</published>
    <updated>2019-12-03T05:41:48.304Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Install docker-ce</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>Install docker-compose</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y python-pip</span><br><span class="line">pip install docker-compose</span><br><span class="line"></span><br><span class="line">yum upgrade python*</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><p>参考：<a href="https://github.com/NaturalHistoryMuseum/scratchpads2/wiki/Install-Docker-and-Docker-Compose-(Centos-7)" target="_blank" rel="noopener">Install Docker &amp; Docker Compose - Centos 7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Install docker-ce&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y yum-utils device-mapper-persistent-data lvm2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y docker-ce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable docker.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start docker.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl status docker.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="docker-compose" scheme="https://garywu520.github.io/blog/tags/docker-compose/"/>
    
      <category term="centos7" scheme="https://garywu520.github.io/blog/tags/centos7/"/>
    
      <category term="yum" scheme="https://garywu520.github.io/blog/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>Docker与iptables防火墙</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/Docker%E4%B8%8Eiptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/Docker与iptables防火墙/</id>
    <published>2019-12-03T03:21:55.000Z</published>
    <updated>2020-01-16T09:31:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>假设已有服务器已经配置了iptables，这个时候安装并运行docker容器后，docker会自动向iptables添加 FORWARD规则来实现与宿主机的网络通信。</p><p>一旦不小心，直接在iptables中新开放了端口操作，重载iptables规则后，docker添加的规则会被覆盖，这就导致了docker服务的网络异常。怎么解决？</p><a id="more"></a><h5 id="开启内核转发"><a href="#开启内核转发" class="headerlink" title="开启内核转发"></a>开启内核转发</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sysctl net.ipv4.ip_forward</span></span><br><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><h5 id="1-首先要在防火墙配置文件里面添加docker-FORWARD规则"><a href="#1-首先要在防火墙配置文件里面添加docker-FORWARD规则" class="headerlink" title="1. 首先要在防火墙配置文件里面添加docker FORWARD规则"></a>1. 首先要在防火墙配置文件里面添加docker FORWARD规则</h5><p>iptables需要允许docker转发及容器间通信</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Docker</span></span><br><span class="line">iptables -A FORWARD -i docker0 -o eth0 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth0 -o docker0 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i docker0 -o docker0 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">允许bridge网络容器访问外网</span></span><br><span class="line">iptables -t nat -A POSTROUTING -s 172.17.0.0/16 -o eth0 -j MASQUERADE</span><br></pre></td></tr></table></figure><p>注：如果有多个自定义网络，容器访问外网同样需要配置masquerade</p><h5 id="2-修改docker服务启动配置"><a href="#2-修改docker服务启动配置" class="headerlink" title="2. 修改docker服务启动配置"></a>2. 修改docker服务启动配置</h5><p>其次, ，在docker启动配置中，把docker自定义iptables规则移除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过此命令获取docker systemd的启动配置文件，接下来要修改</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status docker</span></span><br><span class="line">/usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>vim  /usr/lib/systemd/system/docker.service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">找到如下行并添加参数：--iptables=<span class="literal">false</span>,意思是启动docker的时候不自动向iptables添加规则</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --iptables=false --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><h5 id="3-重启服务"><a href="#3-重启服务" class="headerlink" title="3. 重启服务"></a>3. 重启服务</h5><ul><li><p>重载iptables规则</p></li><li><p>首先stop掉已有容器</p></li><li><p>重启docker</p><p>systemctl daemon-reload  &amp;&amp; systemctl  restart  docker</p></li><li><p>启动docker容器</p></li></ul><p>这个时候，在iptables中再开启端口的时候，就不怕docker容器服务的网络会出现问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设已有服务器已经配置了iptables，这个时候安装并运行docker容器后，docker会自动向iptables添加 FORWARD规则来实现与宿主机的网络通信。&lt;/p&gt;
&lt;p&gt;一旦不小心，直接在iptables中新开放了端口操作，重载iptables规则后，docker添加的规则会被覆盖，这就导致了docker服务的网络异常。怎么解决？&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="iptables" scheme="https://garywu520.github.io/blog/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Postwoman API接口测试</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/Postwoman-API%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/Postwoman-API接口测试/</id>
    <published>2019-12-03T02:12:34.000Z</published>
    <updated>2019-12-03T02:22:45.731Z</updated>
    
    <content type="html"><![CDATA[<p>对于经常进行接口调试的同学来说，应该是比较熟悉 <code>Postman</code> 了。<code>Postman</code> 虽然功能强大，但也有很多弊端。比如：不支持 <code>Web</code> 方式，需要安装客户端软件等。如果你只想简单地测试下接口返回，就需要安装一个客户端工具就显得比较麻烦了。</p><p>为了解决这个痛点，今天就给大家推荐一个轻量级、功能强大且颜值超高的神器 <code>Postwoman</code>。<code>Postwoman</code> 是一个 <code>HTTP API</code> 测试工具，支持 <code>REST</code>、<code>SOAP</code> 和 <code>GraphQL</code> 请求，并且可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等功能。简单来说，<code>Postwoman</code> 是一个好用且功能非常强大的 <code>API</code> 调试工具。</p><a id="more"></a><h5 id="一、什么是postwoman？"><a href="#一、什么是postwoman？" class="headerlink" title="一、什么是postwoman？"></a>一、什么是postwoman？</h5><p><img src="https://github.com/liyasthomas/postwoman/raw/master/static/logo.png" alt="postwoman"></p><p><code>Postwoman</code> 是一个基于 <code>Vue</code> 开发的的 <code>Web</code> 项目，功能类似 <code>Poatman</code> 的免费且美观的开源替代方案，它可以帮助开发人员更快地创建请求，提升工作效率。目前，该项目在 <code>Github</code> 上的 <code>Star</code> 数已经超过 11k 了！</p><blockquote><p>项目地址：<a href="https://github.com/liyasthomas/postwoman" target="_blank" rel="noopener">https://github.com/liyasthomas/postwoman</a></p></blockquote><p><img src="https://github.com/liyasthomas/postwoman/raw/master/static/images/screenshot1.png" alt="Screenshot1"></p><h5 id="二、Postwoman功能介绍"><a href="#二、Postwoman功能介绍" class="headerlink" title="二、Postwoman功能介绍"></a>二、Postwoman功能介绍</h5><ol><li>Postwoman 相关特性</li></ol><ul><li>采用简约的 UI 设计，简单的设计是最好的设计</li><li>响应速度更快，软件使用更轻量、更简洁</li><li>实时发送请求并获取/复制响应</li></ul><p>Postwoman 支持的方法</p><ul><li>GET</li><li>HEAD</li><li>POST</li><li>PUT</li><li>DELETE</li><li>OPTIONS</li><li>PATCH</li></ul><p>Postwoman 支持界面定制</p><ul><li>支持主题选择：Kinda Dark（默认）、Clearly White、Just Black 和 System 主题</li><li>支持自定义强调颜色：绿色（默认）、黄色、粉红色、红色、紫色、橙色、青色和蓝色</li></ul><p>其它支持的特性</p><ul><li>支持以 <code>PWA</code> 方式进行安装</li><li>支持离线使用</li><li>内存和 <code>CPU</code> 使用率非常低</li><li>支持多平台、多设备</li><li>支持 <code>WebSocket</code></li><li>支持 <code>GraphQL</code></li><li>支持多种 <code>HTTP</code> 认证方式</li><li>……</li></ul><h5 id="三、如何使用Postwoman"><a href="#三、如何使用Postwoman" class="headerlink" title="三、如何使用Postwoman"></a>三、如何使用Postwoman</h5><p><code>Postwoman</code> 既然是一个 <code>Web</code> 项目，使用起来也就非常简单，你只需直接访问其官网地址即可直接使用。</p><blockquote><p>官网地址：<a href="https://postwoman.io/" target="_blank" rel="noopener">https://postwoman.io/</a></p></blockquote><p>如果你想在本地自行搭建也是可以的，Docker部署方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取 Postwoman 相关镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull liyasthomas/postwoman</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行一个 Postwoman 的容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3000:3000 liyasthomas/postwoman:latest</span></span><br></pre></td></tr></table></figure><p>搭建成功后，你只需打开浏览器访问对应主机 <code>IP</code> 的 <code>3000</code> 端口即可访问本地的 Postwoman 环境。</p><p>如果你觉得 <code>Postman</code> 不够好用或者确实是想要使用一个界面更加好看的接口调试工具，那么 <code>Postwoman</code> 将是你最佳的选择！</p><p>参考：<a href="https://mp.weixin.qq.com/s/dkLgcE3u88v8N4Prdt6vCQ" target="_blank" rel="noopener">微信公众号：运维之美</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于经常进行接口调试的同学来说，应该是比较熟悉 &lt;code&gt;Postman&lt;/code&gt; 了。&lt;code&gt;Postman&lt;/code&gt; 虽然功能强大，但也有很多弊端。比如：不支持 &lt;code&gt;Web&lt;/code&gt; 方式，需要安装客户端软件等。如果你只想简单地测试下接口返回，就需要安装一个客户端工具就显得比较麻烦了。&lt;/p&gt;
&lt;p&gt;为了解决这个痛点，今天就给大家推荐一个轻量级、功能强大且颜值超高的神器 &lt;code&gt;Postwoman&lt;/code&gt;。&lt;code&gt;Postwoman&lt;/code&gt; 是一个 &lt;code&gt;HTTP API&lt;/code&gt; 测试工具，支持 &lt;code&gt;REST&lt;/code&gt;、&lt;code&gt;SOAP&lt;/code&gt; 和 &lt;code&gt;GraphQL&lt;/code&gt; 请求，并且可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等功能。简单来说，&lt;code&gt;Postwoman&lt;/code&gt; 是一个好用且功能非常强大的 &lt;code&gt;API&lt;/code&gt; 调试工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="postman" scheme="https://garywu520.github.io/blog/tags/postman/"/>
    
      <category term="postwoman" scheme="https://garywu520.github.io/blog/tags/postwoman/"/>
    
      <category term="API" scheme="https://garywu520.github.io/blog/tags/API/"/>
    
      <category term="接口测试" scheme="https://garywu520.github.io/blog/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockerfile制作trojan镜像</title>
    <link href="https://garywu520.github.io/blog/2019/12/02/%E4%BD%BF%E7%94%A8Dockerfile%E5%88%B6%E4%BD%9Ctrojan%E9%95%9C%E5%83%8F/"/>
    <id>https://garywu520.github.io/blog/2019/12/02/使用Dockerfile制作trojan镜像/</id>
    <published>2019-12-02T11:00:33.000Z</published>
    <updated>2019-12-02T11:26:23.511Z</updated>
    
    <content type="html"><![CDATA[<p>此Dockerfile文件具有参考意义，为制作其他服务镜像打好基础。比如容器内的服务如何在启动容器后，自动运行。</p><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul><li>安装好docker</li><li>docker pull 好centos基础镜像</li></ul><a id="more"></a><h5 id="1-创建Dockerfile空白文件"><a href="#1-创建Dockerfile空白文件" class="headerlink" title="1. 创建Dockerfile空白文件"></a>1. 创建Dockerfile空白文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/docker_trojan</span><br><span class="line">cd /opt/docker_trojan</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p>cat Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span> centos:centos7.<span class="number">7.1908</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /etc/trojan</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./trojan/ /etc/trojan</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /etc/trojan/trojan</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">1080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash">  [<span class="string">"/etc/trojan/trojan"</span>,<span class="string">"-c"</span>,<span class="string">"/etc/trojan/client.json"</span>]</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>把需要拷贝到容器的源目录，与Dockerfile放在同级目录</p></li><li><p>使用ADD指令拷贝目录的时候，需要保证目标目录已存在</p></li><li><p>ENTRYPOINT 指令,当容器启动时，自动启动容器内服务</p></li></ul><h5 id="2-制作镜像"><a href="#2-制作镜像" class="headerlink" title="2. 制作镜像"></a>2. 制作镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t trojan:v2 .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">内容输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker build -t trojan:v2 .</span></span><br><span class="line">Sending build context to Docker daemon  4.023MB</span><br><span class="line">Step 1/5 : From centos:centos7.7.1908</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 08d05d1d5859</span></span><br><span class="line">Step 2/5 : RUN mkdir /etc/trojan</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 0d72b0e1963c</span></span><br><span class="line">Removing intermediate container 0d72b0e1963c</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> ecc12edb1e6f</span></span><br><span class="line">Step 3/5 : ADD ./trojan/ /etc/trojan</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 64b8fc8bcacd</span></span><br><span class="line">Step 4/5 : RUN chmod +x /etc/trojan/trojan</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9bd8d38d634d</span></span><br><span class="line">Removing intermediate container 9bd8d38d634d</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e236ceda286d</span></span><br><span class="line">Step 5/5 : CMD /etc/trojan/trojan -c /etc/trojan/client.json</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 17b302a27bc1</span></span><br><span class="line">Removing intermediate container 17b302a27bc1</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f476f8cd236b</span></span><br><span class="line">Successfully built f476f8cd236b</span><br><span class="line">Successfully tagged trojan:v2</span><br></pre></td></tr></table></figure><h5 id="3-查看新镜像"><a href="#3-查看新镜像" class="headerlink" title="3. 查看新镜像"></a>3. 查看新镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test docker_trojan]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">trojan              v2                  316c01516fdb        3 minutes ago       212MB</span><br><span class="line">centos              centos7.7.1908      08d05d1d5859        2 weeks ago         204MB</span><br></pre></td></tr></table></figure><h5 id="4-使用新镜像启动docker"><a href="#4-使用新镜像启动docker" class="headerlink" title="4. 使用新镜像启动docker"></a>4. 使用新镜像启动docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /etc/trojan:/etc/trojan -p 1080:1080 --name trojan -d trojan:v2</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it trojan /bin/bash</span><br><span class="line"></span><br><span class="line">[root@4f0251ab9801 /]# ps -ef|grep trojan</span><br><span class="line">root 1  0  0 10:57 ?   00:00:00 /etc/trojan/trojan -c /etc/trojan/client.json</span><br></pre></td></tr></table></figure><p>Dockerfile语法参考： <a href="https://garywu520.github.io/blog/2019/12/02/%E4%BD%BF%E7%94%A8Dockerfile%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F/#more">使用Dockerfile制作镜像</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此Dockerfile文件具有参考意义，为制作其他服务镜像打好基础。比如容器内的服务如何在启动容器后，自动运行。&lt;/p&gt;
&lt;h5 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;安装好docker&lt;/li&gt;
&lt;li&gt;docker pull 好centos基础镜像&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="Dockerfile" scheme="https://garywu520.github.io/blog/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockerfile制作镜像</title>
    <link href="https://garywu520.github.io/blog/2019/12/02/%E4%BD%BF%E7%94%A8Dockerfile%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F/"/>
    <id>https://garywu520.github.io/blog/2019/12/02/使用Dockerfile制作镜像/</id>
    <published>2019-12-02T05:50:41.000Z</published>
    <updated>2019-12-02T05:52:58.634Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的 <strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>以定制centos镜像为例，这次使用Dockerfile来定制</p><a id="more"></a><h5 id="一、创建Dockerfile空白文件"><a href="#一、创建Dockerfile空白文件" class="headerlink" title="一、创建Dockerfile空白文件"></a>一、创建Dockerfile空白文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/docker_centos</span><br><span class="line">cd /opt/docker_centos</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><h5 id="二、根据Dockerfile指令，编辑定制内容"><a href="#二、根据Dockerfile指令，编辑定制内容" class="headerlink" title="二、根据Dockerfile指令，编辑定制内容"></a>二、根据Dockerfile指令，编辑定制内容</h5><p>要定制Dockerfile文件，首先要明确其各指令的作用</p><ul><li><p>FROM</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br></pre></td></tr></table></figure><p>FROM用来指定一个基础镜像，如:centos或nginx等等，FROM指令必须是第一条指令。</p><p>除了基础镜像外，Docker还存在一个特殊的镜像，名为scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。对于 Linux 下静态编译的程序【如Go语言】来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。</p></li></ul><ul><li><p>RUN</p><p><code>RUN</code> 指令是用来执行命令行命令的，其有两种格式：</p><ul><li><p>shell格式: RUN &lt;命令&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN cd /root</span><br><span class="line">RUN echo "Dockerfile Test"</span><br><span class="line">RUN ls -lh</span><br></pre></td></tr></table></figure></li></ul></li><li><p>COPY  复制文件</p><p>COPY指令用于复制文件；</p><p>格式：COPY  –chown=<user>:<group>  &lt;源路径&gt;   &lt;镜像内目标路径&gt;</group></user></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY ./test  /home/test/</span><br></pre></td></tr></table></figure></li><li><p>CMD 容器启动命令</p><p>CMD用来指定容器的启动命令，启动命令需要在前台运行，否则当命令启动后容器就退出了。</p><p>格式：CMD  &lt;启动命令&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">CMD ["/bin/bash"]</span><br><span class="line">或</span><br><span class="line">CMD ["sh","run.sh"]</span><br></pre></td></tr></table></figure></li><li><p>ENTRYPOINT</p><p>ENTRYPOINT的格式和RUN指令格式和作用一样，都是在指定容器启动程序和参数</p><p>建议习惯性使用这个指令，而不是CMD，具体区别：<a href="https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html" target="_blank" rel="noopener">参考</a></p></li><li><p>ENV 设置环境变量</p><p>格式：ENV <key> <value></value></key></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line"></span><br><span class="line">RUN curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" \</span><br><span class="line">  &amp;&amp; curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \</span><br><span class="line">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc</span><br></pre></td></tr></table></figure><p>当设置了环境变量之后，其他指令均可以直接在命令中调用此变量</p></li><li><p>EXPOSE 暴露端口</p><p>格式为: EXPOSE &lt;端口1&gt; [&lt;端口2&gt;…]</p><p>EXPOSE 指令是声明运行时容器提供服务端口，这仅仅是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。</p></li><li><p>WORKDIR 指定工作目录</p><p>格式:  WORKDIR &lt;工作目录路径&gt;</p><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p></li><li><p>USER指定当前用户</p><p>格式：USER &lt;用户名&gt;[:&lt;用户组&gt;]</p><p><code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line">USER redis</span><br><span class="line">RUN [ "redis-server" ]</span><br></pre></td></tr></table></figure></li></ul><h5 id="三、构建镜像"><a href="#三、构建镜像" class="headerlink" title="三、构建镜像"></a>三、构建镜像</h5><p>Dockerfile文件根据各自需求定制完成后，现在就可以进行构建这个镜像了。使用  docker build  命令进行镜像的构建，格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">构建镜像格式</span></span><br><span class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如：</span></span><br><span class="line">docker build -t centos:v3 .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意，命令最后有个“.”,表示上下文路径，并非当前目录;这里使用-t来指定最终构建后的镜像名称</span></span><br></pre></td></tr></table></figure><p><a href="https://yeasy.gitbooks.io/docker_practice/image/build.html" target="_blank" rel="noopener">什么是上下文路径？</a></p><p>构建后，镜像就可以直接使用了</p><p>参考：<a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">Docker —— 从入门到实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。&lt;/p&gt;
&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的 &lt;strong&gt;指令(Instruction)&lt;/strong&gt;，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。&lt;/p&gt;
&lt;p&gt;以定制centos镜像为例，这次使用Dockerfile来定制&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://garywu520.github.io/blog/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="https://garywu520.github.io/blog/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>部署企业级Harbor私有docker镜像仓库</title>
    <link href="https://garywu520.github.io/blog/2019/11/28/%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7Harbor%E7%A7%81%E6%9C%89docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>https://garywu520.github.io/blog/2019/11/28/部署企业级Harbor私有docker镜像仓库/</id>
    <published>2019-11-28T08:22:35.000Z</published>
    <updated>2019-11-28T08:25:05.953Z</updated>
    
    <content type="html"><![CDATA[<p>Docker本地镜像可以满足单机使用docker镜像的需求，而在生产环境上，需要将镜像发布到几时/上百台节点上，这时候本地镜像显得心有余而力不足。就需要部署一套开源私有仓库来统一管理镜像！</p><p><img src="https://github.com/goharbor/harbor/raw/master/docs/img/harbor_logo.png" alt="Harbor"></p><p>Habor是由VMWare公司开源的容器镜像仓库，它基于Docker-compose部署</p><p>官方地址： <a href="https://vmware.github.io/" target="_blank" rel="noopener">https://vmware.github.io/</a> </p><p>Github:  <a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener">https://github.com/goharbor/harbor</a> </p><a id="more"></a><h5 id="一、-Harbor主要功能"><a href="#一、-Harbor主要功能" class="headerlink" title="一、 Harbor主要功能"></a>一、 Harbor主要功能</h5><ul><li>基于角色访问控制</li><li>镜像复制</li><li>LDAP</li><li>镜像删除与空间回收</li><li>图形界面管理-原生中文支持</li><li>审计</li><li>REST API</li></ul><h5 id="二、Harbor组件"><a href="#二、Harbor组件" class="headerlink" title="二、Harbor组件"></a>二、Harbor组件</h5><table><thead><tr><th align="center">组件</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">harbor-adminserver</td><td align="center">配置管理中心</td></tr><tr><td align="center">harbor-db</td><td align="center">MySQL数据库</td></tr><tr><td align="center">harbor-jobservice</td><td align="center">负责镜像复制</td></tr><tr><td align="center">harbor-log</td><td align="center">记录操作日志</td></tr><tr><td align="center">harbor-ui</td><td align="center">Web管理页面和API</td></tr><tr><td align="center">nginx</td><td align="center">前端代理,负责页面和镜像上传/下载/转发</td></tr><tr><td align="center">redis</td><td align="center">会话</td></tr><tr><td align="center">registry</td><td align="center">镜像存储</td></tr></tbody></table><p>Harbor 3种安装方式：</p><ul><li>在线安装： 从Docker Hub下载Harbor相关镜像，因此安装软件包非常小 </li><li>离线安装： 安装包包含部署的相关镜像，因此安装包比较大 </li><li>OVA安装程序： 当用户具有VMware vCenter环境时，使用此安装程序，在部署OVA后启动Harbor </li></ul><h5 id="三、Harbor离线部署"><a href="#三、Harbor离线部署" class="headerlink" title="三、Harbor离线部署"></a>三、Harbor离线部署</h5><p> <a href="https://github.com/goharbor/harbor/releases/download/v1.9.3/harbor-offline-installer-v1.9.3.tgz" target="_blank" rel="noopener">harbor-offline-installer-v1.9.3.tgz</a>  下载地址：<a href="https://github.com/vmware/harbor/releases" target="_blank" rel="noopener">https://github.com/vmware/harbor/releases</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v1.9.3.tgz</span><br><span class="line">cd harbor</span><br></pre></td></tr></table></figure><p>HTTPS方式部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hostname:</span> <span class="string">reg.mydomain.com</span>  <span class="comment">#域名或IP，这里是0.0.0.0</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">https:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">   certificate:</span> <span class="string">/etc/ssl/harbor/server.crt</span></span><br><span class="line"><span class="attr">   private_key:</span> <span class="string">/etc/ssl/harbor/server.key</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">Harbor12345</span>   </span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">root123</span></span><br></pre></td></tr></table></figure><p>准备自签SSL证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/ssl/harbor</span><br><span class="line">cd /etc/ssl/harbor</span><br></pre></td></tr></table></figure><p>cat ssl.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">if [ $# != 1 ];then</span><br><span class="line">   echo "USAGE: sh $0 IP"</span><br><span class="line">   exit 1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CNIP=$1</span><br><span class="line"></span><br><span class="line">echo "3秒后,开始生成根证书...."</span><br><span class="line">sleep 3</span><br><span class="line">openssl genrsa -out cakey.pem 4096</span><br><span class="line">openssl req -new -x509 -key cakey.pem -out cacert.pem -subj "/C=HK/ST=Hongkong/L=Hongkong/O=NASA/OU=Dev/CN=$CNIP/emailAddress=hk_dev@nasa.com"</span><br><span class="line"></span><br><span class="line">echo "3秒后,开始生成csr以及证书签署..."</span><br><span class="line">sleep 3</span><br><span class="line">openssl genrsa -out server.key 4096</span><br><span class="line">openssl req -new -key server.key -out server.csr -subj "/C=HK/ST=Hongkong/L=Hongkong/O=NASA/OU=Dev/CN=$CNIP/emailAddress=hk_dev@nasa.com"</span><br><span class="line">openssl x509 -req -in server.csr -CA cacert.pem -CAkey cakey.pem -CAcreateserial -out server.crt -days 3650</span><br><span class="line"></span><br><span class="line">echo "自签证书已完成,详情如下:..."</span><br><span class="line">ls -lh server*</span><br></pre></td></tr></table></figure><p> 生成Harbor的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/harbor</span><br><span class="line">./prepare</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">依赖于docker-compose</span></span><br><span class="line">curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /root/harbor</span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看运行状态</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h5 id="四、Web访问"><a href="#四、Web访问" class="headerlink" title="四、Web访问"></a>四、Web访问</h5><p> <a href="https://IP" target="_blank" rel="noopener">https://IP</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">账号：admin  密码：Harbor12345</span><br></pre></td></tr></table></figure><p>具体使用-请参考:  <a href="https://www.linuxidc.com/Linux/2019-07/159463.htm" target="_blank" rel="noopener">Linux公社</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker本地镜像可以满足单机使用docker镜像的需求，而在生产环境上，需要将镜像发布到几时/上百台节点上，这时候本地镜像显得心有余而力不足。就需要部署一套开源私有仓库来统一管理镜像！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/goharbor/harbor/raw/master/docs/img/harbor_logo.png&quot; alt=&quot;Harbor&quot;&gt;&lt;/p&gt;
&lt;p&gt;Habor是由VMWare公司开源的容器镜像仓库，它基于Docker-compose部署&lt;/p&gt;
&lt;p&gt;官方地址： &lt;a href=&quot;https://vmware.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vmware.github.io/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Github:  &lt;a href=&quot;https://github.com/goharbor/harbor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/goharbor/harbor&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="镜像仓库" scheme="https://garywu520.github.io/blog/tags/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    
      <category term="harbor" scheme="https://garywu520.github.io/blog/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>开源wiki系统-XWiki</title>
    <link href="https://garywu520.github.io/blog/2019/11/20/%E5%BC%80%E6%BA%90wiki%E7%B3%BB%E7%BB%9F-XWiki/"/>
    <id>https://garywu520.github.io/blog/2019/11/20/开源wiki系统-XWiki/</id>
    <published>2019-11-20T07:38:58.000Z</published>
    <updated>2019-11-20T10:42:13.649Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、XWiki介绍"><a href="#一、XWiki介绍" class="headerlink" title="一、XWiki介绍"></a>一、XWiki介绍</h5><p>就是一个开源wiki，不像 Confluence 一样需要购买 License 才能使用</p><h5 id="二、Xwiki官网与下载"><a href="#二、Xwiki官网与下载" class="headerlink" title="二、Xwiki官网与下载"></a>二、Xwiki官网与下载</h5><ul><li>官网： <a href="https://www.xwiki.org/" target="_blank" rel="noopener">https://www.xwiki.org/</a> </li><li>XWiki下载页：<a href="http://download.forge.ow2.org/xwiki/" target="_blank" rel="noopener">xwiki download</a> – 检索关键字[xwiki-enterprise-installer-generic]</li><li>XWwiki安装的版本：xwiki-enterprise-installer-generic-9.4</li></ul><a id="more"></a><h5 id="三、-安装JDK"><a href="#三、-安装JDK" class="headerlink" title="三、 安装JDK"></a>三、 安装JDK</h5><ul><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html" target="_blank" rel="noopener">download jdk 8u202</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载jdk-8u202-linux-x64.rpm</span></span><br><span class="line">rpm -ivh jdk-8u202-linux-x64.rpm</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>cat  /root/.bash_profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">JAVA_Home config</span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_102/</span><br><span class="line">export JRE_HOME=/usr/java/jdk1.8.0_102/jre</span><br><span class="line">PATH=$PATH:$HOME/bin:$JAVA_HOME/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile </span><br><span class="line">echo $JAVA_HOME</span><br><span class="line">echo $JRE_HOME</span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><h5 id="四、安装XWiki"><a href="#四、安装XWiki" class="headerlink" title="四、安装XWiki"></a>四、安装XWiki</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载xwiki-enterprise-installer-generic-9.4-standard.jar</span></span><br><span class="line">java -jar xwiki-enterprise-installer-generic-9.4-standard.jar</span><br><span class="line"></span><br><span class="line">注：此过程会提示几个问题，根据提示输入"1"或"Y"即可。默认安装目录: /usr/local/XWiki Enterprise 9.4</span><br></pre></td></tr></table></figure><p>启动XWiki</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/local/XWiki\ Enterprise\ 9.4/ /usr/local/XWiki_Enterprise_9.4</span><br><span class="line">cd /usr/local/XWiki_Enterprise_9.4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">XWiki 默认运行在 8080 端口，使用-p选项指定运行端口</span></span><br><span class="line">bash start_xwiki.sh -p 8888</span><br></pre></td></tr></table></figure><p><strong>Web访问: <a href="http://xx.xx.xx.xx:8888" target="_blank" rel="noopener">http://xx.xx.xx.xx:8888</a></strong></p><p>XWiki 默认的管理员用户及密码为：<br>用户名：Admin<br>密码：admin</p><h5 id="五、优化"><a href="#五、优化" class="headerlink" title="五、优化"></a>五、优化</h5><h6 id="1-supervisorctl启动管理"><a href="#1-supervisorctl启动管理" class="headerlink" title="1. supervisorctl启动管理"></a>1. supervisorctl启动管理</h6><p>cat /etc/supervisord.d/xwiki.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:xwiki]</span><br><span class="line">directory=/usr/local/XWiki_Enterprise_9.4</span><br><span class="line">command=/usr/local/XWiki_Enterprise_9.4/start_xwiki.sh -p 8888</span><br><span class="line">username=root</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><p>注：由于是JAVA程序启动较慢，supervisor启动后耐心等待即可访问</p><h6 id="2-修改中文"><a href="#2-修改中文" class="headerlink" title="2.修改中文"></a>2.修改中文</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">点击Administer Wiki ---&gt;点击Content ---&gt; 点击Localization</span><br><span class="line">(1)第一项选择Yes</span><br><span class="line">(2)第二项选择 中文(中国)</span><br><span class="line">(3)第三项选择 中文(中国)</span><br><span class="line">(4)DATE格式： yyyy/MM/dd,HH:mm</span><br><span class="line">(5)TIMEZONE: Asia/HongKong</span><br></pre></td></tr></table></figure><h6 id="3-禁止用户注册"><a href="#3-禁止用户注册" class="headerlink" title="3. 禁止用户注册"></a>3. 禁止用户注册</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">管理WIKI ---&gt; Users &amp; Rights ---&gt; 权限：</span><br><span class="line">    -- Groups权限调整[禁止注册]</span><br><span class="line">    -- Users权限调整[禁止注册]</span><br><span class="line"></span><br><span class="line">注：Groups和Users均勾选如下选项</span><br><span class="line">yes 不论页面、空间权限如何设置，禁止非注册用户察看页面，</span><br><span class="line">yes 不论页面、空间权限如何设置，禁止非注册用户编辑页面，</span><br><span class="line">yes Require unregistered users to solve a captcha when posting a comment on a page</span><br></pre></td></tr></table></figure><h6 id="4-安装Markdown-1-2编辑器"><a href="#4-安装Markdown-1-2编辑器" class="headerlink" title="4.安装Markdown 1.2编辑器"></a>4.安装Markdown 1.2编辑器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">搜索安装扩展：Markdown, 安装完成后，点击插件右侧的“配置”按钮</span><br><span class="line"></span><br><span class="line">编辑器改为Markdown: </span><br><span class="line">点击Administer Wiki ---&gt;点击Editing ---&gt; 选择默认文档语法为MarkDown</span><br></pre></td></tr></table></figure><h5 id="5-设置发信"><a href="#5-设置发信" class="headerlink" title="5. 设置发信"></a>5. 设置发信</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">管理WIKI ---&gt; Mail ,根据提示设置发信必要参数即可，当用户账户/密码忘记时，可通过邮箱方式找回</span><br></pre></td></tr></table></figure><h5 id="六、插件推荐"><a href="#六、插件推荐" class="headerlink" title="六、插件推荐"></a>六、插件推荐</h5><p>​       优质插件：<a href="https://extensions.xwiki.org/xwiki/bin/view/Main/#|t=extensions&p=1&l=300&s=installedCount&d=desc" target="_blank" rel="noopener">推荐</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、XWiki介绍&quot;&gt;&lt;a href=&quot;#一、XWiki介绍&quot; class=&quot;headerlink&quot; title=&quot;一、XWiki介绍&quot;&gt;&lt;/a&gt;一、XWiki介绍&lt;/h5&gt;&lt;p&gt;就是一个开源wiki，不像 Confluence 一样需要购买 License 才能使用&lt;/p&gt;
&lt;h5 id=&quot;二、Xwiki官网与下载&quot;&gt;&lt;a href=&quot;#二、Xwiki官网与下载&quot; class=&quot;headerlink&quot; title=&quot;二、Xwiki官网与下载&quot;&gt;&lt;/a&gt;二、Xwiki官网与下载&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;官网： &lt;a href=&quot;https://www.xwiki.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.xwiki.org/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;XWiki下载页：&lt;a href=&quot;http://download.forge.ow2.org/xwiki/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xwiki download&lt;/a&gt; – 检索关键字[xwiki-enterprise-installer-generic]&lt;/li&gt;
&lt;li&gt;XWwiki安装的版本：xwiki-enterprise-installer-generic-9.4&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="wiki" scheme="https://garywu520.github.io/blog/tags/wiki/"/>
    
      <category term="XWiki" scheme="https://garywu520.github.io/blog/tags/XWiki/"/>
    
      <category term="开源wiki" scheme="https://garywu520.github.io/blog/tags/%E5%BC%80%E6%BA%90wiki/"/>
    
  </entry>
  
</feed>
