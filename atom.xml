<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gary Wu</title>
  
  <subtitle>运维架构师 - 从入门到放弃</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://garywu520.github.io/blog/"/>
  <updated>2019-08-27T02:18:07.991Z</updated>
  <id>https://garywu520.github.io/blog/</id>
  
  <author>
    <name>Gary Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>zabbix4.0 Web监控之API</title>
    <link href="https://garywu520.github.io/blog/2019/08/27/zabbix4-0-Web%E7%9B%91%E6%8E%A7%E4%B9%8BAPI/"/>
    <id>https://garywu520.github.io/blog/2019/08/27/zabbix4-0-Web监控之API/</id>
    <published>2019-08-27T02:06:18.000Z</published>
    <updated>2019-08-27T02:18:07.991Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-API接口示例"><a href="#1-API接口示例" class="headerlink" title="1.API接口示例"></a>1.API接口示例</h5><p>zabbix 4.0监控带参数的API接口，API接口示例如下：</p><p><a href="https://xxx.xxx.com/services/auth/doclist?id=0&amp;search=0&amp;lange=2" target="_blank" rel="noopener">https://xxx.xxx.com/services/auth/doclist?id=0&amp;search=0&amp;lange=2</a></p><a id="more"></a><h5 id="2-zabbix4-0-Web监控核心配置"><a href="#2-zabbix4-0-Web监控核心配置" class="headerlink" title="2. zabbix4.0 Web监控核心配置"></a>2. zabbix4.0 Web监控核心配置</h5><ul><li><p>名称：xxx-API</p></li><li><p>URL: <a href="https://xxx.xxx.com/services/auth/doclist" target="_blank" rel="noopener">https://xxx.xxx.com/services/auth/doclist</a></p></li><li><p>查询字段：空</p></li><li><p>变量：</p><table><thead><tr><th align="center">名称</th><th align="center">值</th></tr></thead><tbody><tr><td align="center">{id}</td><td align="center">0</td></tr><tr><td align="center">{search}</td><td align="center">0</td></tr><tr><td align="center">{lange}</td><td align="center">2</td></tr></tbody></table><p>即，把参数的name通过{}配置为变量方式</p></li><li><p>跟随跳转：勾选</p></li><li><p>仅获取头信息：勾选</p></li><li><p>超时：15s</p></li><li><p>要求的状态码：200</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-API接口示例&quot;&gt;&lt;a href=&quot;#1-API接口示例&quot; class=&quot;headerlink&quot; title=&quot;1.API接口示例&quot;&gt;&lt;/a&gt;1.API接口示例&lt;/h5&gt;&lt;p&gt;zabbix 4.0监控带参数的API接口，API接口示例如下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://xxx.xxx.com/services/auth/doclist?id=0&amp;amp;search=0&amp;amp;lange=2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://xxx.xxx.com/services/auth/doclist?id=0&amp;amp;search=0&amp;amp;lange=2&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="zabbix" scheme="https://garywu520.github.io/blog/tags/zabbix/"/>
    
      <category term="Web监控" scheme="https://garywu520.github.io/blog/tags/Web%E7%9B%91%E6%8E%A7/"/>
    
      <category term="API接口" scheme="https://garywu520.github.io/blog/tags/API%E6%8E%A5%E5%8F%A3/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 301重定向到HTTPS的问题</title>
    <link href="https://garywu520.github.io/blog/2019/08/23/Nginx-301%E9%87%8D%E5%AE%9A%E5%90%91%E5%88%B0HTTPS%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://garywu520.github.io/blog/2019/08/23/Nginx-301重定向到HTTPS的问题/</id>
    <published>2019-08-23T08:14:30.000Z</published>
    <updated>2019-08-23T08:38:22.294Z</updated>
    
    <content type="html"><![CDATA[<p>Nginx强制配置301永久跳转后，APP发起POST请求会出现405错误，这是因为301跳转的操作让浏览器把POST请求变成了GET请求。</p><h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><ul><li>301跳转示例：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">return</span> <span class="number">301</span> https://www.xxx.com<span class="variable">$request_uri</span>;</span><br></pre></td></tr></table></figure><ul><li>解决办法：</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">return</span> <span class="number">307</span> https://www.xxx.com<span class="variable">$request_uri</span>;</span><br><span class="line">或</span><br><span class="line"><span class="attribute">return</span> <span class="number">308</span> https://www.xxx.com<span class="variable">$request_uri</span>;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h5><ul><li><p>301 Moved Permanently</p><p>被请求的资源已永久移动到新位置，并且将来任何对此资源的引用都应该使用本响应返回的若干个 URI 之一</p></li><li><p>307  Temporary Redirect</p><p>请求的资源现在临时从不同的URI 响应请求。由于这样的重定向是临时的，客户端应当继续向原有地址发送以后的请求</p></li><li><p>308 永久重定向</p><p>308状态代码[永久重定向],类似于301(永久移动)，但不允许将请求方法从POST更改为GET.</p></li></ul><h5 id="301和308的区别"><a href="#301和308的区别" class="headerlink" title="301和308的区别"></a>301和308的区别</h5><p>在 HTTP 协议中， 308 Permanent Redirect（永久重定向）是表示重定向的响应状态码，说明请求的资源已经被永久的移动到了由 Location 首部指定的 URL 上。在重定向过程中，请求方法和消息主体不会发生改变!</p><p>然而在 301 状态码的情况下，请求方法有时候会被客户端错误地修改为 GET 方法</p><p>参考：<a href="https://blog.imdst.com/nginxqiang-zhi-tiao-zhuan-https-jie-kou-de-postqing-qiu-bian-cheng-get/" target="_blank" rel="noopener">Linux运维笔记</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Nginx强制配置301永久跳转后，APP发起POST请求会出现405错误，这是因为301跳转的操作让浏览器把POST请求变成了GET请求。&lt;/p&gt;
&lt;h5 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;301跳转示例：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;301&lt;/span&gt; https://www.xxx.com&lt;span class=&quot;variable&quot;&gt;$request_uri&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;解决办法：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;307&lt;/span&gt; https://www.xxx.com&lt;span class=&quot;variable&quot;&gt;$request_uri&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;或&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;308&lt;/span&gt; https://www.xxx.com&lt;span class=&quot;variable&quot;&gt;$request_uri&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="301" scheme="https://garywu520.github.io/blog/tags/301/"/>
    
      <category term="Nginx" scheme="https://garywu520.github.io/blog/tags/Nginx/"/>
    
      <category term="GET" scheme="https://garywu520.github.io/blog/tags/GET/"/>
    
      <category term="POST" scheme="https://garywu520.github.io/blog/tags/POST/"/>
    
      <category term="307" scheme="https://garywu520.github.io/blog/tags/307/"/>
    
      <category term="HTTPS" scheme="https://garywu520.github.io/blog/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat 内存优化配置</title>
    <link href="https://garywu520.github.io/blog/2019/08/22/Tomcat-%E5%86%85%E5%AD%98%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>https://garywu520.github.io/blog/2019/08/22/Tomcat-内存优化配置/</id>
    <published>2019-08-22T05:35:22.000Z</published>
    <updated>2019-08-22T05:38:51.159Z</updated>
    
    <content type="html"><![CDATA[<p>以Tomcat 8.x为例，来说明内存优化配置</p><h5 id="一、修改配置如下"><a href="#一、修改配置如下" class="headerlink" title="一、修改配置如下"></a>一、修改配置如下</h5><p>修改 {tomcat_dir}/bin/catalina.sh ，搜索“Execute” 行，在下面加入如下行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ----- Execute The Requested Command -----------------------------------------</span></span><br><span class="line">JAVA_OPTS="$JAVA_OPTS -server -Xms256m -Xmx512m"</span><br></pre></td></tr></table></figure><p>参数：</p><p>-Xms256m：初始化堆内存大小（注意，不加M的话单位是KB）<br>-Xmx512m：最大堆内存大小<br> -XX:PermSize=128M：初始化类加载内存池大小 </p><p>注：以下两个参数在Tomcat8中，启动会报错</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-XX:MaxPermSize=256M：最大类加载内存池大小 </span><br><span class="line">-XX:MaxNewSize=256M：设置JAVA堆区域新生代内存的最大可分配大小</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="二、确认进程已经杀死"><a href="#二、确认进程已经杀死" class="headerlink" title="二、确认进程已经杀死"></a>二、确认进程已经杀死</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bin/shutdown.sh</span><br><span class="line">通过ps命令查看此tomcat进程是否依然存在，如果存在则使用kill命令</span><br></pre></td></tr></table></figure><h5 id="三、启动Tomcat服务"><a href="#三、启动Tomcat服务" class="headerlink" title="三、启动Tomcat服务"></a>三、启动Tomcat服务</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bin/startup.sh</span><br><span class="line">netstat -lntup|grep 8081</span><br><span class="line">tail -f log/catalina.out</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以Tomcat 8.x为例，来说明内存优化配置&lt;/p&gt;
&lt;h5 id=&quot;一、修改配置如下&quot;&gt;&lt;a href=&quot;#一、修改配置如下&quot; class=&quot;headerlink&quot; title=&quot;一、修改配置如下&quot;&gt;&lt;/a&gt;一、修改配置如下&lt;/h5&gt;&lt;p&gt;修改 {tomcat_dir}/bin/catalina.sh ，搜索“Execute” 行，在下面加入如下行：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; ----- Execute The Requested Command -----------------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;JAVA_OPTS=&quot;$JAVA_OPTS -server -Xms256m -Xmx512m&quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;-Xms256m：初始化堆内存大小（注意，不加M的话单位是KB）&lt;br&gt;-Xmx512m：最大堆内存大小&lt;br&gt; -XX:PermSize=128M：初始化类加载内存池大小 &lt;/p&gt;
&lt;p&gt;注：以下两个参数在Tomcat8中，启动会报错&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-XX:MaxPermSize=256M：最大类加载内存池大小 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-XX:MaxNewSize=256M：设置JAVA堆区域新生代内存的最大可分配大小&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="tomcat" scheme="https://garywu520.github.io/blog/tags/tomcat/"/>
    
      <category term="jvm" scheme="https://garywu520.github.io/blog/tags/jvm/"/>
    
      <category term="jps" scheme="https://garywu520.github.io/blog/tags/jps/"/>
    
      <category term="内存" scheme="https://garywu520.github.io/blog/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>nginx快速部署文件下载服务</title>
    <link href="https://garywu520.github.io/blog/2019/08/21/nginx%E5%BF%AB%E9%80%9F%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E6%9C%8D%E5%8A%A1/"/>
    <id>https://garywu520.github.io/blog/2019/08/21/nginx快速部署文件下载服务/</id>
    <published>2019-08-21T10:14:08.000Z</published>
    <updated>2019-08-21T10:47:10.184Z</updated>
    
    <content type="html"><![CDATA[<h5 id="让nginx直接下载文件的方法"><a href="#让nginx直接下载文件的方法" class="headerlink" title="让nginx直接下载文件的方法"></a>让nginx直接下载文件的方法</h5><p>在nginx.conf下增加配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        access_log logs/access.download.com.log main;</span><br><span class="line">        error_log logs/error.download.com.log;</span><br><span class="line">        server_name download.com;</span><br><span class="line"></span><br><span class="line">        root /data/android;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">新增配置区域</span></span><br><span class="line">        location /app &#123;</span><br><span class="line">                default_type application/octet-stream;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将下载的文件放在/data/android/app目录下,  reload Nginx，之后就可以通过download.com访问了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;让nginx直接下载文件的方法&quot;&gt;&lt;a href=&quot;#让nginx直接下载文件的方法&quot; class=&quot;headerlink&quot; title=&quot;让nginx直接下载文件的方法&quot;&gt;&lt;/a&gt;让nginx直接下载文件的方法&lt;/h5&gt;&lt;p&gt;在nginx.conf下增加配置&lt;/
      
    
    </summary>
    
    
      <category term="nginx" scheme="https://garywu520.github.io/blog/tags/nginx/"/>
    
      <category term="nginx下载" scheme="https://garywu520.github.io/blog/tags/nginx%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本监控TraceRoute</title>
    <link href="https://garywu520.github.io/blog/2019/08/15/shell%E8%84%9A%E6%9C%AC%E7%9B%91%E6%8E%A7TraceRoute/"/>
    <id>https://garywu520.github.io/blog/2019/08/15/shell脚本监控TraceRoute/</id>
    <published>2019-08-15T06:28:32.000Z</published>
    <updated>2019-08-15T06:53:21.463Z</updated>
    
    <content type="html"><![CDATA[<h5 id="shell脚本逻辑："><a href="#shell脚本逻辑：" class="headerlink" title="shell脚本逻辑："></a>shell脚本逻辑：</h5><ul><li>不能以 trace命令返回值作为成功或失败的依据，不可达的地址返回值也是0</li><li>取文本的最后一跳信息，当最后一跳包含$IP，则视为Trace正常。若$IP的检索结果等于0，则视为Trace失败。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">!/bin/env bash</span><br><span class="line">IP=xx.xx.xx.xx</span><br><span class="line">FILE=/tmp/besttrace.txt</span><br><span class="line">EMAIL=xxx@xx.com</span><br><span class="line"></span><br><span class="line">/sbin/besttrace -q 1 $IP &gt;$FILE</span><br><span class="line">NUM=`grep "$IP" $FILE|awk NR==2|wc -l`</span><br><span class="line">if [ $NUM -lt 1 ];then</span><br><span class="line">   INFO=`cat $FILE`</span><br><span class="line"><span class="meta">   #</span><span class="bash">发送告警邮件 </span></span><br><span class="line">   echo -e "邮件发自$HOSTNAME\n详情如下:\n\n$INFO"|mail -s "TraceRoute告警" $EMAIL</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;shell脚本逻辑：&quot;&gt;&lt;a href=&quot;#shell脚本逻辑：&quot; class=&quot;headerlink&quot; title=&quot;shell脚本逻辑：&quot;&gt;&lt;/a&gt;shell脚本逻辑：&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;不能以 trace命令返回值作为成功或失败的依据，不可达的地址返
      
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="shell" scheme="https://garywu520.github.io/blog/tags/shell/"/>
    
      <category term="MTR" scheme="https://garywu520.github.io/blog/tags/MTR/"/>
    
      <category term="traceroute" scheme="https://garywu520.github.io/blog/tags/traceroute/"/>
    
      <category term="besttrace" scheme="https://garywu520.github.io/blog/tags/besttrace/"/>
    
  </entry>
  
  <entry>
    <title>zabbix报警邮件内容带附件-解决方法</title>
    <link href="https://garywu520.github.io/blog/2019/08/15/zabbix%E6%8A%A5%E8%AD%A6%E9%82%AE%E4%BB%B6%E5%86%85%E5%AE%B9%E5%B8%A6%E9%99%84%E4%BB%B6-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>https://garywu520.github.io/blog/2019/08/15/zabbix报警邮件内容带附件-解决方法/</id>
    <published>2019-08-15T02:32:47.000Z</published>
    <updated>2019-08-15T02:44:46.898Z</updated>
    
    <content type="html"><![CDATA[<p>zabbix设置邮件脚本报警的后，测试发现，邮件正文内容变成了tcmime.1278.1278.1724.bin 或 ATT00001.bin</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><h5 id="1-安装dos2unix"><a href="#1-安装dos2unix" class="headerlink" title="1. 安装dos2unix"></a>1. 安装dos2unix</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wget http://mirror.centos.org/centos/7/os/x86_64/Packages/dos2unix-6.0.3-7.el7.x86_64.rpm</span><br><span class="line">rpm -Uvh dos2unix-6.0.3-7.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-修改sendmail-sh"><a href="#2-修改sendmail-sh" class="headerlink" title="2. 修改sendmail.sh"></a>2. 修改sendmail.sh</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/lib/zabbix/alertscripts/</span><br></pre></td></tr></table></figure><p>vim sendmail.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">export.UTF-8      //解决发送的中文变成了乱码的问题</span></span><br><span class="line">FILE=/tmp/mailtmp.txt </span><br><span class="line">echo "$3" &gt;$FILE</span><br><span class="line">/bin/dos2unix -k $FILE   //解决了发送的邮件内容变成附件的问题。</span><br><span class="line">/bin/mail -s "$2" $1 &lt; $FILE</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch /tmp/mailtmp.txt</span><br><span class="line">chown zabbix.zabbix /tmp/mailtmp.txt</span><br><span class="line">ls -lh /tmp/mailtmp.txt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zabbix设置邮件脚本报警的后，测试发现，邮件正文内容变成了tcmime.1278.1278.1724.bin 或 ATT00001.bin&lt;/p&gt;
&lt;h4 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h4&gt;&lt;h5 id=&quot;1-安装dos2unix&quot;&gt;&lt;a href=&quot;#1-安装dos2unix&quot; class=&quot;headerlink&quot; title=&quot;1. 安装dos2unix&quot;&gt;&lt;/a&gt;1. 安装dos2unix&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wget http://mirror.centos.org/centos/7/os/x86_64/Packages/dos2unix-6.0.3-7.el7.x86_64.rpm&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rpm -Uvh dos2unix-6.0.3-7.el7.x86_64.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="zabbix" scheme="https://garywu520.github.io/blog/tags/zabbix/"/>
    
      <category term="报警" scheme="https://garywu520.github.io/blog/tags/%E6%8A%A5%E8%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>supervisor部署</title>
    <link href="https://garywu520.github.io/blog/2019/08/12/supervisor%E9%83%A8%E7%BD%B2/"/>
    <id>https://garywu520.github.io/blog/2019/08/12/supervisor部署/</id>
    <published>2019-08-12T06:17:53.000Z</published>
    <updated>2019-08-12T07:18:00.461Z</updated>
    
    <content type="html"><![CDATA[<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul><li>CentOS7</li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y epel-release</span><br><span class="line">yum install -y supervisor</span><br><span class="line">systemctl enable supervisord</span><br></pre></td></tr></table></figure><p>cat /etc/supervisord.conf  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="regexp">/etc/</span>supervisord.conf     <span class="comment">#清空默认模板文件，将下面的内容贴到本文件</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>cat  /etc/supervisord.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[unix_http_server]</span><br><span class="line">file=/var/run/supervisor.sock   ; (the path to the socket file)</span><br><span class="line"></span><br><span class="line">[supervisord]</span><br><span class="line">logfile=/var/log/supervisord.log ; (main log file;default $CWD/supervisord.log)</span><br><span class="line">logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)</span><br><span class="line">logfile_backups=10           ; (num of main logfile rotation backups;default 10)</span><br><span class="line">loglevel=info                ; (log level;default info; others: debug,warn,trace)</span><br><span class="line">pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)</span><br><span class="line">nodaemon=false               ; (start in foreground if true;default false)</span><br><span class="line">minfds=1024                  ; (min. avail startup file descriptors;default 1024)</span><br><span class="line">minprocs=200                 ; (min. avail process descriptors;default 200)</span><br><span class="line"></span><br><span class="line">[rpcinterface:supervisor]</span><br><span class="line">supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface</span><br><span class="line"></span><br><span class="line">[supervisorctl]</span><br><span class="line">serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket</span><br><span class="line"></span><br><span class="line">[include]</span><br><span class="line">files = /etc/supervisord.d/*.conf</span><br><span class="line"></span><br><span class="line">; environment=JAVA_HOME="/usr/local/jdk",JRE_HOME="/usr/local/jdk/jre"</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start supervisord</span><br><span class="line">systemctl startus supervisord</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;CentOS7&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y epel-release&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y supervisor&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable supervisord&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;cat /etc/supervisord.conf  &lt;/p&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; &lt;span class=&quot;regexp&quot;&gt;/etc/&lt;/span&gt;supervisord.conf     &lt;span class=&quot;comment&quot;&gt;#清空默认模板文件，将下面的内容贴到本文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="supervisor" scheme="https://garywu520.github.io/blog/tags/supervisor/"/>
    
      <category term="supervisorctl" scheme="https://garywu520.github.io/blog/tags/supervisorctl/"/>
    
      <category term="supervisord" scheme="https://garywu520.github.io/blog/tags/supervisord/"/>
    
  </entry>
  
  <entry>
    <title>把运行的容器打包成Docker镜像</title>
    <link href="https://garywu520.github.io/blog/2019/08/08/%E6%8A%8A%E8%BF%90%E8%A1%8C%E7%9A%84%E5%AE%B9%E5%99%A8%E6%89%93%E5%8C%85%E6%88%90Docker%E9%95%9C%E5%83%8F/"/>
    <id>https://garywu520.github.io/blog/2019/08/08/把运行的容器打包成Docker镜像/</id>
    <published>2019-08-08T08:42:19.000Z</published>
    <updated>2019-08-08T08:53:01.254Z</updated>
    
    <content type="html"><![CDATA[<p>根据基础镜像，运行的容器。有时候需要对内部环境做些调整，调整后想把当前环境打包成新的Image镜像</p><p>方法如下</p><a id="more"></a><h5 id="使用docker-commit命令"><a href="#使用docker-commit命令" class="headerlink" title="使用docker commit命令"></a>使用docker commit命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker commit --<span class="built_in">help</span></span></span><br><span class="line">  -a, --author string    指定一个作者,如：GaryWu</span><br><span class="line">  -c, --change list      将Dockerfile指令应用于创建的映像</span><br><span class="line">  -m, --message string   字符串消息</span><br><span class="line">  -p, --pause            在提交期间暂停容器（默认为true）</span><br></pre></td></tr></table></figure><h5 id="用法-示例"><a href="#用法-示例" class="headerlink" title="用法-示例"></a>用法-示例</h5><ul><li>获取容器ID</li></ul><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先通过docker ps -<span class="keyword">a</span>获取想要打包的容器ID</span><br></pre></td></tr></table></figure><ul><li>打包镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 格式：</span></span><br><span class="line">docker commit -a "&lt;作者&gt;" -m "&lt;字符串消息&gt;"  &lt;容器ID&gt;  &lt;新镜像名&gt;:&lt;版本号&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> docker commit -a <span class="string">"GaryWu"</span> -m <span class="string">"v1"</span> bef669f03c61 centos:v1</span></span><br><span class="line">sha256:8ae09cd2fbde04dcfa313566c05052f75ebbd40f375b3d747169e00a5ea7ca73</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看镜像</span></span><br><span class="line">[root@iZ2zeb1y67msd8vbu7ln6tZ ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos              v1                  8ae09cd2fbde        21 seconds ago      3.59GB</span><br><span class="line">centos              latest              9f38484d220f        4 months ago        202MB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;根据基础镜像，运行的容器。有时候需要对内部环境做些调整，调整后想把当前环境打包成新的Image镜像&lt;/p&gt;
&lt;p&gt;方法如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="images" scheme="https://garywu520.github.io/blog/tags/images/"/>
    
      <category term="镜像打包" scheme="https://garywu520.github.io/blog/tags/%E9%95%9C%E5%83%8F%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>supervisor管理二进制程序</title>
    <link href="https://garywu520.github.io/blog/2019/08/08/supervisor%E7%AE%A1%E7%90%86%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%A8%8B%E5%BA%8F/"/>
    <id>https://garywu520.github.io/blog/2019/08/08/supervisor管理二进制程序/</id>
    <published>2019-08-08T06:57:10.000Z</published>
    <updated>2019-08-08T07:00:56.087Z</updated>
    
    <content type="html"><![CDATA[<p>有时候需要使用supervisor管理二进制程序，区别是需要进入到相关目录才能运行，这时候就需要directory来指定工作目录了。</p><p>cat  /etc/supervisor.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:app1]</span><br><span class="line">directory=/usr/local/auto/app1</span><br><span class="line">command=/usr/local/auto/app1/Server</span><br><span class="line">stdout_logfile=/usr/local/auto/app1/app1.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时候需要使用supervisor管理二进制程序，区别是需要进入到相关目录才能运行，这时候就需要directory来指定工作目录了。&lt;/p&gt;
&lt;p&gt;cat  /etc/supervisor.conf&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="supervisor" scheme="https://garywu520.github.io/blog/tags/supervisor/"/>
    
      <category term="二进制" scheme="https://garywu520.github.io/blog/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>docker导出导入镜像</title>
    <link href="https://garywu520.github.io/blog/2019/08/08/docker%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5%E9%95%9C%E5%83%8F/"/>
    <id>https://garywu520.github.io/blog/2019/08/08/docker导出导入镜像/</id>
    <published>2019-08-08T03:25:02.000Z</published>
    <updated>2019-08-08T03:31:27.087Z</updated>
    
    <content type="html"><![CDATA[<p>当基于基础镜像，配置并优化了相关环境后，重新打包制作的Docker镜像需要导出保存时，就需要导出导入操作了。</p><h5 id="导出镜像"><a href="#导出镜像" class="headerlink" title="导出镜像"></a>导出镜像</h5><p>如果要导出镜像到本地文件，可以使用docker save命令. 假设要导出的新镜像名为centos_v1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br><span class="line">docker save -o centos_v1.tar centos_v1</span><br></pre></td></tr></table></figure><h5 id="载入镜像"><a href="#载入镜像" class="headerlink" title="载入镜像"></a>载入镜像</h5><p>可以使用docker load从导出的本地文件中再导入到本地镜像库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker load --input centos_v1.tar</span><br><span class="line">或</span><br><span class="line">docker load &lt; centos_v1.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当基于基础镜像，配置并优化了相关环境后，重新打包制作的Docker镜像需要导出保存时，就需要导出导入操作了。&lt;/p&gt;
&lt;h5 id=&quot;导出镜像&quot;&gt;&lt;a href=&quot;#导出镜像&quot; class=&quot;headerlink&quot; title=&quot;导出镜像&quot;&gt;&lt;/a&gt;导出镜像&lt;/h5&gt;&lt;p&gt;
      
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="images" scheme="https://garywu520.github.io/blog/tags/images/"/>
    
      <category term="导入导出" scheme="https://garywu520.github.io/blog/tags/%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>docker exec命令</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/docker-exec%E5%91%BD%E4%BB%A4/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/docker-exec命令/</id>
    <published>2019-08-07T12:32:21.000Z</published>
    <updated>2019-08-07T12:42:15.343Z</updated>
    
    <content type="html"><![CDATA[<p>docker exec ：在运行的容器中执行命令</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>OPTIONS说明:</p><ul><li>-d: 分离模式：在后台运行</li><li>-i : 即使没有附加也保持STDIN打开</li><li>-t: 分配一个伪终端</li></ul><a id="more"></a><h5 id="示例1：在运行的容器中以交互模式运行容器内-root-runoob-sh脚本"><a href="#示例1：在运行的容器中以交互模式运行容器内-root-runoob-sh脚本" class="headerlink" title="示例1：在运行的容器中以交互模式运行容器内 /root/runoob.sh脚本"></a>示例1：在运行的容器中以交互模式运行容器内 /root/runoob.sh脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker exec -it mydev /bin/sh /root/runoob.sh</span><br><span class="line">http://www.runoob.com/</span><br></pre></td></tr></table></figure><h5 id="示例2：在运行的容器中开启一个交互模式的终端"><a href="#示例2：在运行的容器中开启一个交互模式的终端" class="headerlink" title="示例2：在运行的容器中开启一个交互模式的终端"></a>示例2：在运行的容器中开启一个交互模式的终端</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">runoob@runoob:~$ docker exec -i -t  mydev /bin/bash</span><br><span class="line">root@b1a0703e41e7:/#</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;docker exec ：在运行的容器中执行命令&lt;/p&gt;
&lt;h5 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h5&gt;&lt;p&gt;OPTIONS说明:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-d: 分离模式：在后台运行&lt;/li&gt;
&lt;li&gt;-i : 即使没有附加也保持STDIN打开&lt;/li&gt;
&lt;li&gt;-t: 分配一个伪终端&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="exec命令" scheme="https://garywu520.github.io/blog/tags/exec%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>使用supervisor管理Tomcat进程</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/%E4%BD%BF%E7%94%A8supervisor%E7%AE%A1%E7%90%86Tomcat%E8%BF%9B%E7%A8%8B/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/使用supervisor管理Tomcat进程/</id>
    <published>2019-08-07T10:10:23.000Z</published>
    <updated>2019-08-07T13:12:32.714Z</updated>
    
    <content type="html"><![CDATA[<p>使用 supervisord 监控管理的进程必须以 nodaemon 启动，而 tomcat 的 startup.sh 脚本是daemon方式的，现在不能用startup.sh形式，所以要用catalina.sh，且在后面加 run。</p><a id="more"></a><h5 id="supervisor-tomcat启动配置文件"><a href="#supervisor-tomcat启动配置文件" class="headerlink" title="supervisor tomcat启动配置文件"></a>supervisor tomcat启动配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:tomcat_8081]</span><br><span class="line">command=/usr/local/tomcat_8081/bin/catalina.sh run</span><br><span class="line">stdout_logfile=/usr/local/tomcat_8081/logs/catalina.out</span><br><span class="line">environment=JAVA_HOME="/usr/local/jdk",JRE_HOME="/usr/local/jdk/jre"</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl reread</span><br><span class="line">supervisorctl add tomcat_8081</span><br><span class="line">supervisorctl restart tomcat_8081</span><br><span class="line">supervisorctl status</span><br><span class="line"></span><br><span class="line">移除配置</span><br><span class="line">(1)删除配置文件</span><br><span class="line">(2)supervisorctl reread   重新读取配置文件</span><br><span class="line">(3)supervisorctl update   更新配置</span><br></pre></td></tr></table></figure><h5 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h5><p>upervisor启动Tomcat等JAVA程序，log报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Neither the JAVA_HOME nor the JRE_HOME environment variable is defined</span><br><span class="line">At least one of these environment variable is needed to run this program</span><br></pre></td></tr></table></figure><p>解决方法：</p><p>方式一：如果是在docker容器内运行的supervisor和tomcat, 请将JAVA环境变量从/etc/profile 剪切到 ~/.bashrc目录，并source  ~/.bashrc</p><p>方式二：在/etc/supervisord.conf文件末尾，添加如下行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">environment=JAVA_HOME="/usr/local/jdk",JRE_HOME="/usr/local/jdk/jre"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注：多个环境变量使用英文逗号隔开</span></span><br></pre></td></tr></table></figure><p>重启supervisor服务后，再使用supervisor重启tomcat即可</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 supervisord 监控管理的进程必须以 nodaemon 启动，而 tomcat 的 startup.sh 脚本是daemon方式的，现在不能用startup.sh形式，所以要用catalina.sh，且在后面加 run。&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="tomcat" scheme="https://garywu520.github.io/blog/tags/tomcat/"/>
    
      <category term="supervisor" scheme="https://garywu520.github.io/blog/tags/supervisor/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器使用systemctl报错</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/Docker%E5%AE%B9%E5%99%A8%E4%BD%BF%E7%94%A8systemctl%E6%8A%A5%E9%94%99/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/Docker容器使用systemctl报错/</id>
    <published>2019-08-07T08:56:42.000Z</published>
    <updated>2019-08-07T09:01:59.169Z</updated>
    
    <content type="html"><![CDATA[<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>docker运行CentOS7容器，使用systemctl命令启动服务报错，错误如下：</p><p>Failed to get D-Bus connection: Operation not permitted</p><a id="more"></a><h5 id="原理解释"><a href="#原理解释" class="headerlink" title="原理解释"></a>原理解释</h5><p>Docker的设计理念是在容器里面不运行后台服务，容器本身就是宿主机上的一个独立的主进程，也可以间接的理解为就是容器里运行服务的应用进程。一个容器的生命周期是围绕这个主进程存在的，所以正确的使用容器方法是将里面的服务运行在前台。</p><p>再说到systemd，这个套件已经成为主流Linux发行版（比如CentOS7、Ubuntu14+）默认的服务管理，取代了传统的SystemV风格服务管理。systemd维护系统服务程序，它需要特权去会访问Linux内核。而容器并不是一个完整的操作系统，只有一个文件系统，而且默认启动只是普通用户这样的权限访问Linux内核，也就是没有特权，所以自然就用不了！</p><p>因此，请遵守容器设计原则，一个容器里运行一个前台服务！</p><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><p>我就想这样运行，难道解决不了吗？</p><p>答：可以，以特权模式运行容器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建容器</span></span><br><span class="line">docker run  --privileged=true -v /tmp/soft:/tmp/soft --name mydev -d centos /usr/sbin/init</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">进入容器</span></span><br><span class="line">docker exec -it mydev /bin/bash</span><br></pre></td></tr></table></figure><p>这样可以使用systemctl启动服务了</p><p>参考：<a href="https://blog.51cto.com/lizhenliang/1975466" target="_blank" rel="noopener">51CTO</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h5&gt;&lt;p&gt;docker运行CentOS7容器，使用systemctl命令启动服务报错，错误如下：&lt;/p&gt;
&lt;p&gt;Failed to get D-Bus connection: Operation not permitted&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://garywu520.github.io/blog/tags/Docker/"/>
    
      <category term="systemctl" scheme="https://garywu520.github.io/blog/tags/systemctl/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat多实例部署</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/Tomcat%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%83%A8%E7%BD%B2/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/Tomcat多实例部署/</id>
    <published>2019-08-07T06:09:32.000Z</published>
    <updated>2019-08-07T07:01:53.745Z</updated>
    
    <content type="html"><![CDATA[<h5 id="首先了解下Tomcat服务启动所需端口号"><a href="#首先了解下Tomcat服务启动所需端口号" class="headerlink" title="首先了解下Tomcat服务启动所需端口号"></a>首先了解下Tomcat服务启动所需端口号</h5><ul><li><strong>Server Port：</strong>该端口用于监听关闭tomcat的shutdown命令，默认端口:8005</li><li><strong>Connector Port:</strong>  该端口用于监听HTTP的请求，默认端口：8080</li><li><strong>AJP Port:</strong> 该端口用于监听AJP(Apache JServ Protocal)协议上的请求，通常用于整合HTTP服务器，默认端口: 8009【用不到可注释】</li><li><strong>Redirect Port:</strong> 重定向端口，出现在Connector配置中。默认端口：8443</li></ul><p>​       作用：当用户用http请求某个资源，而该资源本身又被设置了必须要https方式访问，此时Tomcat会自动重定向到这个redirectPort设置的https端口。</p><a id="more"></a><h5 id="1-Tomcat安装"><a href="#1-Tomcat安装" class="headerlink" title="1. Tomcat安装"></a>1. Tomcat安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf apache-tomcat-8.0.27.tar.gz </span><br><span class="line">cp -a apache-tomcat-8.0.27 tomcat8_1</span><br><span class="line">cp -a apache-tomcat-8.0.27 tomcat8_2</span><br></pre></td></tr></table></figure><h5 id="2-分别修改两个Tomcat实例的端口配置"><a href="#2-分别修改两个Tomcat实例的端口配置" class="headerlink" title="2. 分别修改两个Tomcat实例的端口配置"></a>2. 分别修改两个Tomcat实例的端口配置</h5><p>目的是：避免端口冲突。</p><ul><li>第1个实例端口-配置 – tomcat8_1/conf/server.xml<ul><li>Server Port: 8001 </li><li>Connector Port: 8081</li><li>AJP Port: 8011</li><li>Redirect Port: 8443</li></ul></li><li>第2个实例端口-配置 – tomcat8_2/conf/server.xml<ul><li>Server Port: 8002</li><li>Connector Port: 8082</li><li>AJP Port: 8012</li><li>Redirect Port: 9443</li></ul></li></ul><h5 id="3-分别优化Tomcat"><a href="#3-分别优化Tomcat" class="headerlink" title="3.  分别优化Tomcat"></a>3.  分别优化Tomcat</h5><p>​    略</p><h5 id="4-备份实例，便于日后分发"><a href="#4-备份实例，便于日后分发" class="headerlink" title="4. 备份实例，便于日后分发"></a>4. 备份实例，便于日后分发</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zcf muti_tomcat.tar.gz ./tomcat8_1 ./tomcat8_2</span><br></pre></td></tr></table></figure><h5 id="5-启动多实例"><a href="#5-启动多实例" class="headerlink" title="5. 启动多实例"></a>5. 启动多实例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/application/tomcat8_1/bin/startup.sh </span><br><span class="line">/application/tomcat8_2/bin/startup.sh</span><br></pre></td></tr></table></figure><h5 id="6-验证"><a href="#6-验证" class="headerlink" title="6. 验证"></a>6. 验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看端口和进程</span></span><br><span class="line">[root@zabbix-proxy ~]# netstat -lntup|grep java</span><br><span class="line">tcp6       0      0 127.0.0.1:8081       39534/java          </span><br><span class="line">tcp6       0      0 127.0.0.1:8082       39534/java</span><br><span class="line"></span><br><span class="line">[root@zabbix-proxy ~]# jps -m</span><br></pre></td></tr></table></figure><p>web访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8081</span><br><span class="line">http://ip:8082</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;首先了解下Tomcat服务启动所需端口号&quot;&gt;&lt;a href=&quot;#首先了解下Tomcat服务启动所需端口号&quot; class=&quot;headerlink&quot; title=&quot;首先了解下Tomcat服务启动所需端口号&quot;&gt;&lt;/a&gt;首先了解下Tomcat服务启动所需端口号&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Server Port：&lt;/strong&gt;该端口用于监听关闭tomcat的shutdown命令，默认端口:8005&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Connector Port:&lt;/strong&gt;  该端口用于监听HTTP的请求，默认端口：8080&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AJP Port:&lt;/strong&gt; 该端口用于监听AJP(Apache JServ Protocal)协议上的请求，通常用于整合HTTP服务器，默认端口: 8009【用不到可注释】&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Redirect Port:&lt;/strong&gt; 重定向端口，出现在Connector配置中。默认端口：8443&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​       作用：当用户用http请求某个资源，而该资源本身又被设置了必须要https方式访问，此时Tomcat会自动重定向到这个redirectPort设置的https端口。&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="tomcat" scheme="https://garywu520.github.io/blog/tags/tomcat/"/>
    
      <category term="tomcat8" scheme="https://garywu520.github.io/blog/tags/tomcat8/"/>
    
      <category term="tomcat多实例" scheme="https://garywu520.github.io/blog/tags/tomcat%E5%A4%9A%E5%AE%9E%E4%BE%8B/"/>
    
      <category term="jdk" scheme="https://garywu520.github.io/blog/tags/jdk/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat-将项目打包成war包</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/Tomcat-%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E6%88%90war%E5%8C%85/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/Tomcat-将项目打包成war包/</id>
    <published>2019-08-07T05:50:49.000Z</published>
    <updated>2019-08-07T06:05:47.249Z</updated>
    
    <content type="html"><![CDATA[<p>要求：提前安装jdk</p><h5 id="1-打包"><a href="#1-打包" class="headerlink" title="1. 打包"></a>1. 打包</h5><p>将当前目录下的所有文件打包成project.war</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -cvfM0 project.war ./</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>-c 创建war包</li><li>-v 显示打包过程</li><li>-f  指定JAR文件名</li><li>-M  不产生所有项的清单（MANIFEST〕文件，此参数会忽略 -m 参数</li><li>-0    这个是阿拉伯数字，只打包不压缩的意思</li></ul><h5 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h5><p>解压到当前目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -xvf project.war</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;要求：提前安装jdk&lt;/p&gt;
&lt;h5 id=&quot;1-打包&quot;&gt;&lt;a href=&quot;#1-打包&quot; class=&quot;headerlink&quot; title=&quot;1. 打包&quot;&gt;&lt;/a&gt;1. 打包&lt;/h5&gt;&lt;p&gt;将当前目录下的所有文件打包成project.war&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="tomcat" scheme="https://garywu520.github.io/blog/tags/tomcat/"/>
    
      <category term="jar" scheme="https://garywu520.github.io/blog/tags/jar/"/>
    
      <category term="war" scheme="https://garywu520.github.io/blog/tags/war/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat访问日志格式化输出</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/Tomcat%E8%AE%BF%E9%97%AE%E6%97%A5%E5%BF%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/Tomcat访问日志格式化输出/</id>
    <published>2019-08-07T03:17:41.000Z</published>
    <updated>2019-08-07T03:26:36.255Z</updated>
    
    <content type="html"><![CDATA[<p>Tomcat catalina.log时间格式看着很不爽，不便于日志收集与分析，现对其进行调整下</p><h5 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h5><p>目前的时间格式如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">06-Jul-2019 21:12:27.444 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 857 ms</span><br></pre></td></tr></table></figure><p>需要修改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-07-06 21:12:27.444 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 857 ms</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>修改  ${tomcatHome}/conf/logging.properties</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">找到：</span></span><br><span class="line">1catalina.org.apache.juli.AsyncFileHandler.prefix = catalina.</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在后边加上下面一行</span></span><br><span class="line">1catalina.org.apache.juli.AsyncFileHandler.formatter = java.util.logging.SimpleFormatter</span><br><span class="line">java.util.logging.SimpleFormatter.format = %1$tY-%1$tm-%1$td %1$tH:%1$tM:%1$tS.%1$tL [%4$s] [%3$s] %2$s %5$s %6$s%n</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Tomcat catalina.log时间格式看着很不爽，不便于日志收集与分析，现对其进行调整下&lt;/p&gt;
&lt;h5 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h5&gt;&lt;p&gt;目前的时间格式如下&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;06-Jul-2019 21:12:27.444 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 857 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;需要修改为&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;2019-07-06 21:12:27.444 INFO [main] org.apache.catalina.startup.Catalina.start Server startup in 857 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="tomcat" scheme="https://garywu520.github.io/blog/tags/tomcat/"/>
    
      <category term="tomcat8" scheme="https://garywu520.github.io/blog/tags/tomcat8/"/>
    
      <category term="catalina" scheme="https://garywu520.github.io/blog/tags/catalina/"/>
    
      <category term="日志log" scheme="https://garywu520.github.io/blog/tags/%E6%97%A5%E5%BF%97log/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat8直接访问与二级目录访问</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/Tomcat8%E7%9B%B4%E6%8E%A5%E8%AE%BF%E9%97%AE%E4%B8%8E%E4%BA%8C%E7%BA%A7%E7%9B%AE%E5%BD%95%E8%AE%BF%E9%97%AE/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/Tomcat8直接访问与二级目录访问/</id>
    <published>2019-08-07T03:06:45.000Z</published>
    <updated>2019-08-07T03:09:51.855Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-直接访问-工程部署"><a href="#1-直接访问-工程部署" class="headerlink" title="1. 直接访问-工程部署"></a>1. 直接访问-工程部署</h5><p>注：将应用程序部署到Tomcat根目录，【直接】访问方式为：http://[ip]:[port]</p><ul><li>这种方式最简单，直接删除Tomcat//webapps/ROOT下面的所有文件，将研发给的工程放到该目录下。</li><li>Tomcat启动时，默认会读取和加载ROOT目录下面的所有项目。</li></ul><a id="more"></a><p>关于Tomcat 8 tomcat/conf/server.xml，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>name：表示访问本地的localhost地址</li><li>appBase：表示项目指定的父位置</li></ul><h5 id="2-二级目录访问-工程部署"><a href="#2-二级目录访问-工程部署" class="headerlink" title="2. 二级目录访问-工程部署"></a>2. 二级目录访问-工程部署</h5><p>注：二级目录访问，访问方式为：http://[ip]:[port]/[myapp]</p><ul><li>删除Tomcat//webapps/ROOT目录下的所有文件，并在ROOT目录下新建项目名目录[如：myapp]</li></ul><p>这种方式需要修改tomcat/conf/server.xml，重新指定根目录, 改为如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"localhost"</span>  <span class="attr">appBase</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">"org.apache.catalina.valves.AccessLogValve"</span> <span class="attr">directory</span>=<span class="string">"logs"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">"localhost_access_log"</span> <span class="attr">suffix</span>=<span class="string">".txt"</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">"%h %l %u %t &amp;quot;%r&amp;quot; %s %b"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">"/myapp"</span> <span class="attr">docBase</span>=<span class="string">"ROOT/myapp"</span> <span class="attr">reloadable</span>=<span class="string">"true"</span> <span class="attr">debug</span>=<span class="string">"0"</span> <span class="attr">crossContext</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>path: 指定虚拟目录的名称，如：path=”/myapp” 。，如果想只输入ip地址和端口就显示主页，则该键值留为空；</li><li>docBase: 指定web应用的文件路径,可以是绝对路径，也可以是相对于appBase的相对路径。此目录也可以是外部目录。</li></ul><p>​       注：如果Web应用采用开放目录结构，则指定Web应用的根目录；如果Web应用是个war文件，则指定war文件的路径。</p><ul><li>reloadable: 如果这个属性设为true，tomcat服务器在运行状态下会监视在WEB-INF/classes和WEB-INF/lib目录下class文件的改动，如果监测到有class文件被更新的，服务器会自动重新加载Web应用</li><li>crossContext: 配置的不同context共享一个session</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-直接访问-工程部署&quot;&gt;&lt;a href=&quot;#1-直接访问-工程部署&quot; class=&quot;headerlink&quot; title=&quot;1. 直接访问-工程部署&quot;&gt;&lt;/a&gt;1. 直接访问-工程部署&lt;/h5&gt;&lt;p&gt;注：将应用程序部署到Tomcat根目录，【直接】访问方式为：http://[ip]:[port]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这种方式最简单，直接删除Tomcat//webapps/ROOT下面的所有文件，将研发给的工程放到该目录下。&lt;/li&gt;
&lt;li&gt;Tomcat启动时，默认会读取和加载ROOT目录下面的所有项目。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="tomcat" scheme="https://garywu520.github.io/blog/tags/tomcat/"/>
    
      <category term="war" scheme="https://garywu520.github.io/blog/tags/war/"/>
    
      <category term="tomcat8" scheme="https://garywu520.github.io/blog/tags/tomcat8/"/>
    
      <category term="java" scheme="https://garywu520.github.io/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Tomcat8环境部署</title>
    <link href="https://garywu520.github.io/blog/2019/08/07/Tomcat8%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <id>https://garywu520.github.io/blog/2019/08/07/Tomcat8环境部署/</id>
    <published>2019-08-07T03:05:45.000Z</published>
    <updated>2019-08-07T05:16:25.870Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-安装jdk"><a href="#1-安装jdk" class="headerlink" title="1. 安装jdk"></a>1. 安装jdk</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解压到 /usr/local/目录</span><br><span class="line">tar -zxf jdk*.tar.gz -C /usr/local/</span><br><span class="line">ln -sv /usr/local/jdk*  /usr/local/jdk</span><br></pre></td></tr></table></figure><p>配置环境变量-/etc/profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export JAVA_HOME=/usr/local/jdk</span><br><span class="line">export JRE_HOME=/usr/local/jdk/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib  </span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-安装Tomcat"><a href="#2-安装Tomcat" class="headerlink" title="2. 安装Tomcat"></a>2. 安装Tomcat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">解压到/usr/local目录</span><br><span class="line">tar -zxf apache-tomcat*.tar.gz -C /usr/local/</span><br><span class="line">ln -sv /usr/local/apache-tomcat* /usr/local/tomcat</span><br></pre></td></tr></table></figure><p>相关命令软连</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -sv /usr/local/jdk/bin/jps /usr/sbin/jps</span><br><span class="line">ln -sv /usr/local/jdk/bin/jmap /usr/sbin/jmap</span><br></pre></td></tr></table></figure><h5 id="3-优化Tomcat"><a href="#3-优化Tomcat" class="headerlink" title="3. 优化Tomcat"></a>3. 优化Tomcat</h5><h6 id="1-修改Tomcat端口为80"><a href="#1-修改Tomcat端口为80" class="headerlink" title="(1)修改Tomcat端口为80"></a>(1)修改Tomcat端口为80</h6><p>cat   tomcat/conf/server.xml</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port="80" protocol="HTTP/1.1" </span><br><span class="line">             connectionTimeout="20000" </span><br><span class="line">             redirectPort="8443"</span><br><span class="line">             compression="on" </span><br><span class="line">             compressionMinSize1="2048" </span><br><span class="line">             noCompressionUserAgents="gozilla, traviata" </span><br><span class="line">             compressableMimeType="text/html,text/xml,text/javascript,text/css,text/plain"/&gt;</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>port：代表Tomcat监听端口，默认8080</li><li>compression 打开压缩功能 </li><li>compressionMinSize 启用压缩的输出内容大小，这里面默认为2KB </li><li>compressableMimeType 压缩类型 </li><li>connectionTimeout 定义建立客户连接超时的时间. 如果为 -1, 表示不限制建立客户连接的时间</li></ul><h6 id="2-内存优化"><a href="#2-内存优化" class="headerlink" title="(2)内存优化"></a>(2)内存优化</h6><p>Tomcat内存优化主要是对tomcat启动参数优化，可以在tomcat的启动脚本catalina.sh中设置 JAVA_OPTS 参数。</p><p>cat   tomcat/bin/catalina.sh  — 大概在250行左右</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS="$JAVA_OPTS $JSSE_OPTS"</span><br><span class="line">改为</span><br><span class="line">JAVA_OPTS="-server -XX:PermSize=512M -XX:MaxPermSize=1024m -Xms2048m -Xmx2048m" </span><br><span class="line"></span><br><span class="line">参数：</span><br><span class="line">-server：表示以服务模式启动，启动速度会稍微慢一点，但性能会高很多。</span><br><span class="line">         不加这个参数，默认是以客户端模式启动。</span><br></pre></td></tr></table></figure><h5 id="4-Tomcat日志文件"><a href="#4-Tomcat日志文件" class="headerlink" title="4. Tomcat日志文件"></a>4. Tomcat日志文件</h5><p>cd /application/tomcat/logs</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls -lh catalina.out</span><br><span class="line"><span class="meta">#</span><span class="bash">tomcat实时日志,启动信息/报错信息均会在此文件体现</span></span><br></pre></td></tr></table></figure><h5 id="5-加快Tomcat的启动速度"><a href="#5-加快Tomcat的启动速度" class="headerlink" title="5. 加快Tomcat的启动速度"></a>5. 加快Tomcat的启动速度</h5><p>打开$JAVA_PATH/jre/lib/security/java.security这个文件，找到下面的内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">securerandom.source=file:/dev/random </span><br><span class="line">替换成</span><br><span class="line">securerandom.source=file:/dev/./random</span><br></pre></td></tr></table></figure><h5 id="6-启动tomcat"><a href="#6-启动tomcat" class="headerlink" title="6. 启动tomcat"></a>6. 启动tomcat</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/tomcat/bin/shutdown.sh</span><br><span class="line">/usr/local/tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><h5 id="其他：关于启动错误"><a href="#其他：关于启动错误" class="headerlink" title="其他：关于启动错误"></a>其他：关于启动错误</h5><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">touch:</span> cannot touch ‘<span class="meta-keyword">/usr/</span>local<span class="meta-keyword">/tomcat/</span>logs/catalina.out’: Permission denied</span><br></pre></td></tr></table></figure><p>解决方法：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">/usr/local/tomcat</span> &amp;&amp; chmod -R 766  <span class="string">./logs</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-安装jdk&quot;&gt;&lt;a href=&quot;#1-安装jdk&quot; class=&quot;headerlink&quot; title=&quot;1. 安装jdk&quot;&gt;&lt;/a&gt;1. 安装jdk&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;解压到 /usr/local/目录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxf jdk*.tar.gz -C /usr/local/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ln -sv /usr/local/jdk*  /usr/local/jdk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;配置环境变量-/etc/profile&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export JAVA_HOME=/usr/local/jdk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export JRE_HOME=/usr/local/jdk/jre&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;export PATH=$PATH:$JAVA_HOME/bin&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source /etc/profile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java -version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="tomcat" scheme="https://garywu520.github.io/blog/tags/tomcat/"/>
    
      <category term="tomcat8" scheme="https://garywu520.github.io/blog/tags/tomcat8/"/>
    
      <category term="java" scheme="https://garywu520.github.io/blog/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Docker管理容器数据</title>
    <link href="https://garywu520.github.io/blog/2019/08/06/Docker%E7%AE%A1%E7%90%86%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE/"/>
    <id>https://garywu520.github.io/blog/2019/08/06/Docker管理容器数据/</id>
    <published>2019-08-06T10:45:09.000Z</published>
    <updated>2019-08-06T10:50:35.511Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-Docker管理数据的两种主要方法"><a href="#1-Docker管理数据的两种主要方法" class="headerlink" title="1. Docker管理数据的两种主要方法"></a>1. Docker管理数据的两种主要方法</h5><ul><li>数据卷</li><li>数据卷容器</li></ul><h5 id="2-数据卷"><a href="#2-数据卷" class="headerlink" title="2. 数据卷"></a>2. 数据卷</h5><ul><li>数据卷可在容器之间共享或重用</li><li>数据卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止。</li></ul><a id="more"></a><h5 id="3-添加数据卷"><a href="#3-添加数据卷" class="headerlink" title="3. 添加数据卷"></a>3. 添加数据卷</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &lt;容器名称&gt; -i -t  -v /webapp -d root/centos:v2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">-v参数用来向容器中添加数据卷，容器内部将创建一个卷为/webapp；</span></span><br><span class="line"><span class="meta">#</span><span class="bash">可以在docker run 命令中多次使用-v参数挂载多个数据卷</span></span><br></pre></td></tr></table></figure><h5 id="4-挂载宿主机的目录作为容器的卷"><a href="#4-挂载宿主机的目录作为容器的卷" class="headerlink" title="4. 挂载宿主机的目录作为容器的卷"></a>4. 挂载宿主机的目录作为容器的卷</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run --name &lt;容器名称&gt; -i -t  -v /opt/webapp:/mnt/webapp -d root/centos:v2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注: 宿主机的/opt/webapp目录将作为卷挂载到容器的/mnt/webapp中</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 宿主机的目录必须是绝对路径，如果目录不存在docker会自动创建它；</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认情况下，docker对此数据卷有读写权限，但是可以将目录设置为只读，方法如下:</span></span><br><span class="line">docker run --name &lt;容器名称&gt; -i -t  -v /opt/webapp:/mnt/webapp:ro -d root/centos:v2</span><br></pre></td></tr></table></figure><h5 id="5-查看已经运行的容器目录挂载信息"><a href="#5-查看已经运行的容器目录挂载信息" class="headerlink" title="5. 查看已经运行的容器目录挂载信息"></a>5. 查看已经运行的容器目录挂载信息</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker inspect 2a21ae2b0720|grep Mounts -A 20</span><br></pre></td></tr></table></figure><h5 id="6-容器之间数据卷共享"><a href="#6-容器之间数据卷共享" class="headerlink" title="6. 容器之间数据卷共享"></a>6. 容器之间数据卷共享</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先创建一个指定名称的数据卷容器</span></span><br><span class="line">docker run --name Test1 -i -t  -v /web -d root/centos:v2</span><br></pre></td></tr></table></figure><p>容器通过–volumes-from参数来桥接其他容器内的数据卷</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name Test2 -i -t  --volumes-from Test1 -d root/centos:v2</span><br></pre></td></tr></table></figure><p>注：当一个数据卷在多个容器中被挂载或桥接，当删除其中一个容器后，数据卷并不会消失。只有当最后挂载的容器被删除后，挂载卷才会被删除。</p><h5 id="7-备份、恢复或者迁移数据卷"><a href="#7-备份、恢复或者迁移数据卷" class="headerlink" title="7. 备份、恢复或者迁移数据卷"></a>7. 备份、恢复或者迁移数据卷</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">首先创建一个指定名称的数据卷容器</span></span><br><span class="line">docker run --name Test1 -i -t  -v /web -d root/centos:v2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">然后使用--volumes-from参数来创建一个挂载数据卷的容器</span></span><br><span class="line">docker run --volumes-from Test1 -v $(pwd):/backup root/centos:v2 tar cvf /backup/web_backup.tar /web</span><br></pre></td></tr></table></figure><ul><li>数据卷备份</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run --name Test10 --volumes-from Test1 -v $(pwd):/backup root/centos:v2 tar cvf /backup/web_backup.tar /web</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">说明：</span></span><br><span class="line">使用root/centos:v2, 从Test1桥接容器卷，同时将宿主机的当前目录挂载到容器的/backup目录,最后执行tar压缩命令，将桥接卷/web下的所有文件打包到宿主机的当前目录中。</span><br></pre></td></tr></table></figure><ul><li>数据卷恢复</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">模拟恢复数据卷数据--先删除原数据卷内容。并运行一个原数据卷容器</span></span><br><span class="line">docker run --name Test2 -i -t --volumes-from Test1 -d root/centos:v2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在新的容器中的数据卷里解压此备份文件</span></span><br><span class="line">docker run --name Test2_RES --volumes-from Test2 -v $(pwd):/backup root/centos:v2 tar xvf /backup/web_backup.tar</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-Docker管理数据的两种主要方法&quot;&gt;&lt;a href=&quot;#1-Docker管理数据的两种主要方法&quot; class=&quot;headerlink&quot; title=&quot;1. Docker管理数据的两种主要方法&quot;&gt;&lt;/a&gt;1. Docker管理数据的两种主要方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;数据卷&lt;/li&gt;
&lt;li&gt;数据卷容器&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&quot;2-数据卷&quot;&gt;&lt;a href=&quot;#2-数据卷&quot; class=&quot;headerlink&quot; title=&quot;2. 数据卷&quot;&gt;&lt;/a&gt;2. 数据卷&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;数据卷可在容器之间共享或重用&lt;/li&gt;
&lt;li&gt;数据卷中的更改可以直接生效&lt;/li&gt;
&lt;li&gt;数据卷中的更改不会包含在镜像的更新中&lt;/li&gt;
&lt;li&gt;数据卷的生命周期一直持续到没有容器使用它为止。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="容器" scheme="https://garywu520.github.io/blog/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="docker-compose" scheme="https://garywu520.github.io/blog/tags/docker-compose/"/>
    
      <category term="docker-ce" scheme="https://garywu520.github.io/blog/tags/docker-ce/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker Hub查找及创建自定义镜像</title>
    <link href="https://garywu520.github.io/blog/2019/08/06/%E4%BD%BF%E7%94%A8Docker-Hub%E6%9F%A5%E6%89%BE%E5%8F%8A%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E9%95%9C%E5%83%8F/"/>
    <id>https://garywu520.github.io/blog/2019/08/06/使用Docker-Hub查找及创建自定义镜像/</id>
    <published>2019-08-06T10:44:50.000Z</published>
    <updated>2019-08-06T10:49:30.179Z</updated>
    
    <content type="html"><![CDATA[<p>Docker Hub 存放着 docker 及其组件一起工作的所有资源。Docker Hub 会帮助你和你的同事协作，并获取功能最全的 docker。要做到这一点，它提供的服务有：</p><ul><li>Docker镜像主机</li><li>用户认证</li><li>自动镜像构建和工作流程工具，如构建触发器和 web hooks</li><li>整合了 GitHub 和 BitBucket</li></ul><a id="more"></a><h5 id="1-注册地址"><a href="#1-注册地址" class="headerlink" title="1. 注册地址"></a>1. 注册地址</h5><p><a href="https://hub.docker.com/signup" target="_blank" rel="noopener">https://hub.docker.com/signup</a></p><h5 id="2-Web登录"><a href="#2-Web登录" class="headerlink" title="2. Web登录"></a>2. Web登录</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">登录：https://hub.docker.com/</span><br><span class="line">账号：garywu520</span><br><span class="line">密码：P**4!@#</span><br></pre></td></tr></table></figure><h5 id="3-命令行登录"><a href="#3-命令行登录" class="headerlink" title="3. 命令行登录"></a>3. 命令行登录</h5><p>通过在命令行中输入 docker login </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don't have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username: garywu520</span><br><span class="line">Password: </span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><h5 id="4-官方查找镜像"><a href="#4-官方查找镜像" class="headerlink" title="4. 官方查找镜像"></a>4. 官方查找镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@CentOS7 ~]# docker search unbound</span><br><span class="line">INDEX       NAME                        DESCRIPTION    STARS     OFFICIAL   AUTOMATED</span><br><span class="line">docker.io   docker.io/secns/unbound    unbound DNS Resolver with DNSSEC enabled    21      [OK]</span><br><span class="line">docker.io   docker.io/mvance/unbound   Unbound is a validating, recursive, and ca...   16  [OK]</span><br></pre></td></tr></table></figure><ul><li>下载/使用官方镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull &lt;NAME&gt;</span><br><span class="line">docker run -t -i docker.io/secns/unbound /bin/bash</span><br></pre></td></tr></table></figure><h5 id="5-使用Dockerfile创建自己的镜像"><a href="#5-使用Dockerfile创建自己的镜像" class="headerlink" title="5. 使用Dockerfile创建自己的镜像"></a>5. 使用Dockerfile创建自己的镜像</h5><p>首先创建一个目录，并且创建一个Dockerfile文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir qishituan</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> qishituan</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> touch Dockerfile</span></span><br></pre></td></tr></table></figure><ul><li>DockerFile文件内容如下:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> This is a comment</span></span><br><span class="line">FROM docker.io/centos       #指定镜像源</span><br><span class="line">MAINTAINER Gary Wu &lt;garywu@mail.com&gt; #指定维护者</span><br><span class="line">RUN yum install -y htop      #接着指定三个RUN命令</span><br><span class="line">RUN yum install -y tmux</span><br></pre></td></tr></table></figure><p>高级DockerFile参考</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">FROM docker.io/centos</span><br><span class="line"></span><br><span class="line">RUN buildDeps='gcc libc6-dev make wget lrzsz vim' \</span><br><span class="line">    &amp;&amp; yum install -y $buildDeps \</span><br><span class="line">    &amp;&amp; wget -O redis.tar.gz "http://download.redis.io/releases/redis-5.0.3.tar.gz" \</span><br><span class="line">    &amp;&amp; mkdir -p /usr/src/redis \</span><br><span class="line">    &amp;&amp; tar -xzf redis.tar.gz -C /usr/src/redis --strip-components=1 \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis \</span><br><span class="line">    &amp;&amp; make -C /usr/src/redis install \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/* \</span><br><span class="line">    &amp;&amp; rm redis.tar.gz \</span><br><span class="line">    &amp;&amp; rm -r /usr/src/redis</span><br></pre></td></tr></table></figure><p>创建镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker build -t="root/centos:v2" .</span><br><span class="line"><span class="meta">#</span><span class="bash">最后一个“.” 表示当前目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用docker build命令和-t来创建我们的新镜像，用户是ouruser、仓库源名称sinatra、标签是v2</span></span><br></pre></td></tr></table></figure><p>运行新的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name CentOS_V2 -i -t -d root/centos:v2</span><br></pre></td></tr></table></figure><h5 id="6-删除镜像"><a href="#6-删除镜像" class="headerlink" title="6. 删除镜像"></a>6. 删除镜像</h5><ul><li>删除本地镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dock ps -a</span><br><span class="line">docker image rm &lt;IMAGE_ID&gt;</span><br></pre></td></tr></table></figure><ul><li>彻底删除本地镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop docker.service</span><br><span class="line">rm -rf /var/lib/docker</span><br><span class="line">systemctl start docker.service</span><br></pre></td></tr></table></figure><h5 id="7-向Docker-Hub推送镜像"><a href="#7-向Docker-Hub推送镜像" class="headerlink" title="7. 向Docker Hub推送镜像"></a>7. 向Docker Hub推送镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push root/centos</span><br></pre></td></tr></table></figure><ul><li>移除镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi root/centos</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker Hub 存放着 docker 及其组件一起工作的所有资源。Docker Hub 会帮助你和你的同事协作，并获取功能最全的 docker。要做到这一点，它提供的服务有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Docker镜像主机&lt;/li&gt;
&lt;li&gt;用户认证&lt;/li&gt;
&lt;li&gt;自动镜像构建和工作流程工具，如构建触发器和 web hooks&lt;/li&gt;
&lt;li&gt;整合了 GitHub 和 BitBucket&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="容器" scheme="https://garywu520.github.io/blog/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="docker-compose" scheme="https://garywu520.github.io/blog/tags/docker-compose/"/>
    
      <category term="docker-ce" scheme="https://garywu520.github.io/blog/tags/docker-ce/"/>
    
  </entry>
  
</feed>
