<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gary Wu</title>
  
  <subtitle>运维架构师 - 从入门到放弃</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://garywu520.github.io/blog/"/>
  <updated>2019-10-29T08:06:32.039Z</updated>
  <id>https://garywu520.github.io/blog/</id>
  
  <author>
    <name>Gary Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redis key批量清理</title>
    <link href="https://garywu520.github.io/blog/2019/10/29/redis-key%E6%89%B9%E9%87%8F%E6%B8%85%E7%90%86/"/>
    <id>https://garywu520.github.io/blog/2019/10/29/redis-key批量清理/</id>
    <published>2019-10-29T08:04:32.000Z</published>
    <updated>2019-10-29T08:06:32.039Z</updated>
    
    <content type="html"><![CDATA[<p>获取key到文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a "password" keys kline_* &gt;/root/keys.log</span><br></pre></td></tr></table></figure><p>删除key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read LINE</span><br><span class="line">do</span><br><span class="line">    redis-cli -h 127.0.0.1 -p 6379 -a "password" del $LINE</span><br><span class="line">done &lt; /root/keys.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取key到文件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code
      
    
    </summary>
    
    
      <category term="redis key清理" scheme="https://garywu520.github.io/blog/tags/redis-key%E6%B8%85%E7%90%86/"/>
    
      <category term="key" scheme="https://garywu520.github.io/blog/tags/key/"/>
    
      <category term="清理" scheme="https://garywu520.github.io/blog/tags/%E6%B8%85%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>zabbix server监控zabbix agent存活</title>
    <link href="https://garywu520.github.io/blog/2019/10/29/zabbix-server%E7%9B%91%E6%8E%A7zabbix-agent%E5%AD%98%E6%B4%BB/"/>
    <id>https://garywu520.github.io/blog/2019/10/29/zabbix-server监控zabbix-agent存活/</id>
    <published>2019-10-29T07:34:00.000Z</published>
    <updated>2019-10-29T08:01:12.270Z</updated>
    
    <content type="html"><![CDATA[<p>正常逻辑</p><p>如果按照正常部署方式，一般是创建zabbix-agent模板，通过net.tcp.listen[port] 或 自定义key，触发器≠1就告警，最后将模板应用到所有agent主机。</p><a id="more"></a><p>实际情况</p><p>如果你细心点就会发现，当某台机器的zabbix-agent 服务stop后，监控数据就取不到了，紧接着就是zabbix断图，此时，触发器≠1由于没有获取到任何值而不会触发告警，所以也就监控不到某个机器的zabbix agent服务何时异常退出或机器宕机，这看起来是很严重的问题。</p><p>解决思路</p><p>在zabbix server端的模板中，通过配置 net.tcp.listen[ip,port]  简单检查，来获取不同agent的运行状态。</p><p>缺点：由于每台机器的IP地址都不相同，故每台机器都需要添加一个监控项+触发器，对于上百台机器来说，这是很繁琐的工作。至于用什么方法简化自己繁琐的工作，这是一个脑力活儿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常逻辑&lt;/p&gt;
&lt;p&gt;如果按照正常部署方式，一般是创建zabbix-agent模板，通过net.tcp.listen[port] 或 自定义key，触发器≠1就告警，最后将模板应用到所有agent主机。&lt;/p&gt;
    
    </summary>
    
    
      <category term="监控" scheme="https://garywu520.github.io/blog/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="zabbix server" scheme="https://garywu520.github.io/blog/tags/zabbix-server/"/>
    
      <category term="zabbix agent" scheme="https://garywu520.github.io/blog/tags/zabbix-agent/"/>
    
  </entry>
  
  <entry>
    <title>MySQL缓存参数优化</title>
    <link href="https://garywu520.github.io/blog/2019/10/24/MySQL%E4%B8%A4%E4%B8%AA%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/"/>
    <id>https://garywu520.github.io/blog/2019/10/24/MySQL两个核心参数优化/</id>
    <published>2019-10-24T09:38:36.000Z</published>
    <updated>2019-10-24T09:41:56.056Z</updated>
    
    <content type="html"><![CDATA[<p>表缓存与查询缓存</p><h5 id="1-表缓存"><a href="#1-表缓存" class="headerlink" title="1. 表缓存"></a>1. 表缓存</h5><p>MySQL table_open_cache优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global table_open_cache = 3072; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global variables like &apos;table_open_cache&apos;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| table_open_cache | 3072  |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;open%tables%&apos;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Open_tables   | 132   |</span><br><span class="line">| Opened_tables | 139   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>配置文件修改【永久生效】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">table_open_cache = 3072</span><br></pre></td></tr></table></figure><p>Open_tables会根据table_open_cache的限制进行表缓存，当open_tables等于table_open_cache的时候，open_tables会清理较早时间的表缓存来为新缓存腾出空间，一直反复，在此过程中，mysql的这个操作会消耗一定的系统内存和cpu资源。所以有必要对table_open_cache进行适当优化。</p><p>注：table_open_cache务必要小于open_file_limit的值，否则可能出现客户端由于文件描述符不足而连接失败，对应unix系统的ulimit值。</p><hr><h5 id="2-查询缓存"><a href="#2-查询缓存" class="headerlink" title="2. 查询缓存"></a>2. 查询缓存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%query_cache%&apos;;</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| Variable_name                | Value   |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| have_query_cache             | YES     |</span><br><span class="line">| query_cache_limit            | 1048576 |</span><br><span class="line">| query_cache_min_res_unit     | 4096    |</span><br><span class="line">| query_cache_size             | 1048576 |</span><br><span class="line">| query_cache_type             | OFF     |</span><br><span class="line">| query_cache_wlock_invalidate | ON      |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; set global query_cache_type = 1;</span><br><span class="line">ERROR 1651 (HY000): Query cache is disabled; restart the server with query_cache_type=1 to enable it</span><br></pre></td></tr></table></figure><p>参数释义：</p><p>have_query_cache YES 表示数据库支持查询缓存功能[不代表已开启查询缓存]</p><p>query_cache_type: ON 表示启用查询缓存</p><p>query_cache_limit表示单条查询缓存的最大值，默认1M</p><p> query_cache_min_res_unit 表示缓存内存的最小单元，默认4k</p><p>query_cache_wlock_invalidate: 表示查询语句所查询的表如果被写锁锁定，是否仍然使用缓存返回结果。OFF表示使用缓存返回结果，ON表示关闭此功能。我们来描述一个场景：因为写锁是独占的，排他的，所以当写锁施加在对应表上的时候，如果对当前表发起查询请求，那么查询操作则需要等到写锁释放后才能进行。可是如果对于的查询语句正好命中了这张表的缓存，查询请求是否就不用继续等待写锁释放而直接从缓存中获取结果？默认值是OFF，也就是说当值为OFF时，即使表被施加了写锁，查询语句如果命中了对于的缓存，则会直接从缓存获取结果。换句话说，如果此值设置为ON，如果表被施加了写锁，那么当写锁释放时，数据可能发生了改变，所以在表被施加写锁期间，即使有查询命中了查询缓存，也不能从缓存获取结果。那么我们可以得出结论：当值设置为ON时，更加安全，保证了数据的一致性。</p><p>查询缓存：<a href="https://www.zsythink.net/archives/1111" target="_blank" rel="noopener">参考: 朱双印博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;表缓存与查询缓存&lt;/p&gt;
&lt;h5 id=&quot;1-表缓存&quot;&gt;&lt;a href=&quot;#1-表缓存&quot; class=&quot;headerlink&quot; title=&quot;1. 表缓存&quot;&gt;&lt;/a&gt;1. 表缓存&lt;/h5&gt;&lt;p&gt;MySQL table_open_cache优化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; set global table_open_cache = 3072; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Query OK, 0 rows affected (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; show global variables like &amp;apos;table_open_cache&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name    | Value |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| table_open_cache | 3072  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 row in set (0.01 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://garywu520.github.io/blog/tags/MySQL/"/>
    
      <category term="表缓存" scheme="https://garywu520.github.io/blog/tags/%E8%A1%A8%E7%BC%93%E5%AD%98/"/>
    
      <category term="查询缓存" scheme="https://garywu520.github.io/blog/tags/%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/"/>
    
      <category term="table_open_cache" scheme="https://garywu520.github.io/blog/tags/table-open-cache/"/>
    
      <category term="query_cache" scheme="https://garywu520.github.io/blog/tags/query-cache/"/>
    
  </entry>
  
  <entry>
    <title>免费SSL证书-申请更新脚本</title>
    <link href="https://garywu520.github.io/blog/2019/10/16/%E5%85%8D%E8%B4%B9SSL%E8%AF%81%E4%B9%A6-%E7%94%B3%E8%AF%B7%E6%9B%B4%E6%96%B0%E8%84%9A%E6%9C%AC/"/>
    <id>https://garywu520.github.io/blog/2019/10/16/免费SSL证书-申请更新脚本/</id>
    <published>2019-10-16T03:18:55.000Z</published>
    <updated>2019-10-16T03:23:19.494Z</updated>
    
    <content type="html"><![CDATA[<p> <strong>acme.sh</strong> 实现了 <code>acme</code> 协议, 可以从 letsencrypt 生成免费的证书</p><p>环境：Nginx</p><h5 id="一、安装acme-sh"><a href="#一、安装acme-sh" class="headerlink" title="一、安装acme.sh"></a>一、安装acme.sh</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">把 acme.sh 安装到root目录下</span></span><br><span class="line">~/.acme.sh/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">并创建 一个 bash 的 <span class="built_in">alias</span>, 方便你的使用</span></span><br><span class="line">alias acme.sh=~/.acme.sh/acme.sh</span><br></pre></td></tr></table></figure><p> 安装过程不会污染已有的系统任何功能和文件, 所有的修改都限制在安装目录中: <code>~/.acme.sh/</code> </p><a id="more"></a><h5 id="二、SSL证书自动更新脚本"><a href="#二、SSL证书自动更新脚本" class="headerlink" title="二、SSL证书自动更新脚本"></a>二、SSL证书自动更新脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash">自动更新SSL证书,crontab每30天强制更新一次</span></span><br><span class="line"></span><br><span class="line">DIR=/root/.acme.sh</span><br><span class="line">SSLDIR=/etc/nginx/ssl</span><br><span class="line">DOMAIN=xx.xx.net</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">强制更新证书</span></span><br><span class="line">cd $DIR </span><br><span class="line">if [ -f dhparam.pem ];then</span><br><span class="line">   rm -f ./dhparam.pem</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更新acme.sh到最新版</span></span><br><span class="line">./acme.sh --upgrade</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">生成新key和pem</span></span><br><span class="line"><span class="meta">#</span><span class="bash">强制更新证书并指定nginx Root根目录[自动添加验证文件]</span></span><br><span class="line">./acme.sh --issue --force  -d $DOMAIN --webroot /usr/share/nginx</span><br><span class="line">sleep 2</span><br><span class="line">openssl dhparam -dsaparam -out dhparam.pem 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拷贝新证书覆盖ssl目录</span></span><br><span class="line">\cp $DIR/$DOMAIN/$DOMAIN.cer $SSLDIR/</span><br><span class="line">\cp $DIR/$DOMAIN/$DOMAIN.key $SSLDIR/</span><br><span class="line">\cp $DIR/dhparam.pem $SSLDIR/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">重启nginx服务</span></span><br><span class="line">/bin/systemctl restart nginx</span><br></pre></td></tr></table></figure><p>GitHub: <a href="[https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E](https://github.com/Neilpang/acme.sh/wiki/说明)">项目地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; &lt;strong&gt;acme.sh&lt;/strong&gt; 实现了 &lt;code&gt;acme&lt;/code&gt; 协议, 可以从 letsencrypt 生成免费的证书&lt;/p&gt;
&lt;p&gt;环境：Nginx&lt;/p&gt;
&lt;h5 id=&quot;一、安装acme-sh&quot;&gt;&lt;a href=&quot;#一、安装acme-sh&quot; class=&quot;headerlink&quot; title=&quot;一、安装acme.sh&quot;&gt;&lt;/a&gt;一、安装acme.sh&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl  https://get.acme.sh | sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;把 acme.sh 安装到root目录下&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;~/.acme.sh/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;并创建 一个 bash 的 &lt;span class=&quot;built_in&quot;&gt;alias&lt;/span&gt;, 方便你的使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alias acme.sh=~/.acme.sh/acme.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; 安装过程不会污染已有的系统任何功能和文件, 所有的修改都限制在安装目录中: &lt;code&gt;~/.acme.sh/&lt;/code&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://garywu520.github.io/blog/tags/Nginx/"/>
    
      <category term="crt" scheme="https://garywu520.github.io/blog/tags/crt/"/>
    
      <category term="SSL" scheme="https://garywu520.github.io/blog/tags/SSL/"/>
    
      <category term="pem" scheme="https://garywu520.github.io/blog/tags/pem/"/>
    
      <category term="key" scheme="https://garywu520.github.io/blog/tags/key/"/>
    
      <category term="证书" scheme="https://garywu520.github.io/blog/tags/%E8%AF%81%E4%B9%A6/"/>
    
      <category term="acme.sh" scheme="https://garywu520.github.io/blog/tags/acme-sh/"/>
    
      <category term="dhparam.pem" scheme="https://garywu520.github.io/blog/tags/dhparam-pem/"/>
    
      <category term="letsencrypt" scheme="https://garywu520.github.io/blog/tags/letsencrypt/"/>
    
  </entry>
  
  <entry>
    <title>SSH保持长连接</title>
    <link href="https://garywu520.github.io/blog/2019/10/15/SSH%E4%BF%9D%E6%8C%81%E9%95%BF%E8%BF%9E%E6%8E%A5/"/>
    <id>https://garywu520.github.io/blog/2019/10/15/SSH保持长连接/</id>
    <published>2019-10-15T03:18:18.000Z</published>
    <updated>2019-10-15T03:30:26.257Z</updated>
    
    <content type="html"><![CDATA[<h5 id="场景："><a href="#场景：" class="headerlink" title="场景："></a>场景：</h5><p>跳板机从阿里云北京到阿里云其他地方，过一会儿总出现无响应的问题。</p><h5 id="方案一：服务端配置"><a href="#方案一：服务端配置" class="headerlink" title="方案一：服务端配置"></a>方案一：服务端配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/sshd_config  #添加如下两行</span><br><span class="line"></span><br><span class="line">ClientAliveInterval 60</span><br><span class="line">ClientAliveCountMax 1</span><br></pre></td></tr></table></figure><p> SSH Server 每 60 秒就会自动发送一个信号给 Client，而等待 Client 回应， 如果客户端没有回应，会记录下来直到记录数超过 ClientAliveCountMax 的值时，才会断开连接。 </p><a id="more"></a><h5 id="方案二：客户端配置"><a href="#方案二：客户端配置" class="headerlink" title="方案二：客户端配置"></a>方案二：客户端配置</h5><p>如果由于某些原因，不能控制服务器，也可以在客户端实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ssh/ssh_config      #注意：这里的文件是ssh_config</span><br><span class="line"></span><br><span class="line">TCPKeepAlive yes</span><br><span class="line">ServerAliveInterval 30</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>TCPKeepAlive yes    开启TCP保持连接 </li><li>ServerAliveInterval 30   每过30秒发一个数据包到服务器证明“我还活着” </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;场景：&quot;&gt;&lt;a href=&quot;#场景：&quot; class=&quot;headerlink&quot; title=&quot;场景：&quot;&gt;&lt;/a&gt;场景：&lt;/h5&gt;&lt;p&gt;跳板机从阿里云北京到阿里云其他地方，过一会儿总出现无响应的问题。&lt;/p&gt;
&lt;h5 id=&quot;方案一：服务端配置&quot;&gt;&lt;a href=&quot;#方案一：服务端配置&quot; class=&quot;headerlink&quot; title=&quot;方案一：服务端配置&quot;&gt;&lt;/a&gt;方案一：服务端配置&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;vim /etc/ssh/sshd_config  #添加如下两行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ClientAliveInterval 60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ClientAliveCountMax 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt; SSH Server 每 60 秒就会自动发送一个信号给 Client，而等待 Client 回应， 如果客户端没有回应，会记录下来直到记录数超过 ClientAliveCountMax 的值时，才会断开连接。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="SSH" scheme="https://garywu520.github.io/blog/tags/SSH/"/>
    
      <category term="Keepalive" scheme="https://garywu520.github.io/blog/tags/Keepalive/"/>
    
      <category term="sshd" scheme="https://garywu520.github.io/blog/tags/sshd/"/>
    
  </entry>
  
  <entry>
    <title>Bash 5.0编译</title>
    <link href="https://garywu520.github.io/blog/2019/10/14/Bash-5-0%E7%BC%96%E8%AF%91/"/>
    <id>https://garywu520.github.io/blog/2019/10/14/Bash-5-0编译/</id>
    <published>2019-10-14T07:34:29.000Z</published>
    <updated>2019-10-14T09:49:28.879Z</updated>
    
    <content type="html"><![CDATA[<p>CentOS7安装的Bash版本是 V4.2.46，而Bash目前已经发不了5.0 Beta，编译玩玩</p><p>Bash: <a href="https://www.gnu.org/software/bash/" target="_blank" rel="noopener">Download</a></p><h5 id="一、编译安装Bash-5-0"><a href="#一、编译安装Bash-5-0" class="headerlink" title="一、编译安装Bash 5.0"></a>一、编译安装Bash 5.0</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装C编译器,make程序,内核头文件</span></span><br><span class="line">yum install -y gcc make kernel-headers</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.gnu.org/gnu/bash/bash-5.0-beta2.tar.gz</span><br><span class="line">tar -zxf bash-5.0-beta2.tar.gz</span><br><span class="line">cd bash-5.0-beta2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/bash5.0</span><br><span class="line">make</span><br><span class="line">make test</span><br><span class="line">make install</span><br><span class="line">/usr/local/bash5.0/bin/bash --version</span><br></pre></td></tr></table></figure><h5 id="二、使用新版本的Bash-Shell"><a href="#二、使用新版本的Bash-Shell" class="headerlink" title="二、使用新版本的Bash Shell"></a>二、使用新版本的Bash Shell</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mv /bin/bashbug /bin/bashbug.bak &amp;&amp; ln -sv /usr/local/bash5.0/bin/bashbug /usr/bashbug</span><br><span class="line">mv /bin/bash /bin/bash.bak &amp;&amp; ln -sv /usr/local/bash5.0/bin/bash /bin/bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# bash --version</span><br><span class="line">GNU bash, version 5.0.0(1)-beta2 (x86_64-pc-linux-gnu)</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line"></span><br><span class="line">This is free software; you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CentOS7安装的Bash版本是 V4.2.46，而Bash目前已经发不了5.0 Beta，编译玩玩&lt;/p&gt;
&lt;p&gt;Bash: &lt;a href=&quot;https://www.gnu.org/software/bash/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Download&lt;/a&gt;&lt;/p&gt;
&lt;h5 id=&quot;一、编译安装Bash-5-0&quot;&gt;&lt;a href=&quot;#一、编译安装Bash-5-0&quot; class=&quot;headerlink&quot; title=&quot;一、编译安装Bash 5.0&quot;&gt;&lt;/a&gt;一、编译安装Bash 5.0&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;安装C编译器,make程序,内核头文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y gcc make kernel-headers&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="bash" scheme="https://garywu520.github.io/blog/tags/bash/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty+Lua实现WAF应用防火墙</title>
    <link href="https://garywu520.github.io/blog/2019/10/12/OpenResty-Lua%E5%AE%9E%E7%8E%B0WAF%E5%BA%94%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>https://garywu520.github.io/blog/2019/10/12/OpenResty-Lua实现WAF应用防火墙/</id>
    <published>2019-10-12T09:24:57.000Z</published>
    <updated>2019-10-12T09:30:23.633Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、OpenResty概览"><a href="#一、OpenResty概览" class="headerlink" title="一、OpenResty概览"></a>一、OpenResty概览</h5><p>OpenResty是一个基于Lua扩展Nginx实现的可伸缩Web平台，其内部集成了大量精良的Lua库、第三方模块以及大多数依赖项。用于方便的部署能够处理超高并发、扩展性极高的动态Web应用。</p><p>OpenResty的目标是让你的Web服务直接跑在Nginx服务内部，充分利用Nginx的非阻塞I/O模型，不仅仅对HTTP客户端请求，甚至于对后端诸如MySQL、PostgreSQL、Memcache以及Redis等都进行一致的高性能响应。</p><h5 id="二、安装依赖库"><a href="#二、安装依赖库" class="headerlink" title="二、安装依赖库"></a>二、安装依赖库</h5><ul><li><p>安装pcre依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz</span><br><span class="line">tar -zxf pcre-8.43.tar.gz</span><br><span class="line">cd pcre-8.43</span><br><span class="line">./configure &amp;&amp; make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li><li><p>安装zlib依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y zlib zlib-devel</span><br></pre></td></tr></table></figure></li><li><p>安装ssl依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openssl openssl-devel</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>安装Lua组件 [ 想使用Lua实现WAF功能 ]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载最新LuaJIT</span></span><br><span class="line">wget http://luajit.org/download/LuaJIT-2.0.5.tar.gz</span><br><span class="line">tar -zxf LuaJIT-2.0.5.tar.gz</span><br><span class="line">cd LuaJIT-2.0.5</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">export LUAJIT_LIB=/usr/local/lib</span><br><span class="line">export LUAJIT_INC=/usr/local/include/luajit-2.0</span><br><span class="line">ln -s /usr/local/lib/libluajit-5.1.so.2 /lib64/libluajit-5.1.so.2</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure></li></ul><h5 id="三、编译安装OpenResty"><a href="#三、编译安装OpenResty" class="headerlink" title="三、编译安装OpenResty"></a>三、编译安装OpenResty</h5><p>官方各版本：<a href="https://openresty.org/cn/download.html" target="_blank" rel="noopener">下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">wget https://openresty.org/download/openresty-1.11.2.5.tar.gz</span><br><span class="line">tar -zxf openresty-1.11.2.5.tar.gz</span><br><span class="line">cd openresty-1.11.2.5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建www用户</span></span><br><span class="line">useradd -s /sbin/nologin -M www</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编译openresty</span></span><br><span class="line">./configure --prefix=/usr/local/openresty \</span><br><span class="line">--user=www \</span><br><span class="line">--group=www \</span><br><span class="line">--with-luajit \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-ipv6 --with-http_sub_module \</span><br><span class="line">--with-pcre \</span><br><span class="line">--with-pcre-jit \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-http_dav_module</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">gmake  &amp;&amp; gmake install</span><br></pre></td></tr></table></figure><p>测试openresty</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建nginx配置文件存放目录</span></span><br><span class="line">mkdir -p /usr/local/openresty/nginx/conf/conf.d</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /usr/<span class="built_in">local</span>/openresty/nginx/conf/nginx.conf</span></span><br><span class="line">http &#123;</span><br><span class="line">    ......</span><br><span class="line">    include /usr/local/openresty/nginx/conf/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vim /usr/local/openresty/nginx/conf/conf.d/hello.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /hello &#123;</span><br><span class="line">            default_type text/html;</span><br><span class="line">            content_by_lua_block &#123;</span><br><span class="line">                ngx.say("HelloWorld")</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/openresty/nginx/sbin/nginx -t</span><br><span class="line">/usr/local/openresty/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><p>web访问测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -XGET http://192.168.1.186/hello</span><br><span class="line">HelloWorld</span><br></pre></td></tr></table></figure><p>Systemd管理Nginx启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -sv /usr/local/openresty/nginx/sbin/nginx /usr/sbin/</span><br></pre></td></tr></table></figure><p>vim  /etc/systemd/system/nginx.service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=The NGINX HTTP and reverse proxy server</span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/usr/local/openresty/nginx/logs/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t</span><br><span class="line">ExecStart=/usr/sbin/nginx</span><br><span class="line">ExecReload=/usr/sbin/nginx -s reload</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><h5 id="四、部署WAF"><a href="#四、部署WAF" class="headerlink" title="四、部署WAF"></a>四、部署WAF</h5><p>功能参考：赵班长的 <a href="https://github.com/unixhot/waf" target="_blank" rel="noopener">https://github.com/unixhot/waf</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/unixhot/waf.git</span><br><span class="line">cp -a ./waf/waf /usr/local/openresty/nginx/conf/</span><br><span class="line"></span><br><span class="line">[root@local waf]# ls -lh /usr/local/openresty/nginx/conf/waf/</span><br><span class="line">total 20K</span><br><span class="line">-rw-r--r--. 1 root root  408 Sep 24 23:17 access.lua</span><br><span class="line">-rw-r--r--. 1 root root 1.3K Sep 24 23:17 config.lua</span><br><span class="line">-rw-r--r--. 1 root root 5.4K Sep 24 23:17 init.lua</span><br><span class="line">-rw-r--r--. 1 root root 2.3K Sep 24 23:17 lib.lua</span><br><span class="line">drwxr-xr-x. 2 root root  158 Sep 24 23:17 rule-config</span><br></pre></td></tr></table></figure><p>把WAF整合到Nginx中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat  /usr/local/openresty/nginx/conf/nginx.conf   </span><br><span class="line"><span class="meta">#</span><span class="bash">放到http区段，注意路径</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ......</span><br><span class="line">    #WAF</span><br><span class="line">    lua_shared_dict limit 50m;</span><br><span class="line">    lua_package_path "/usr/local/openresty/nginx/conf/waf/?.lua";</span><br><span class="line">    init_by_lua_file "/usr/local/openresty/nginx/conf/waf/init.lua";</span><br><span class="line">    access_by_lua_file "/usr/local/openresty/nginx/conf/waf/access.lua";</span><br><span class="line">    ......</span><br><span class="line">    include /usr/local/openresty/nginx/conf/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h5 id="五、WAF模块"><a href="#五、WAF模块" class="headerlink" title="五、WAF模块"></a>五、WAF模块</h5><p>waf安装好以后，不要直接上生产，而是先记录日志，不做任何动作。确定WAF不产生误杀。</p><ul><li><p>config.lua配置模块 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="built_in">pwd</span></span></span><br><span class="line">/usr/local/openresty/nginx/conf/waf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建waf日志目录</span></span><br><span class="line">mkdir /tmp/waf_logs</span><br><span class="line">chown -R www:www /tmp/waf_logs</span><br></pre></td></tr></table></figure><p>config.lua 配置文件说明</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--WAF config file,enable = "on",disable = "off"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--是否开启配置WAF</span></span><br><span class="line">config_waf_enable = <span class="string">"on"</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment">--waf log dir</span></span><br><span class="line">config_log_dir = <span class="string">"/tmp/waf_logs"</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">--rule setting</span></span><br><span class="line">config_rule_dir = <span class="string">"/usr/local/openresty/nginx/conf/waf/rule-config"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable white url 是否开启URL检测</span></span><br><span class="line">config_white_url_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable white ip  是否开启IP白名单检测</span></span><br><span class="line">config_white_ip_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable block ip  是否开启IP黑名单检测</span></span><br><span class="line">config_black_ip_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable url filtering 是否开启URL过滤</span></span><br><span class="line">config_url_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enalbe/disable url args filtering 是否开启参数检测</span></span><br><span class="line">config_url_args_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable user agent filtering 是否开启UA检测</span></span><br><span class="line">config_user_agent_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable cookie deny filtering 是否开启cookie检测</span></span><br><span class="line">config_cookie_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable cc filtering 是否开启防cc攻击</span></span><br><span class="line">config_cc_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--cc rate the xxx of xxx seconds 允许一个IP 60秒内只能访问10次</span></span><br><span class="line">config_cc_rate = <span class="string">"10/60"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--enable/disable post filtering 是否开启post检测</span></span><br><span class="line">config_post_check = <span class="string">"on"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--config waf output redirect/html action一个html页面，也可以选择跳转</span></span><br><span class="line">config_waf_output = <span class="string">"html"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--if config_waf_output ,setting url</span></span><br><span class="line">config_waf_redirect_url = <span class="string">"https://globtc.io"</span></span><br><span class="line">config_output_html=<span class="string">[[</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;</span></span><br><span class="line"><span class="string">&lt;meta http-equiv="Content-Language" content="zh-cn" /&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;FBI&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;h1 align="center"&gt;异常操作已被捕捉，请规范上网行为</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br><span class="line"><span class="string">]]</span></span><br></pre></td></tr></table></figure></li><li><p>access.lua 规则模块 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@local waf]# pwd</span><br><span class="line">/usr/local/openresty/nginx/conf/waf</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@local waf]# cat access.lua </span><br><span class="line">require 'init'</span><br><span class="line"></span><br><span class="line">function waf_main()</span><br><span class="line">    if white_ip_check() then</span><br><span class="line">    elseif black_ip_check() then</span><br><span class="line">    elseif user_agent_attack_check() then</span><br><span class="line">    elseif cc_attack_check() then</span><br><span class="line">    elseif cookie_attack_check() then</span><br><span class="line">    elseif white_url_check() then</span><br><span class="line">    elseif url_attack_check() then</span><br><span class="line">    elseif url_args_attack_check() then</span><br><span class="line">    --elseif post_attack_check() then</span><br><span class="line">    else</span><br><span class="line">        return</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">waf_main()</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">检测顺序：</span><br><span class="line">-- 先检查白名单，通过即不检测；再检查黑名单，不通过即拒绝;</span><br><span class="line">-- 检查UA，UA不通过即拒绝；</span><br><span class="line">-- 检查cookie；</span><br><span class="line">-- URL检查;</span><br><span class="line">-- URL参数检查;</span><br><span class="line">-- post检查；</span><br></pre></td></tr></table></figure></li></ul><h5 id="六、WAF功能验证"><a href="#六、WAF功能验证" class="headerlink" title="六、WAF功能验证"></a>六、WAF功能验证</h5><h6 id="①-模拟SQL注入"><a href="#①-模拟SQL注入" class="headerlink" title="① 模拟SQL注入"></a>① 模拟SQL注入</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost conf]# curl http://192.168.1.186/a.sql</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Language" content="zh-cn" /&gt;</span><br><span class="line">&lt;title&gt;FBI&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align="center"&gt;异常操作已被捕捉，请规范上网行为</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="②使用ab压测工具模拟防cc攻击-未测试"><a href="#②使用ab压测工具模拟防cc攻击-未测试" class="headerlink" title="②使用ab压测工具模拟防cc攻击[未测试]"></a>②使用ab压测工具模拟防cc攻击[未测试]</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y httpd-tools</span><br><span class="line">ab -c 500 -n 10000 http://192.168.1.186/index.php</span><br></pre></td></tr></table></figure><h6 id="③模拟IP黑名单"><a href="#③模拟IP黑名单" class="headerlink" title="③模拟IP黑名单"></a>③模拟IP黑名单</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "192.168.1.8" &gt;&gt;/usr/local/openresty/nginx/conf/waf/rule-config/blackip.rule</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# curl http://192.168.1.186/a.sql</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;403 Forbidden&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.11.2.5&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="④模拟IP白名单"><a href="#④模拟IP白名单" class="headerlink" title="④模拟IP白名单"></a>④模拟IP白名单</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">白名单即允许某个IP无限制访问，由于a.sql本身不存在，故访问时正常情况下返回404</span></span><br><span class="line">echo "192.168.1.8" &gt;&gt;/usr/local/openresty/nginx/conf/waf/rule-config/whiteip.rule</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]# curl http://192.168.1.186/a.sql</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body bgcolor="white"&gt;</span><br><span class="line">&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;&lt;center&gt;openresty/1.11.2.5&lt;/center&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="⑤模拟URL参数检测"><a href="#⑤模拟URL参数检测" class="headerlink" title="⑤模拟URL参数检测"></a>⑤模拟URL参数检测</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl http://192.168.1.186/?a=select * from table</span><br><span class="line">或</span><br><span class="line">curl http://192.168.1.186/?a=select%20*%20from%20table</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Type" content="text/html; charset=utf-8" /&gt;</span><br><span class="line">&lt;meta http-equiv="Content-Language" content="zh-cn" /&gt;</span><br><span class="line">&lt;title&gt;FBI&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1 align="center"&gt;异常操作已被捕捉，请规范上网行为</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注：URL请求规范 args.rule已有规范</p><p>cat /usr/local/openresty/nginx/conf/waf/rule-config/args.rule </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">\.\./</span><br><span class="line">\:\$</span><br><span class="line">\$\&#123;</span><br><span class="line">select.+(from|limit)</span><br><span class="line">(?:(union(.*?)select))</span><br><span class="line">having|rongjitest</span><br><span class="line">sleep\((\s*)(\d*)(\s*)\)</span><br><span class="line">benchmark\((.*)\,(.*)\)</span><br><span class="line">base64_decode\(</span><br><span class="line">(?:from\W+information_schema\W)</span><br><span class="line">(?:(?:current_)user|database|schema|connection_id)\s*\(</span><br><span class="line">(?:etc\/\W*passwd)</span><br><span class="line">into(\s+)+(?:dump|out)file\s*</span><br><span class="line">group\s+by.+\(</span><br><span class="line">xwork.MethodAccessor</span><br><span class="line">(?:define|eval|file_get_contents|include|require|require_once|shell_exec|phpinfo|system|passthru|preg_\w+|execute|echo|print|print_r|var_dump|(fp)open|alert|showmodaldialog)\(</span><br><span class="line">xwork\.MethodAccessor</span><br><span class="line">(gopher|doc|php|glob|file|phar|zlib|ftp|ldap|dict|ogg|data)\:\/</span><br><span class="line">java\.lang</span><br><span class="line">\$_(GET|post|cookie|files|session|env|phplib|GLOBALS|SERVER)\[</span><br><span class="line">\&lt;(iframe|script|body|img|layer|div|meta|style|base|object|input)</span><br><span class="line">(onmouseover|onerror|onload)\=</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、OpenResty概览&quot;&gt;&lt;a href=&quot;#一、OpenResty概览&quot; class=&quot;headerlink&quot; title=&quot;一、OpenResty概览&quot;&gt;&lt;/a&gt;一、OpenResty概览&lt;/h5&gt;&lt;p&gt;OpenResty是一个基于Lua扩展Nginx实现的可伸缩Web平台，其内部集成了大量精良的Lua库、第三方模块以及大多数依赖项。用于方便的部署能够处理超高并发、扩展性极高的动态Web应用。&lt;/p&gt;
&lt;p&gt;OpenResty的目标是让你的Web服务直接跑在Nginx服务内部，充分利用Nginx的非阻塞I/O模型，不仅仅对HTTP客户端请求，甚至于对后端诸如MySQL、PostgreSQL、Memcache以及Redis等都进行一致的高性能响应。&lt;/p&gt;
&lt;h5 id=&quot;二、安装依赖库&quot;&gt;&lt;a href=&quot;#二、安装依赖库&quot; class=&quot;headerlink&quot; title=&quot;二、安装依赖库&quot;&gt;&lt;/a&gt;二、安装依赖库&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装pcre依赖库&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://ftp.pcre.org/pub/pcre/pcre-8.43.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxf pcre-8.43.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd pcre-8.43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装zlib依赖库&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y zlib zlib-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装ssl依赖库&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y openssl openssl-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://garywu520.github.io/blog/tags/Nginx/"/>
    
      <category term="防火墙" scheme="https://garywu520.github.io/blog/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
      <category term="OpenResty" scheme="https://garywu520.github.io/blog/tags/OpenResty/"/>
    
      <category term="Lua" scheme="https://garywu520.github.io/blog/tags/Lua/"/>
    
      <category term="WAF" scheme="https://garywu520.github.io/blog/tags/WAF/"/>
    
      <category term="应用防火墙" scheme="https://garywu520.github.io/blog/tags/%E5%BA%94%E7%94%A8%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
      <category term="Iptables" scheme="https://garywu520.github.io/blog/tags/Iptables/"/>
    
  </entry>
  
  <entry>
    <title>清理linux系统过多innode</title>
    <link href="https://garywu520.github.io/blog/2019/10/12/%E6%B8%85%E7%90%86linux%E7%B3%BB%E7%BB%9F%E8%BF%87%E5%A4%9Ainnode/"/>
    <id>https://garywu520.github.io/blog/2019/10/12/清理linux系统过多innode/</id>
    <published>2019-10-12T02:41:32.000Z</published>
    <updated>2019-10-12T02:53:24.423Z</updated>
    
    <content type="html"><![CDATA[<p>zabbix告警提示系统：Free innodes is less than 20% on volume /</p><p>1.查看剩余innode信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -ih</span><br></pre></td></tr></table></figure><a id="more"></a><p>2.找到这些占用较大innode的无用文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从根开始遍历根目录</span></span><br><span class="line"> for i in /*; do echo $i; find $i |wc -l; done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">我这里找到了/var目录innodes占用较大，继续遍历</span></span><br><span class="line"> for i in /var/*; do echo $i; find $i |wc -l; done</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 这里显示/var/spool目录，继续找</span></span><br><span class="line"> for i in /var/spool/*; do echo $i; find $i |wc -l; done</span><br></pre></td></tr></table></figure><p>以此类推，最终找到了占用较大innode的目录是/var/spool/postfix/maildrop</p><p>3.原因</p><p>是因为maildrop目录下堆积了太多文件导致的。linux在执行cron时，会将cron执行脚本中的output和warning信息，都会以邮件的形式发送Cron所有者， 而由于环境中的sendmail和postfix没有正常运行，导致邮件发送不成功，全部小文件堆积在了maildrop目录下面，而且没有自动清理转换的机制，所以时间一长，此目录就堆积了大量文件。</p><p>4.清理maildrop目录文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd /var/spool/postfix/maildrop;  ls | xargs rm -rf</span><br></pre></td></tr></table></figure><p>5.预防后患</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/crontab</span><br><span class="line">将‘MAILTO=root’替换成‘MAILTO=""，然后service crond restart即可。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zabbix告警提示系统：Free innodes is less than 20% on volume /&lt;/p&gt;
&lt;p&gt;1.查看剩余innode信息&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;df -ih&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="zabbix" scheme="https://garywu520.github.io/blog/tags/zabbix/"/>
    
      <category term="innode" scheme="https://garywu520.github.io/blog/tags/innode/"/>
    
      <category term="spool" scheme="https://garywu520.github.io/blog/tags/spool/"/>
    
      <category term="maildrop" scheme="https://garywu520.github.io/blog/tags/maildrop/"/>
    
  </entry>
  
  <entry>
    <title>MySQL慢查询记录与分析</title>
    <link href="https://garywu520.github.io/blog/2019/10/11/MySQL%E6%85%A2%E6%9F%A5%E8%AF%A2%E8%AE%B0%E5%BD%95%E4%B8%8E%E5%88%86%E6%9E%90/"/>
    <id>https://garywu520.github.io/blog/2019/10/11/MySQL慢查询记录与分析/</id>
    <published>2019-10-11T08:13:48.000Z</published>
    <updated>2019-10-11T10:43:02.545Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、查看慢查询-配置"><a href="#一、查看慢查询-配置" class="headerlink" title="一、查看慢查询-配置"></a>一、查看慢查询-配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;slow_query%&apos;;</span><br><span class="line">mysql&gt; show variables like &apos;long_query_time&apos;;</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="二、配置慢查询"><a href="#二、配置慢查询" class="headerlink" title="二、配置慢查询"></a>二、配置慢查询</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#将 slow_query_log 全局变量设置为“ON”状态</span><br><span class="line">mysql&gt; set global slow_query_log=&apos;ON&apos;; </span><br><span class="line"></span><br><span class="line">#设置慢查询日志存放的位置</span><br><span class="line">mysql&gt; set global slow_query_log_file=&apos;/usr/local/mysql/data/slow.log&apos;;</span><br><span class="line"></span><br><span class="line">#查询超过1秒就记录</span><br><span class="line">mysql&gt; set global long_query_time=1;</span><br></pre></td></tr></table></figure><p>配置文件配置 cat /etc/my.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">slow_query_log = ON</span><br><span class="line">slow_query_log_file = /usr/local/mysql/data/slow.log</span><br><span class="line">long_query_time = 1</span><br></pre></td></tr></table></figure><h5 id="三、慢查询分析工具-报告"><a href="#三、慢查询分析工具-报告" class="headerlink" title="三、慢查询分析工具/报告"></a>三、慢查询分析工具/报告</h5><h5 id="1-Python脚本-不太好使，有报错"><a href="#1-Python脚本-不太好使，有报错" class="headerlink" title="1. Python脚本(不太好使，有报错)"></a>1. Python脚本(不太好使，有报错)</h5><p>项目Fork版地址：<a href="https://github.com/garywu520/Mysql-SlowLog-analysis" target="_blank" rel="noopener">https://github.com/garywu520/Mysql-SlowLog-analysis</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装依赖</span></span><br><span class="line">easy_install Jinja2 或 pip install Jinja2</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/kalivim/Mysql-SlowLog-analysis/master/analysis-slow-log.py</span><br><span class="line">chmod +x analysis-slow-log.py</span><br><span class="line">./analysis-slow-log.py Mysql_SlowLog_file general_json_filename report_name</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>Mysql_SlowLog_file      mysql慢查询日志的文件名</li><li>general_json_filename   脚本生成的json报告文件名</li><li>report_name            生成的Html报告文件名</li></ul><h5 id="2-pt-query-digest原生log分析"><a href="#2-pt-query-digest原生log分析" class="headerlink" title="2. pt-query-digest原生log分析"></a>2. pt-query-digest原生log分析</h5><p>编译安装percona-toolkit</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装依赖</span></span><br><span class="line">yum install *MakeMaker* mysql-libs  perl-TermReadKey perl-DBD-MySQL</span><br></pre></td></tr></table></figure><p>下载编译安装</p><p>Percona Toolkit 3.1.0: <a href="https://www.percona.com/downloads/percona-toolkit/LATEST/binary/" target="_blank" rel="noopener">官网下载地址</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf percona-toolkit-3.1.0_x86_64.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">编译安装</span></span><br><span class="line">cd percona-toolkit-3.1.0</span><br><span class="line">perl Makefile.PL</span><br><span class="line">make &amp;&amp; make test</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lh /usr/local/bin/pt-query-digest</span><br></pre></td></tr></table></figure><p>pt-query-digest使用</p><p>这里我们用到了这个文件 /usr/local/bin/pt-query-digest</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成json报告</span></span><br><span class="line">pt-query-digest --progress time,1 --output json mysql-slow.log</span><br></pre></td></tr></table></figure><p>参数释义：</p><p>​    – progress time,1   显示慢查询分析进度，没1s刷新一次</p><p>​    –output  分析结果输出类型, json, report , json-anon</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、查看慢查询-配置&quot;&gt;&lt;a href=&quot;#一、查看慢查询-配置&quot; class=&quot;headerlink&quot; title=&quot;一、查看慢查询-配置&quot;&gt;&lt;/a&gt;一、查看慢查询-配置&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; show variables like &amp;apos;slow_query%&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; show variables like &amp;apos;long_query_time&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://garywu520.github.io/blog/tags/MySQL/"/>
    
      <category term="慢查询" scheme="https://garywu520.github.io/blog/tags/%E6%85%A2%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="pt-query-digest" scheme="https://garywu520.github.io/blog/tags/pt-query-digest/"/>
    
      <category term="分析" scheme="https://garywu520.github.io/blog/tags/%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7 PHP安装mcrypt扩展</title>
    <link href="https://garywu520.github.io/blog/2019/09/29/CentOS7-PHP%E5%AE%89%E8%A3%85mcrypt%E6%89%A9%E5%B1%95/"/>
    <id>https://garywu520.github.io/blog/2019/09/29/CentOS7-PHP安装mcrypt扩展/</id>
    <published>2019-09-29T05:38:32.000Z</published>
    <updated>2019-09-29T05:43:25.343Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-下载对应PHP版本解压"><a href="#1-下载对应PHP版本解压" class="headerlink" title="1. 下载对应PHP版本解压"></a>1. 下载对应PHP版本解压</h5><ul><li>官网: <a href="http://www.php.net/releases/" target="_blank" rel="noopener">http://www.php.net/releases/</a></li><li>这里是php 5.4.16, 在官网搜索这个版本下载</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget http://museum.php.net/php5/php-5.4.16.tar.gz</span><br><span class="line">tar -zxvf php-5.4.16.tar.gz</span><br><span class="line">cd php-5.4.16/ext/mcrypt/</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@globtc-online mcrypt]# phpize</span><br><span class="line">Configuring for:</span><br><span class="line">PHP Api Version:         20100412</span><br><span class="line">Zend Module Api No:      20100525</span><br><span class="line">Zend Extension Api No:   220100525</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">whereis php-config</span><br><span class="line">./configure --with-php-config=/usr/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">出现如下内容，说明安装成功</span></span><br><span class="line">Installing shared extensions:     /usr/lib64/php/modules/</span><br></pre></td></tr></table></figure><h5 id="2-检查并配置扩展"><a href="#2-检查并配置扩展" class="headerlink" title="2. 检查并配置扩展"></a>2. 检查并配置扩展</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lh /usr/lib64/php/modules/mcrypt.so</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/etc/php.ini 添加如下行：</span></span><br><span class="line">extension=/usr/lib64/php/modules/mcrypt.so</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart php-fpm</span><br><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-下载对应PHP版本解压&quot;&gt;&lt;a href=&quot;#1-下载对应PHP版本解压&quot; class=&quot;headerlink&quot; title=&quot;1. 下载对应PHP版本解压&quot;&gt;&lt;/a&gt;1. 下载对应PHP版本解压&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;官网: &lt;a href=&quot;http://www.php.net/releases/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.php.net/releases/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;这里是php 5.4.16, 在官网搜索这个版本下载&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget http://museum.php.net/php5/php-5.4.16.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf php-5.4.16.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd php-5.4.16/ext/mcrypt/&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="PHP" scheme="https://garywu520.github.io/blog/tags/PHP/"/>
    
      <category term="mcrypt" scheme="https://garywu520.github.io/blog/tags/mcrypt/"/>
    
      <category term="extension" scheme="https://garywu520.github.io/blog/tags/extension/"/>
    
  </entry>
  
  <entry>
    <title>Redis RDB数据备份恢复流程</title>
    <link href="https://garywu520.github.io/blog/2019/09/25/Redis-RDB%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D%E6%B5%81%E7%A8%8B/"/>
    <id>https://garywu520.github.io/blog/2019/09/25/Redis-RDB数据备份恢复流程/</id>
    <published>2019-09-25T11:04:06.000Z</published>
    <updated>2019-09-25T11:06:20.930Z</updated>
    
    <content type="html"><![CDATA[<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul><li>appendonly为no，仅有RDB持久化</li><li>架构：Redis 一主两从+sentinel哨兵</li><li>Redis使用supervisor管理</li></ul><a id="more"></a><h5 id="正确的数据备份与恢复流程"><a href="#正确的数据备份与恢复流程" class="headerlink" title="正确的数据备份与恢复流程"></a>正确的数据备份与恢复流程</h5><h5 id="1-备份"><a href="#1-备份" class="headerlink" title="1. 备份"></a>1. 备份</h5><ul><li>找到当前的Master节点，执行SAVE命令将最新的key写入磁盘</li><li>拷贝备份文件[/usr/local/redis/data/dump.rdb]到/root/目录下</li></ul><h5 id="2-恢复"><a href="#2-恢复" class="headerlink" title="2. 恢复"></a>2. 恢复</h5><ul><li><p>supervisorctl stop所有节点的sentinel服务</p></li><li><p>supervisorctl stop 两个slave服务</p></li><li><p>redis主节点的supervisor redis配置文件 临时 注释以下两行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">autostart=<span class="literal">true</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">autorestart=<span class="literal">true</span></span></span><br></pre></td></tr></table></figure></li><li><p>优雅关闭Master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -c -h 192.168.1.168 -p 6380 -a "test123"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SHUTDOWN</span></span><br></pre></td></tr></table></figure></li><li><p>数据拷贝</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /root/dump.rdb /usr/local/redis/data/</span><br></pre></td></tr></table></figure></li><li><p>启动Master节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl start redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证导入的数据</span></span><br><span class="line">redis-cli -c -h 192.168.1.168 -p 6380 -a "test123"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> dbsize</span></span><br></pre></td></tr></table></figure></li><li><p>redis主节点取消supervisor redis配置文件的注释, 并重启master</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br></pre></td></tr></table></figure><p>supervisorctl restart redis</p></li><li><p>启动两个Slave</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl start redis</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证Slave从库同步</span></span><br><span class="line">登录redis slave </span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> dbsize</span></span><br></pre></td></tr></table></figure></li><li><p>启动三个节点的sentinel</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">supervisorctl start redis-sentinel</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;appendonly为no，仅有RDB持久化&lt;/li&gt;
&lt;li&gt;架构：Redis 一主两从+sentinel哨兵&lt;/li&gt;
&lt;li&gt;Redis使用supervisor管理&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://garywu520.github.io/blog/tags/Redis/"/>
    
      <category term="RDB" scheme="https://garywu520.github.io/blog/tags/RDB/"/>
    
      <category term="rdb备份恢复" scheme="https://garywu520.github.io/blog/tags/rdb%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本执行redis命令</title>
    <link href="https://garywu520.github.io/blog/2019/09/25/shell%E8%84%9A%E6%9C%AC%E6%89%A7%E8%A1%8Credis%E5%91%BD%E4%BB%A4/"/>
    <id>https://garywu520.github.io/blog/2019/09/25/shell脚本执行redis命令/</id>
    <published>2019-09-25T09:34:03.000Z</published>
    <updated>2019-09-25T09:44:16.704Z</updated>
    
    <content type="html"><![CDATA[<p>shell脚本中执行redis命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.1.186 -p 6380 -a test123 info</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "get old1" | redis-cli -h 192.168.1.186 -p 6380 -a test123</span><br></pre></td></tr></table></figure><p>参数释义：</p><ul><li>-a 指定redis密码</li><li>最后的”info” 则是想要执行的redis命令</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shell脚本中执行redis命令&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="redis" scheme="https://garywu520.github.io/blog/tags/redis/"/>
    
      <category term="shell" scheme="https://garywu520.github.io/blog/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装php redis扩展</title>
    <link href="https://garywu520.github.io/blog/2019/09/25/CentOS7%E5%AE%89%E8%A3%85php-redis%E6%89%A9%E5%B1%95/"/>
    <id>https://garywu520.github.io/blog/2019/09/25/CentOS7安装php-redis扩展/</id>
    <published>2019-09-25T07:00:56.000Z</published>
    <updated>2019-09-25T07:13:59.627Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、编译扩展"><a href="#一、编译扩展" class="headerlink" title="一、编译扩展"></a>一、编译扩展</h5><p>安装phpize</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y php-devel</span><br></pre></td></tr></table></figure><p>下载php redis包</p><p>Github项目地址：<a href="https://github.com/phpredis/phpredis/releases" target="_blank" rel="noopener">https://github.com/phpredis/phpredis/releases</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/phpredis/phpredis/archive/3.1.3.tar.gz</span><br><span class="line">tar -zxvf /root/3.1.3.tar.gz</span><br><span class="line">cd phpredis-3.1.3</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用如下命令，在源码目录中编译php扩展</span></span><br><span class="line">/usr/bin/phpize</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><a id="more"></a><p>由于我的操作系统是x64位，故编译完成后提示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Build complete.</span><br><span class="line">Don't forget to run 'make test'.</span><br><span class="line"></span><br><span class="line">Installing shared extensions:     /usr/lib64/php/modules/</span><br></pre></td></tr></table></figure><p>PHP Redis扩展位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -lh  /usr/lib64/php/modules/redis.so</span><br></pre></td></tr></table></figure><h5 id="二、修改php配置"><a href="#二、修改php配置" class="headerlink" title="二、修改php配置"></a>二、修改php配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/php.ini    #添加如下行</span><br><span class="line">extension=/usr/lib64/php/modules/redis.so</span><br></pre></td></tr></table></figure><h5 id="三、重启Apache服务-并测试"><a href="#三、重启Apache服务-并测试" class="headerlink" title="三、重启Apache服务, 并测试"></a>三、重启Apache服务, 并测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart httpd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、编译扩展&quot;&gt;&lt;a href=&quot;#一、编译扩展&quot; class=&quot;headerlink&quot; title=&quot;一、编译扩展&quot;&gt;&lt;/a&gt;一、编译扩展&lt;/h5&gt;&lt;p&gt;安装phpize&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y php-devel&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下载php redis包&lt;/p&gt;
&lt;p&gt;Github项目地址：&lt;a href=&quot;https://github.com/phpredis/phpredis/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/phpredis/phpredis/releases&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wget https://github.com/phpredis/phpredis/archive/3.1.3.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tar -zxvf /root/3.1.3.tar.gz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd phpredis-3.1.3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;使用如下命令，在源码目录中编译php扩展&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/bin/phpize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;./configure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;make &amp;amp;&amp;amp; make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="redis" scheme="https://garywu520.github.io/blog/tags/redis/"/>
    
      <category term="php" scheme="https://garywu520.github.io/blog/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>nmap端口扫描</title>
    <link href="https://garywu520.github.io/blog/2019/09/20/nmap%E7%AB%AF%E5%8F%A3%E6%89%AB%E6%8F%8F/"/>
    <id>https://garywu520.github.io/blog/2019/09/20/nmap端口扫描/</id>
    <published>2019-09-20T10:25:01.000Z</published>
    <updated>2019-09-20T10:25:58.246Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1.应用场景"></a>1.应用场景</h5><p>如果有台服务器，开放了一些端口，尤其是SSH端口，忘记设置了多少端口号的时候，又不想重启服务器，则需要对其进行端口扫描</p><h5 id="2-工具-nmap"><a href="#2-工具-nmap" class="headerlink" title="2. 工具: nmap"></a>2. 工具: nmap</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nmap</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="3-用法"><a href="#3-用法" class="headerlink" title="3. 用法"></a>3. 用法</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sS -p 1-65535 -v 服务器公网IP</span><br></pre></td></tr></table></figure><p>参数：</p><ul><li>-sS     TCP SYN扫描</li><li>-P     指定端口范围  </li><li>-V     详细信息  </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-应用场景&quot;&gt;&lt;a href=&quot;#1-应用场景&quot; class=&quot;headerlink&quot; title=&quot;1.应用场景&quot;&gt;&lt;/a&gt;1.应用场景&lt;/h5&gt;&lt;p&gt;如果有台服务器，开放了一些端口，尤其是SSH端口，忘记设置了多少端口号的时候，又不想重启服务器，则需要对其进行端口扫描&lt;/p&gt;
&lt;h5 id=&quot;2-工具-nmap&quot;&gt;&lt;a href=&quot;#2-工具-nmap&quot; class=&quot;headerlink&quot; title=&quot;2. 工具: nmap&quot;&gt;&lt;/a&gt;2. 工具: nmap&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y nmap&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nmap" scheme="https://garywu520.github.io/blog/tags/nmap/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从+sentinel哨兵-理论</title>
    <link href="https://garywu520.github.io/blog/2019/09/19/Redis%E4%B8%BB%E4%BB%8E-sentinel%E5%93%A8%E5%85%B5-%E7%90%86%E8%AE%BA/"/>
    <id>https://garywu520.github.io/blog/2019/09/19/Redis主从-sentinel哨兵-理论/</id>
    <published>2019-09-19T08:14:04.000Z</published>
    <updated>2019-09-19T09:44:00.383Z</updated>
    
    <content type="html"><![CDATA[<h4 id="一、目录"><a href="#一、目录" class="headerlink" title="一、目录"></a>一、目录</h4><ul><li><p>Redis内存回收策略</p></li><li><p>主从+哨兵模式核心知识点</p></li></ul><p>注：Redis主从+sentinel哨兵集群部署：<a href="https://garywu520.github.io/blog/2019/09/19/Redis%E4%B8%BB%E4%BB%8E-sentinel%E5%93%A8%E5%85%B5%E9%AB%98%E5%8F%AF%E7%94%A8/#more">参考</a></p><a id="more"></a><h4 id="二、关于Redis内存回收策略"><a href="#二、关于Redis内存回收策略" class="headerlink" title="二、关于Redis内存回收策略"></a>二、关于Redis内存回收策略</h4><p>Redis会因为内存不足而产生错误，也会因为回收过久而导致系统长期处于卡顿状态。当Redis的内存达到规定的最大值时，可以进行配置淘汰key, 并对key进行回收。</p><p>redis八大回收机制：</p><ul><li><p>noeviction[默认策略]</p><p>不淘汰任何键值对, 当内存满时，读操作(例如:get命令) 它将政策工作，而做写操作，它将返回错误。所以，当内存满时，redis就不能写了</p></li><li><p>volatile-lru: 采用最近最少的淘汰策略, Redis将回收那些超时的(仅仅是超时的)键值对。</p></li><li><p>allkeys-lru: 采用最近最少的淘汰策略，Redis将对所有的(不仅仅是超时的)键值对采用最近最少使用的淘汰策略</p></li><li><p>volatile-lfu: 采用最近最不常用的淘汰策略，也就是在一定时间内，被访问次数最少的(已超时)键值对将被回收。</p></li><li><p>allkeys-lfu: 采用最近最不常用的淘汰策略，Redis将对所有的键值对采用最近最不常用的淘汰策略。</p></li><li><p>volatile-random：采用随机淘汰策略删除超时的键值对。</p></li><li><p>allkeys-random：采用随机淘汰策略删除所有的键值对，这个策略不常用。</p></li><li><p>volatile-ttl：采用删除存活时间最短的键值对策略。</p></li></ul><p>注：LRU算法或者TTL算法都是不精确的算法，而是一个近似算法。</p><p>动态设置回收策略</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> config <span class="built_in">set</span> maxmemory 768mb    <span class="comment">#最大限制内存</span></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> config <span class="built_in">set</span> maxmemory-policy volatile-lru <span class="comment">#内存回收策略</span></span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> config rewrite  <span class="comment">#配置写入配置文件</span></span></span><br></pre></td></tr></table></figure><h4 id="三、主从-哨兵模式核心知识点"><a href="#三、主从-哨兵模式核心知识点" class="headerlink" title="三、主从+哨兵模式核心知识点"></a>三、主从+哨兵模式核心知识点</h4><h5 id="1-关于哨兵的介绍"><a href="#1-关于哨兵的介绍" class="headerlink" title="1. 关于哨兵的介绍"></a>1. 关于哨兵的介绍</h5><p>sentinel, 中文：哨兵，哨兵是redis重要的一个组件，具有以下功能</p><ul><li><p>集群监控: 负责监控redis master和slave进程是否正常工作</p></li><li><p>消息通知: 如果某个redis实例有故障,那么哨兵负责发送消息作为报警通知给管理员</p></li><li><p>故障转移：如果master node挂掉了，master功能会自动转移到slave node上</p></li><li><p>配置中心：如果故障转移发生了，通知client客户端新的master地址</p><p> 哨兵用于实现redis集群高可用，本身也是分布式的，作为一个哨兵集群去运行，互相协同工作。</p></li><li><p>故障转移时，判断一个master node是否宕机了，需要大部分的哨兵同意才行，涉及到了分布式选举的问题。</p></li><li><p>即使部分哨兵节点挂掉了，哨兵集群还是可以正常工作的。</p></li></ul><h5 id="2-哨兵的核心知识"><a href="#2-哨兵的核心知识" class="headerlink" title="2. 哨兵的核心知识"></a>2. 哨兵的核心知识</h5><ul><li><p>哨兵至少需要3个实例来保证自己的健壮性。</p></li><li><p>哨兵+redis主从的部署架构，是不保证数据零丢失的，只能保证redis集群的高可用性</p><p>哨兵sentinel主备切换导致的数据丢失问题</p></li></ul><h5 id="3-两种情况导致的数据丢失："><a href="#3-两种情况导致的数据丢失：" class="headerlink" title="3. 两种情况导致的数据丢失："></a>3. 两种情况导致的数据丢失：</h5><ul><li><ol><li>异步复制过程中导致的数据丢失</li></ol><p>因为master –&gt; slave的同步是异步的，所以有可能有部分数据还没复制到slave，master就down机了，此时这部分数据就丢失了。</p></li><li><ol><li>脑裂导致的数据丢失</li></ol><p>脑裂，也就是说某个master所在的机器突然脱离了网络，跟其他slave不能正常通信，但是实际上Master还运行着。此时哨兵会认为master已经宕机了，然后开始重新选举，将其他slave切换成了master。这个时候集群里出现了2个master。</p><p>如果某个slave被哨兵选举切换成了master，但是可能client还没来得及切换到新master，还会继续向旧master写数据。因此，旧master再次恢复的时候，会被作为一个slave挂到新的master上去，而自己的数据会被清空，重新从新的master复制数据。而新的master并没有后来client写入的数据，因此，这部分数据就丢失了</p></li></ul><p>数据丢失问题解决方案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">control data loss</span></span><br><span class="line">min-slaves-to-write 1</span><br><span class="line">min-slaves-max-lag 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">表示：至少有1个slave的数据复制和同步延迟不能超过10秒；如果所有的slave数据复制和延迟都超过了10秒，那么这个时候，master就不会再接受任何请求了。</span></span><br></pre></td></tr></table></figure><ul><li><p>减少异步复制数据丢失</p><p>min-slaves-max-lag这个参数，一旦slave复制数据和ack延时太长，就认为可能master宕机后损失的数据太多了，那么就拒绝写请求。从而把数据丢失降低到可控范围</p></li><li><p>减少脑裂的数据丢失</p><p>如果一个master出现了脑裂，跟其他slave断开了连接，如果不能给指定数量的slave发送数据，那么如果slave超过10秒没有给自己发送ack消息，则直接拒绝客户端的写请求。因此在脑裂环境下，最多就丢失10秒的数据。</p></li></ul><h5 id="3-关于sdown和odown转换机制"><a href="#3-关于sdown和odown转换机制" class="headerlink" title="3. 关于sdown和odown转换机制"></a>3. 关于sdown和odown转换机制</h5><p>哨兵如何去判断master是否宕机？</p><ul><li>sdown是主观宕机，就一个哨兵如果自己觉得master宕机了，那么就是主观宕机</li><li>odown是客观宕机，如果quorum数量的哨兵都认为一个master宕机了，那么就是客观宕机。</li></ul><p>sdown达成条件很简单，如果一个哨兵ping一个master, 超过了is-master-down-after-milliseconds指定的毫秒数之后，就主观认为master宕机了；</p><p>如果一个哨兵在指定的时间内，收到了quorum数量的其他哨兵也认为那个master是sdown的状态，那么就认为是odown</p><h5 id="4-哨兵集群的自动发现机制"><a href="#4-哨兵集群的自动发现机制" class="headerlink" title="4. 哨兵集群的自动发现机制"></a>4. 哨兵集群的自动发现机制</h5><p>哨兵互相之间的发现，是通过 redis 的 <code>pub/sub</code> 系统实现的，每个哨兵都会往 <code>__sentinel__:hello</code> 这个 channel 里发送一个消息，这时候所有其他哨兵都可以消费到这个消息，并感知到其他的哨兵的存在。</p><p>每隔两秒钟，每个哨兵都会往自己监控的某个 master+slaves 对应的 <code>__sentinel__:hello</code> channel 里<strong>发送一个消息</strong>，内容是自己的 host、ip 和 runid 还有对这个 master 的监控配置。</p><p>每个哨兵也会去<strong>监听</strong>自己监控的每个 master+slaves 对应的 <code>__sentinel__:hello</code> channel，然后去感知到同样在监听这个 master+slaves 的其他哨兵的存在。</p><p>每个哨兵还会跟其他哨兵交换对 <code>master</code> 的监控配置，互相进行监控配置的同步。</p><h5 id="5-Slave配置的自动纠正"><a href="#5-Slave配置的自动纠正" class="headerlink" title="5. Slave配置的自动纠正"></a>5. Slave配置的自动纠正</h5><p>哨兵会负责自动纠正 slave 的一些配置，比如 slave 如果要成为潜在的 master 候选人，哨兵会确保 slave 复制现有 master 的数据；如果 slave 连接到了一个错误的 master 上，比如故障转移之后，那么哨兵会确保它们连接到正确的 master 上。</p><h5 id="6-Slave-—-gt-Master选举算法"><a href="#6-Slave-—-gt-Master选举算法" class="headerlink" title="6. Slave —&gt; Master选举算法"></a>6. Slave —&gt; Master选举算法</h5><p>如果一个 master 被认为 odown 了，而且 majority 数量的哨兵都允许主备切换，那么某个哨兵就会执行主备切换操作，此时首先要选举一个 slave 来，会考虑 slave 的一些信息：</p><ul><li>跟 master 断开连接的时长</li><li>slave 优先级</li><li>复制 offset</li><li>run id</li></ul><p>如果一个 slave 跟 master 断开连接的时间已经超过了 <code>down-after-milliseconds</code> 的 10 倍，外加 master 宕机的时长，那么 slave 就被认为不适合选举为 master。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(down-after-milliseconds * 10) + milliseconds_since_master_is_in_SDOWN_state</span><br></pre></td></tr></table></figure><p>接下来会对 slave 进行排序：</p><ul><li>按照 slave 优先级进行排序，slave priority 越低，优先级就越高。</li><li>如果 slave priority 相同，那么看 replica offset，哪个 slave 复制了越多的数据，offset 越靠后，优先级就越高。</li><li>如果上面两个条件都相同，那么选择一个 run id 比较小的那个 slave。</li></ul><h5 id="7-quorum和majority"><a href="#7-quorum和majority" class="headerlink" title="7. quorum和majority"></a>7. quorum和majority</h5><p>每次一个哨兵要做主备切换，首先需要 quorum 数量的哨兵认为 odown，然后选举出一个哨兵来做切换，这个哨兵还需要得到 majority 哨兵的授权，才能正式执行切换。</p><p>如果 quorum &lt; majority，比如 5 个哨兵，majority 就是 3，quorum 设置为 2，那么就 3 个哨兵授权就可以执行切换。</p><p>但是如果 quorum &gt;= majority，那么必须 quorum 数量的哨兵都授权，比如 5 个哨兵，quorum 是 5，那么必须 5 个哨兵都同意授权，才能执行切换。</p><h5 id="8-configuration-epoch"><a href="#8-configuration-epoch" class="headerlink" title="8. configuration epoch"></a>8. configuration epoch</h5><p>哨兵会对一套 redis master+slaves 进行监控，有相应的监控的配置。</p><p>执行切换的那个哨兵，会从要切换到的新 master（salve-&gt;master）那里得到一个 configuration epoch，这就是一个 version 号，每次切换的 version 号都必须是唯一的。</p><p>如果第一个选举出的哨兵切换失败了，那么其他哨兵，会等待 failover-timeout 时间，然后接替继续执行切换，此时会重新获取一个新的 configuration epoch，作为新的 version 号。</p><h5 id="9-configuration传播"><a href="#9-configuration传播" class="headerlink" title="9. configuration传播"></a>9. configuration传播</h5><p>哨兵完成切换之后，会在自己本地更新生成最新的 master 配置，然后同步给其他的哨兵，就是通过之前说的 <code>pub/sub</code> 消息机制。</p><p>这里之前的 version 号就很重要了，因为各种消息都是通过一个 channel 去发布和监听的，所以一个哨兵完成一次新的切换之后，新的 master 配置是跟着新的 version 号的。其他的哨兵都是根据版本号的大小来更新自己的 master 配置的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;一、目录&quot;&gt;&lt;a href=&quot;#一、目录&quot; class=&quot;headerlink&quot; title=&quot;一、目录&quot;&gt;&lt;/a&gt;一、目录&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Redis内存回收策略&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主从+哨兵模式核心知识点&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：Redis主从+sentinel哨兵集群部署：&lt;a href=&quot;https://garywu520.github.io/blog/2019/09/19/Redis%E4%B8%BB%E4%BB%8E-sentinel%E5%93%A8%E5%85%B5%E9%AB%98%E5%8F%AF%E7%94%A8/#more&quot;&gt;参考&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="redis" scheme="https://garywu520.github.io/blog/tags/redis/"/>
    
      <category term="sentinel" scheme="https://garywu520.github.io/blog/tags/sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从+sentinel哨兵高可用</title>
    <link href="https://garywu520.github.io/blog/2019/09/19/Redis%E4%B8%BB%E4%BB%8E-sentinel%E5%93%A8%E5%85%B5%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    <id>https://garywu520.github.io/blog/2019/09/19/Redis主从-sentinel哨兵高可用/</id>
    <published>2019-09-19T07:50:02.000Z</published>
    <updated>2019-09-25T11:02:44.431Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h5><ul><li><p>基本环境</p><table><thead><tr><th align="center">软件</th><th align="center">版本</th></tr></thead><tbody><tr><td align="center">Redis</td><td align="center">5.0.5</td></tr><tr><td align="center">OS</td><td align="center">CentOS7</td></tr></tbody></table><a id="more"></a></li><li><p>集群环境</p><table><thead><tr><th align="center">角色</th><th align="center">IP</th><th align="center">端口</th></tr></thead><tbody><tr><td align="center">Master主节点1</td><td align="center">192.168.1.186</td><td align="center">6380</td></tr><tr><td align="center">sentinel-哨兵1</td><td align="center">192.168.1.186</td><td align="center">16380</td></tr><tr><td align="center">Slave从节点2</td><td align="center">192.168.1.168</td><td align="center">6380</td></tr><tr><td align="center">sentinel-哨兵2</td><td align="center">192.168.1.168</td><td align="center">16380</td></tr><tr><td align="center">Slave从节点3</td><td align="center">192.168.1.102</td><td align="center">6380</td></tr><tr><td align="center">sentinel-哨兵3</td><td align="center">192.168.1.102</td><td align="center">16380</td></tr><tr><td align="center">HA</td><td align="center">192.168.1.186</td><td align="center">26380</td></tr></tbody></table><p>注：为了哨兵集群的健壮性，哨兵的节点数量建议是≥3的奇数。</p><p>​      哨兵 + redis 主从的部署架构，是<strong>不保证数据零丢失</strong>的，只能保证 redis 集群的高可用性。</p><p>​     </p></li></ul><h5 id="二、安装Redis"><a href="#二、安装Redis" class="headerlink" title="二、安装Redis"></a>二、安装Redis</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc g++ gcc-c++ make tcl</span><br><span class="line">wget http://download.redis.io/releases/redis-5.0.5.tar.gz</span><br><span class="line">tar -zxvf redis-5.0.5.tar.gz</span><br><span class="line">cd redis-5.0.5</span><br><span class="line">make</span><br><span class="line">make PREFIX=/usr/local/redis install</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/redis/etc</span><br><span class="line">cp /root/redis-5.0.5/redis.conf /usr/local/redis/etc/</span><br><span class="line">cp /root/redis-5.0.5/sentinel.conf /usr/local/redis/etc/</span><br><span class="line">mkdir -p /var/log/redis  #创建日志目录</span><br><span class="line">mkdir -p /usr/local/redis/data  #创建数据存放目录</span><br></pre></td></tr></table></figure><h5 id="三、配置Redis主从复制"><a href="#三、配置Redis主从复制" class="headerlink" title="三、配置Redis主从复制"></a>三、配置Redis主从复制</h5><p>全节点优化</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo 2048 &gt; /proc/sys/net/core/somaxconn</span><br><span class="line"><span class="meta">#</span><span class="bash">在/etc/sysctl.conf中添加如下</span></span><br><span class="line">net.core.somaxconn = 2048</span><br><span class="line">vm.overcommit_memory = 1</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line">echo "echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled" &gt;&gt;/etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><h6 id="1-Master主节点1-哨兵"><a href="#1-Master主节点1-哨兵" class="headerlink" title="1.Master主节点1 + 哨兵"></a>1.Master主节点1 + 哨兵</h6><p>配置主redis - cat /usr/local/redis/etc/redis.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">port 6380</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">tcp-backlog 511</span><br><span class="line">bind 192.168.1.186 127.0.0.1</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">loglevel notice</span><br><span class="line">logfile "/var/log/redis/redis_6380.log"</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">appendonly no </span><br><span class="line">dir /usr/local/redis/data</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">maxclients 10000</span><br><span class="line">maxmemory 4gb</span><br><span class="line">requirepass test123</span><br><span class="line"><span class="meta">#</span><span class="bash">------优化------------<span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">内存回收策略</span></span><br><span class="line">maxmemory-policy volatile-lru</span><br><span class="line"><span class="meta">#</span><span class="bash">control data loss</span></span><br><span class="line">min-slaves-to-write 1</span><br><span class="line">min-slaves-max-lag 10</span><br><span class="line"><span class="meta">#</span><span class="bash">慢查询优化</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure><p>redis supervisor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/supervisord.d/redis.conf </span><br><span class="line">[program:redis]</span><br><span class="line">directory=/usr/local/redis</span><br><span class="line">command=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">stdout_logfile=/var/log/redis/redis_6380.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><p>配置sentinel集群 - cat /usr/local/redis/etc/sentinel.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">bind 192.168.1.186</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize no</span><br><span class="line">port 16380</span><br><span class="line">logfile "/var/log/redis/redis-sentinel.log"</span><br><span class="line">dir /usr/local/redis/data</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">表示配置sentinel去监视名为redis_master的主服务器，IP为192.168.1.198，端口是6379；最后一个数字表示只要有2个sentinel同意[共3个sentinel]就可以启动自动故障迁移。</span></span><br><span class="line">sentinel monitor redis_master 192.168.1.186 6380 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">表示如果10s内redis_master没PING响应或者返回一个错误，sentinel就把服务器标记为主观下线[简称: SDOWN]</span></span><br><span class="line">sentinel down-after-milliseconds redis_master 10000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在执行故障转移时， 最多可以有多少个从slave服务器同时对新的主服务器进行同步， 这个数字越小， 完成故障转移所需的时间就越长。</span></span><br><span class="line">sentinel parallel-syncs redis_master 1 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">sentinel哨兵连接主节点密码[需要与master密码一致]</span></span><br><span class="line">sentinel auth-pass redis_master test123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#表示如果15秒后,mysater仍没活过来，则启动failover，从剩下的slave中选一个升级为master</span></span></span><br><span class="line">sentinel failover-timeout redis_master 15000</span><br></pre></td></tr></table></figure><p>redis-sentinel supervisor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:redis-sentinel]</span><br><span class="line">directory=/usr/local/redis</span><br><span class="line">command=/usr/local/redis/bin/redis-sentinel /usr/local/redis/etc/sentinel.conf</span><br><span class="line">stdout_logfile=/var/log/redis/redis-sentinel.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><h6 id="2-部署Redis从节点2-哨兵"><a href="#2-部署Redis从节点2-哨兵" class="headerlink" title="2.部署Redis从节点2 + 哨兵"></a><strong>2.部署Redis从节点2</strong> + 哨兵</h6><p>配置从redis - cat /usr/local/redis/etc/redis.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">port 6380</span><br><span class="line">daemonize no</span><br><span class="line">protected-mode no</span><br><span class="line">pidfile /var/run/redis_6380.pid</span><br><span class="line">tcp-backlog 511</span><br><span class="line">bind 192.168.1.168 127.0.0.1</span><br><span class="line">timeout 0</span><br><span class="line">tcp-keepalive 300</span><br><span class="line">loglevel notice</span><br><span class="line">logfile "/var/log/redis/redis_6380.log"</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">appendonly no </span><br><span class="line">slaveof 192.168.1.186 6380</span><br><span class="line">dir /usr/local/redis/data</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">maxclients 10000</span><br><span class="line">maxmemory 4gb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从库添加master密码</span></span><br><span class="line">masterauth test123  </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从库自身认证密码[主从切换之后，依然使用密码认证]</span></span><br><span class="line">requirepass test123</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">------优化------------<span class="comment">#</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">内存回收策略</span></span><br><span class="line">maxmemory-policy volatile-lru</span><br><span class="line"><span class="meta">#</span><span class="bash">control data loss</span></span><br><span class="line">min-slaves-to-write 1</span><br><span class="line">min-slaves-max-lag 10</span><br><span class="line"><span class="meta">#</span><span class="bash">慢查询优化</span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line">slowlog-max-len 128</span><br></pre></td></tr></table></figure><p>supervisor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:redis]</span><br><span class="line">directory=/usr/local/redis</span><br><span class="line">command=/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis.conf</span><br><span class="line">stdout_logfile=/var/log/redis/redis_6379.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><p>配置sentinel集群 - cat /usr/local/redis/etc/sentinel.conf 只需修改Bind地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bind 192.168.1.168</span><br><span class="line">protected-mode no</span><br><span class="line">daemonize no</span><br><span class="line">port 16380</span><br><span class="line">logfile "/var/log/redis/redis-sentinel.log"</span><br><span class="line">dir /usr/local/redis/data</span><br><span class="line"></span><br><span class="line">sentinel monitor redis_master 192.168.1.186 6380 2</span><br><span class="line">sentinel down-after-milliseconds redis_master 10000</span><br><span class="line">sentinel parallel-syncs redis_master 1 </span><br><span class="line">sentinel auth-pass redis_master test123</span><br><span class="line">sentinel failover-timeout redis_master 15000</span><br></pre></td></tr></table></figure><p>redis-sentinel supervisor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:redis-sentinel]</span><br><span class="line">directory=/usr/local/redis</span><br><span class="line">command=/usr/local/redis/bin/redis-sentinel /usr/local/redis/etc/sentinel.conf</span><br><span class="line">stdout_logfile=/var/log/redis/redis-sentinel.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><h6 id="3-部署Redis从节点2-哨兵"><a href="#3-部署Redis从节点2-哨兵" class="headerlink" title="3.部署Redis从节点2 + 哨兵"></a>3.部署Redis从节点2 + 哨兵</h6><p>参考步骤2，注意修改bind地址</p><h4 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h4><h5 id="1-主从验证"><a href="#1-主从验证" class="headerlink" title="1. 主从验证"></a>1. 主从验证</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash">  info Replication      <span class="comment">#查看主节点状态</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Replication</span></span><br><span class="line">role:master</span><br><span class="line">connected_slaves:2</span><br><span class="line">slave0:ip=192.168.1.168,port=6380,state=online,offset=22520,lag=1</span><br><span class="line">slave1:ip=192.168.1.102,port=6380,state=online,offset=22520,lag=1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">redis&gt;  info Replication      #查看从节点状态</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.1.186</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br></pre></td></tr></table></figure><h5 id="2-哨兵-高可用验证"><a href="#2-哨兵-高可用验证" class="headerlink" title="2.  哨兵 高可用验证"></a>2.  哨兵 高可用验证</h5><ul><li><p>stop 主节点，观察sentinel哨兵日志</p></li><li><p>可以看到主从已经发生了转变</p><p>通过配置文件可以看到，原来的主节点，配置同步成了从节点</p></li></ul><p>注：redis共3个节点情况下，如果master宕机后，架构将会变化为：一个master和一个slave</p><h5 id="3-主库与从库key过期同步–测试"><a href="#3-主库与从库key过期同步–测试" class="headerlink" title="3. 主库与从库key过期同步–测试"></a>3. 主库与从库key过期同步–测试</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">主库创建测试key，并设置生效时间。当过期后，立即在从库get key测试</span></span><br><span class="line">192.168.1.198:6379&gt; set old 30</span><br><span class="line">OK</span><br><span class="line">192.168.1.198:6379&gt; get old</span><br><span class="line">"30"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置key 60秒过期</span></span><br><span class="line">192.168.1.198:6379&gt; EXPIRE old "60"   </span><br><span class="line">(integer) 1</span><br><span class="line">192.168.1.198:6379&gt; ttl old</span><br><span class="line">(integer) 56</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">此时，key已过期</span></span><br><span class="line">192.168.1.198:6379&gt; ttl old</span><br><span class="line">(integer) -2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从库获取key情况</span></span><br><span class="line">192.168.1.121:6379&gt; get old</span><br><span class="line">(nil)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">可以看到主库删除key，从库立即同步key, 不存在从库仍然可以读到过期key的情况</span></span><br></pre></td></tr></table></figure><h4 id="五、HA-Haproxy"><a href="#五、HA-Haproxy" class="headerlink" title="五、HA-Haproxy"></a>五、HA-Haproxy</h4><p>使用虚VIP，代理后端的Redis主从。并且通过TCP监控redis master，这样就能保证数据一定会写到redis master了，即便是后端主从发生了变化亦是如此</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum groupinstall -y "Development tools"</span><br><span class="line">wget https://www.haproxy.org/download/1.7/src/haproxy-1.7.7.tar.gz</span><br><span class="line">tar -zxvf haproxy-1.7.7.tar.gz</span><br><span class="line">cd haproxy-1.7.7</span><br><span class="line">make TARGET=linux2628  ARCH=X86_64 PREFIX=/usr/local/haproxy</span><br><span class="line">make install PREFIX=/usr/local/haproxy</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /sbin/nologin -M haproxy</span><br><span class="line">mkdir /etc/haproxy -p</span><br></pre></td></tr></table></figure><p>vim /etc/haproxy/haproxy.cfg</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    chroot /usr/local/haproxy</span><br><span class="line">    log 127.0.0.1 local3 info</span><br><span class="line">    maxconn 100000</span><br><span class="line">    nbproc 1</span><br><span class="line">    user haproxy</span><br><span class="line">    group haproxy</span><br><span class="line">    tune.bufsize  32768</span><br><span class="line">    pidfile /usr/local/haproxy/haproxy.pid</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode tcp </span><br><span class="line">    retries 3  </span><br><span class="line">    timeout connect 10s </span><br><span class="line">    timeout client 20s   </span><br><span class="line">    timeout server 30s   </span><br><span class="line">    timeout check 10s </span><br><span class="line"></span><br><span class="line">listen redis </span><br><span class="line">    bind 0.0.0.0:26380</span><br><span class="line">    mode tcp</span><br><span class="line">    log global</span><br><span class="line">    balance roundrobin </span><br><span class="line">    option tcp-check</span><br><span class="line">    tcp-check send AUTH\ test123\r\n    #指定Redis认证密码</span><br><span class="line">    tcp-check expect string +OK</span><br><span class="line">    tcp-check send PING\r\n</span><br><span class="line">    tcp-check expect string +PONG</span><br><span class="line">    tcp-check send info\ replication\r\n</span><br><span class="line">    tcp-check expect string role:master</span><br><span class="line">    tcp-check send QUIT\r\n</span><br><span class="line">    tcp-check expect string +OK</span><br><span class="line">    server R1 192.168.1.186:6380   check inter 5s</span><br><span class="line">    server R2 192.168.1.168:6380   check inter 5s</span><br><span class="line">    server R3 192.168.1.102:6380   check inter 5s</span><br></pre></td></tr></table></figure><p>启动测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br></pre></td></tr></table></figure><p>supervisor</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:haproxy]</span><br><span class="line">directory=/usr/local/haproxy</span><br><span class="line">command=/usr/local/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg </span><br><span class="line">stdout_logfile=/var/log/haproxy.log</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><h4 id="六、优化"><a href="#六、优化" class="headerlink" title="六、优化"></a>六、优化</h4><h5 id="1-在所有节点-内存回收机制优化"><a href="#1-在所有节点-内存回收机制优化" class="headerlink" title="1. [在所有节点] - 内存回收机制优化"></a>1. [在所有节点] - 内存回收机制优化</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> config <span class="built_in">set</span> maxmemory-policy volatile-lru</span></span><br><span class="line">"OK"</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> config rewrite</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">此内存回收策略是 最近使用最少的淘汰策略，Redis将回收清理那些超时的(仅仅是超时的)键值对。</span></span><br></pre></td></tr></table></figure><p>具体参考：<a href="https://www.jianshu.com/p/677930ffbff0" target="_blank" rel="noopener">https://www.jianshu.com/p/677930ffbff0</a></p><h5 id="2-哨兵sentinel主备切换导致的数据丢失问题"><a href="#2-哨兵sentinel主备切换导致的数据丢失问题" class="headerlink" title="2. 哨兵sentinel主备切换导致的数据丢失问题"></a>2. 哨兵sentinel主备切换导致的数据丢失问题</h5><p>两种情况导致的数据丢失：</p><ul><li><ol><li>异步复制过程中导致的数据丢失</li></ol><p>因为master –&gt; slave的同步是异步的，所以有可能有部分数据还没复制到slave，master就down机了，此时这部分数据就丢失了。</p></li></ul><ul><li><ol start="2"><li>脑裂导致的数据丢失</li></ol><p>脑裂，也就是说某个master所在的机器突然脱离了网络，跟其他slave不能正常通信，但是实际上Master还运行着。此时哨兵会认为master已经宕机了，然后开始重新选举，将其他slave切换成了master。这个时候集群里出现了2个master。</p><p>如果某个slave被哨兵选举切换成了master，但是可能client还没来得及切换到新master，还会继续向旧master写数据。因此，旧master再次恢复的时候，会被作为一个slave挂到新的master上去，而自己的数据会被清空，重新从新的master复制数据。而新的master并没有后来client写入的数据，因此，这部分数据就丢失了</p></li></ul><p>[所有节点]-数据丢失问题解决方案：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">control data loss</span></span><br><span class="line">min-slaves-to-write 1</span><br><span class="line">min-slaves-max-lag 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">表示：至少有1个slave的数据复制和同步延迟不能超过10秒；如果所有的slave数据复制和延迟都超过了10秒，那么这个时候，master就不会再接受任何请求了。</span></span><br></pre></td></tr></table></figure><ul><li><p>减少异步复制数据丢失</p><p>min-slaves-max-lag这个参数，一旦slave复制数据和ack延时太长，就认为可能master宕机后损失的数据太多了，那么就拒绝写请求。从而把数据丢失降低到可控范围</p></li><li><p>减少脑裂的数据丢失</p><p>如果一个master出现了脑裂，跟其他slave断开了连接，如果不能给指定数量的slave发送数据，那么如果slave超过10秒没有给自己发送ack消息，则直接拒绝客户端的写请求。因此在脑裂环境下，最多就丢失10秒的数据。</p></li></ul><h5 id="3-高并发环境ulimit优化-需要重启系统"><a href="#3-高并发环境ulimit优化-需要重启系统" class="headerlink" title="3. 高并发环境ulimit优化 [需要重启系统]"></a>3. 高并发环境ulimit优化 [需要重启系统]</h5><p>修改limit是限制： /etc/security/limits.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br></pre></td></tr></table></figure><p>修改file-max文件句柄数量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo 6553560 &gt; /proc/sys/fs/file-max</span><br><span class="line">并且</span><br><span class="line">修改 /etc/sysctl.conf, 加入</span><br><span class="line">fs.file-max = 6553560</span><br></pre></td></tr></table></figure><p>解除linux系统最大进程数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/security/limits.d/20-nproc.conf   #添加如下行：</span><br><span class="line">*          soft    nproc     10240</span><br><span class="line">root       soft    nproc     unlimited</span><br></pre></td></tr></table></figure><h4 id="七、haproxy验证"><a href="#七、haproxy验证" class="headerlink" title="七、haproxy验证"></a>七、haproxy验证</h4><ul><li><p>基本连接验证</p><p>redis-cli -h 192.168.1.186 -p 26380 -a “test123”</p></li><li><p>后端主从切换后，proxy连接验证</p></li><li><p>QPS压力测试</p><p>(1) 模拟10万次请求</p><p>​     redis-benchmark -h 192.168.1.186 -p 26380 -a test123 -n 100000 -q</p><p>(2) 模拟10万次访问10万key</p><p>​     redis-benchmark -h 192.168.1.186 -p 26380 -a test123 -n 100000 -r 100000 -q</p><p>(3) 模拟万级用户的并发请求</p><p>​     redis-benchmark -h 192.168.1.186 -p 26380 -a test123 -c 10000 -n 100000 -r 100000 -q</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、环境&quot;&gt;&lt;a href=&quot;#一、环境&quot; class=&quot;headerlink&quot; title=&quot;一、环境&quot;&gt;&lt;/a&gt;一、环境&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;基本环境&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;软件&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;版本&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Redis&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;5.0.5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;OS&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;CentOS7&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="redis" scheme="https://garywu520.github.io/blog/tags/redis/"/>
    
      <category term="sentinel" scheme="https://garywu520.github.io/blog/tags/sentinel/"/>
    
      <category term="redis主从" scheme="https://garywu520.github.io/blog/tags/redis%E4%B8%BB%E4%BB%8E/"/>
    
      <category term="haproxy" scheme="https://garywu520.github.io/blog/tags/haproxy/"/>
    
  </entry>
  
  <entry>
    <title>redis key过期时间</title>
    <link href="https://garywu520.github.io/blog/2019/09/17/redis-key%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    <id>https://garywu520.github.io/blog/2019/09/17/redis-key过期时间/</id>
    <published>2019-09-17T06:50:44.000Z</published>
    <updated>2019-09-17T07:19:05.391Z</updated>
    
    <content type="html"><![CDATA[<p>有时候我们并不希望redis的key一直存在。例如缓存，验证码等数据，我们希望它们能在一定时间内自动的被销毁。redis提供了一些命令，能够让我们对key设置过期时间，并且让key过期之后被自动删除。</p><h5 id="一、设置-更新Key过期时间"><a href="#一、设置-更新Key过期时间" class="headerlink" title="一、设置/更新Key过期时间"></a>一、设置/更新Key过期时间</h5><ul><li><p>秒级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXPIRE keyname <span class="string">"seconds"</span></span></span><br><span class="line"></span><br><span class="line">接口描述：设置一个key在当前时间"seconds"(秒)之后过期。返回1代表设置成功，返回0代表key不存在或者无法设置过期时间。</span><br></pre></td></tr></table></figure></li><li><p>毫秒级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PEXPIRE keyname <span class="string">"milliseconds"</span></span></span><br><span class="line"></span><br><span class="line">接口描述：设置一个key在当前时间"milliseconds"(毫秒)之后过期。返回1代表设置成功，返回0代表key不存在或者无法设置过期时间。</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h5 id="二、获取Key过期时间"><a href="#二、获取Key过期时间" class="headerlink" title="二、获取Key过期时间"></a>二、获取Key过期时间</h5><ul><li><p>秒级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> TTL keyname</span></span><br><span class="line"></span><br><span class="line">接口描述：获取key的过期时间。如果key存在过期时间，返回剩余生存时间(秒)；</span><br><span class="line">如果key是永久的，返回-1；如果key不存在或者已过期，返回-2。</span><br></pre></td></tr></table></figure></li><li><p>毫秒级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PTTL keyname</span></span><br><span class="line"></span><br><span class="line">接口描述：获取key的过期时间。如果key存在过期时间，返回剩余生存时间(毫秒)；</span><br><span class="line">如果key是永久的，返回-1；如果key不存在或者已过期，返回-2。</span><br></pre></td></tr></table></figure></li></ul><h5 id="三、移除Key的过期时间"><a href="#三、移除Key的过期时间" class="headerlink" title="三、移除Key的过期时间"></a>三、移除Key的过期时间</h5><ul><li><p>移除key的过期时间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> PERSIST key</span></span><br><span class="line"></span><br><span class="line">移除key的过期时间，将其转换为永久状态。如果返回1，代表转换成功。如果返回0，代表key不存在或者之前就已经是永久状态。</span><br></pre></td></tr></table></figure></li></ul><h5 id="四、将Key的值设为value，并将key的生存时间设置为seconds秒"><a href="#四、将Key的值设为value，并将key的生存时间设置为seconds秒" class="headerlink" title="四、将Key的值设为value，并将key的生存时间设置为seconds秒"></a>四、将Key的值设为value，并将key的生存时间设置为seconds秒</h5><ul><li><p>将Key的值设为value，并将key的生存时间设置为seconds秒</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SETEX keyname &lt;过期时间&gt; &lt;value&gt;</span></span><br><span class="line"></span><br><span class="line">将键 key 的值设置为 value ， 并将键 key 的生存时间设置为 seconds 秒钟。</span><br><span class="line">如果键 key 已经存在， 那么 SETEX 命令将覆盖已有的值。</span><br></pre></td></tr></table></figure><p>等同于如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SET key value</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> EXPIRE key seconds</span></span><br></pre></td></tr></table></figure></li><li><p>SETEX示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash"> SETEX cache_user_id 60 10086</span></span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> GET cache_user_id   <span class="comment">#值</span></span></span><br><span class="line">"10086"</span><br><span class="line"></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> TTL cache_user_id   <span class="comment">#剩余生存时间</span></span></span><br><span class="line">(integer) 49</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有时候我们并不希望redis的key一直存在。例如缓存，验证码等数据，我们希望它们能在一定时间内自动的被销毁。redis提供了一些命令，能够让我们对key设置过期时间，并且让key过期之后被自动删除。&lt;/p&gt;
&lt;h5 id=&quot;一、设置-更新Key过期时间&quot;&gt;&lt;a href=&quot;#一、设置-更新Key过期时间&quot; class=&quot;headerlink&quot; title=&quot;一、设置/更新Key过期时间&quot;&gt;&lt;/a&gt;一、设置/更新Key过期时间&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;秒级&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;redis&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; EXPIRE keyname &lt;span class=&quot;string&quot;&gt;&quot;seconds&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;接口描述：设置一个key在当前时间&quot;seconds&quot;(秒)之后过期。返回1代表设置成功，返回0代表key不存在或者无法设置过期时间。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;毫秒级&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;redis&amp;gt;&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; PEXPIRE keyname &lt;span class=&quot;string&quot;&gt;&quot;milliseconds&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;接口描述：设置一个key在当前时间&quot;milliseconds&quot;(毫秒)之后过期。返回1代表设置成功，返回0代表key不存在或者无法设置过期时间。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="redis" scheme="https://garywu520.github.io/blog/tags/redis/"/>
    
      <category term="expire" scheme="https://garywu520.github.io/blog/tags/expire/"/>
    
      <category term="过期时间" scheme="https://garywu520.github.io/blog/tags/%E8%BF%87%E6%9C%9F%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>redis 参数动态配置</title>
    <link href="https://garywu520.github.io/blog/2019/09/16/redis-%E5%8F%82%E6%95%B0%E5%8A%A8%E6%80%81%E9%85%8D%E7%BD%AE/"/>
    <id>https://garywu520.github.io/blog/2019/09/16/redis-参数动态配置/</id>
    <published>2019-09-16T06:51:33.000Z</published>
    <updated>2019-09-16T06:53:11.081Z</updated>
    
    <content type="html"><![CDATA[<p>redis提供了CONFIG SET 动态配置命令，部分参数支持配置热修改而无需重启redis服务。</p><h5 id="1-redis动态修改配置"><a href="#1-redis动态修改配置" class="headerlink" title="1. redis动态修改配置"></a>1. redis动态修改配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有支持动态配置的参数</span><br><span class="line">127.0.0.1:6379&gt; config get *</span><br><span class="line">  1) &quot;dbfilename&quot;</span><br><span class="line">  2) &quot;dump.rdb&quot;</span><br><span class="line">     ......</span><br><span class="line">     ......</span><br><span class="line">213) &quot;bind&quot;</span><br><span class="line">214) &quot;127.0.0.1&quot;</span><br></pre></td></tr></table></figure><a id="more"></a><p>使用CONFIG SET 动态配置示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get appendonly   #查看当前设置</span><br><span class="line">1) &quot;appendonly&quot;</span><br><span class="line">2) &quot;no&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; config set appendonly yes  #修改设置(立刻生效)</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; config get appendonly   #查看当前设置</span><br><span class="line">1) &quot;appendonly&quot;</span><br><span class="line">2) &quot;yes&quot;</span><br><span class="line">127.0.0.1:6379&gt; config rewrite  #保存到配置文件</span><br><span class="line">ok</span><br></pre></td></tr></table></figure><p>注：如果 执行config rewrite命令出现ERR CONFIG REWRITE failed: Permission denied错误，则说明redis启动的时候没有指定redis.conf文件</p><h5 id="2-其他：动态更新监听地址-bind参数配置"><a href="#2-其他：动态更新监听地址-bind参数配置" class="headerlink" title="2. 其他：动态更新监听地址-bind参数配置"></a>2. 其他：动态更新监听地址-bind参数配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set bind &quot;127.0.0.1 11.12.13.14&quot;</span><br><span class="line">(error) ERR Unsupported CONFIG parameter: bind</span><br></pre></td></tr></table></figure><p>出现上面的错误 是因为并不是所有配置都可以在线修改，比如pidfile，port, 以及bind 这些参数是不允许修改的</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;redis提供了CONFIG SET 动态配置命令，部分参数支持配置热修改而无需重启redis服务。&lt;/p&gt;
&lt;h5 id=&quot;1-redis动态修改配置&quot;&gt;&lt;a href=&quot;#1-redis动态修改配置&quot; class=&quot;headerlink&quot; title=&quot;1. redis动态修改配置&quot;&gt;&lt;/a&gt;1. redis动态修改配置&lt;/h5&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# 列出所有支持动态配置的参数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127.0.0.1:6379&amp;gt; config get *&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1) &amp;quot;dbfilename&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  2) &amp;quot;dump.rdb&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     ......&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213) &amp;quot;bind&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214) &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="redis" scheme="https://garywu520.github.io/blog/tags/redis/"/>
    
      <category term="CONFIG" scheme="https://garywu520.github.io/blog/tags/CONFIG/"/>
    
  </entry>
  
  <entry>
    <title>SFTP上传下载命令</title>
    <link href="https://garywu520.github.io/blog/2019/09/10/SFTP%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD%E5%91%BD%E4%BB%A4/"/>
    <id>https://garywu520.github.io/blog/2019/09/10/SFTP上传下载命令/</id>
    <published>2019-09-10T08:20:36.000Z</published>
    <updated>2019-09-10T08:34:55.169Z</updated>
    
    <content type="html"><![CDATA[<p>SFTP顾名思义，即它是基于SSH的上传与下载功能。它是lrzsz之外的另一选择。不需要服务器部署FTP服务</p><p>Mac端由于无法使用lrzsz，故SFTP是个不错的选择</p><a id="more"></a><h5 id="1-ssh配置文件"><a href="#1-ssh配置文件" class="headerlink" title="1. ssh配置文件"></a>1. ssh配置文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Port 22</span><br><span class="line">Protocol 2</span><br><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br><span class="line">PasswordAuthentication no</span><br><span class="line">PermitEmptyPasswords no</span><br><span class="line">UsePAM  yes</span><br><span class="line">PrintMotd no</span><br><span class="line">PrintLastLog no</span><br><span class="line">UseDNS no</span><br><span class="line">Subsystem   sftp  /usr/libexec/openssh/sftp-server </span><br><span class="line"></span><br><span class="line">ListenAddress 0.0.0.0:22</span><br><span class="line">ListenAddress xx.xx.xx.xx:22</span><br></pre></td></tr></table></figure><p>注：需要确保 sftp配置的/usr/libexec/openssh/sftp-server 文件是存在的，重启sshd服务</p><h5 id="2-Xshell连接SFTP"><a href="#2-Xshell连接SFTP" class="headerlink" title="2.  Xshell连接SFTP"></a>2.  Xshell连接SFTP</h5><p>​    连接需要指定密钥</p><h5 id="3-上传与下载"><a href="#3-上传与下载" class="headerlink" title="3. 上传与下载"></a>3. 上传与下载</h5><ul><li><p>单个文件下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> get remote-file [<span class="built_in">local</span>-file]</span></span><br></pre></td></tr></table></figure></li><li><p>单个文件上传</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> put </span></span><br><span class="line">打开本地目录选择文件后上传</span><br></pre></td></tr></table></figure></li><li><p>中断连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> <span class="built_in">bye</span></span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SFTP顾名思义，即它是基于SSH的上传与下载功能。它是lrzsz之外的另一选择。不需要服务器部署FTP服务&lt;/p&gt;
&lt;p&gt;Mac端由于无法使用lrzsz，故SFTP是个不错的选择&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="sftp" scheme="https://garywu520.github.io/blog/tags/sftp/"/>
    
      <category term="lrzsz" scheme="https://garywu520.github.io/blog/tags/lrzsz/"/>
    
      <category term="mac" scheme="https://garywu520.github.io/blog/tags/mac/"/>
    
      <category term="上传下载" scheme="https://garywu520.github.io/blog/tags/%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>xshell ssh连接错误10053</title>
    <link href="https://garywu520.github.io/blog/2019/08/29/xshell-ssh%E8%BF%9E%E6%8E%A5%E9%94%99%E8%AF%AF10053/"/>
    <id>https://garywu520.github.io/blog/2019/08/29/xshell-ssh连接错误10053/</id>
    <published>2019-08-29T12:40:46.000Z</published>
    <updated>2019-08-29T12:43:09.176Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Socket error Event: 32 Error: 10053.</span><br><span class="line">Connection closing...Socket close</span><br></pre></td></tr></table></figure><h5 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 很有可能有人恶意将系统根目录或部分核心目录修改了777权限,导致服务器登录异常</span></span><br><span class="line">history |grep 777</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>恢复SSH登录相关文件权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 400 /etc/ssh/*</span><br><span class="line">chmod 640  /etc/ssh/*.pub</span><br><span class="line">chown 600  /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart sshd</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;Error&quot;&gt;&lt;a href=&quot;#Error&quot; class=&quot;headerlink&quot; title=&quot;Error&quot;&gt;&lt;/a&gt;Error&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Socket error Event: 32 Error: 10053.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Connection closing...Socket close&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 很有可能有人恶意将系统根目录或部分核心目录修改了777权限,导致服务器登录异常&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;history |grep 777&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="ssh" scheme="https://garywu520.github.io/blog/tags/ssh/"/>
    
      <category term="xshell" scheme="https://garywu520.github.io/blog/tags/xshell/"/>
    
      <category term="10053" scheme="https://garywu520.github.io/blog/tags/10053/"/>
    
  </entry>
  
</feed>
