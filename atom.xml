<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Gary Wu</title>
  
  <subtitle>运维架构师 - 从入门到放弃</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://garywu520.github.io/blog/"/>
  <updated>2019-12-16T07:01:48.864Z</updated>
  <id>https://garywu520.github.io/blog/</id>
  
  <author>
    <name>Gary Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker目录映射问题</title>
    <link href="https://garywu520.github.io/blog/2019/12/16/docker%E7%9B%AE%E5%BD%95%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98/"/>
    <id>https://garywu520.github.io/blog/2019/12/16/docker目录映射问题/</id>
    <published>2019-12-16T06:52:37.000Z</published>
    <updated>2019-12-16T07:01:48.864Z</updated>
    
    <content type="html"><![CDATA[<p>假设我们写了一个Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">From centos:centos7.7.1908</span><br><span class="line"></span><br><span class="line">RUN mkdir /etc/trojan</span><br><span class="line">ADD ./trojan/ /etc/trojan</span><br><span class="line">RUN chmod +x /etc/trojan/trojan</span><br><span class="line">EXPOSE 1080</span><br><span class="line">ENTRYPOINT  ["/etc/trojan/trojan","-c","/etc/trojan/client.json"]</span><br></pre></td></tr></table></figure><p>可以看到，容器程序的工作目录在/etc/trojan目录</p><p>当打包完镜像，准备运行容器的过程中，如果映射目录 -v /etc/trojan:/etc/trojan ，启动容器会报Dockerfile最后一条启动命令不存在或找不到启动命令文件的错误。具体原因不详，不过我们可以很快的解决它</p><a id="more"></a><p>目录映射的目的是便于与宿主机进行文件共享，或者是替换容器配置，重载服务。</p><p>解决方法是映射一个 非启动文件所在的目录即可，如: -v  /opt/trojan:/opt/trojan</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如：</span></span><br><span class="line">docker run --privileged=true -v /opt/trojan:/opt/trojan -p 1080:1080 --name trojan -d trojan:v2</span><br></pre></td></tr></table></figure><p><strong>注：–privileged=true 参数是解决映射目录带来的访问权限问题，最好后面紧跟 -v参数</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设我们写了一个Dockerfile&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;From centos:centos7.7.1908&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN mkdir /etc/trojan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ADD ./trojan/ /etc/trojan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN chmod +x /etc/trojan/trojan&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXPOSE 1080&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ENTRYPOINT  [&quot;/etc/trojan/trojan&quot;,&quot;-c&quot;,&quot;/etc/trojan/client.json&quot;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，容器程序的工作目录在/etc/trojan目录&lt;/p&gt;
&lt;p&gt;当打包完镜像，准备运行容器的过程中，如果映射目录 -v /etc/trojan:/etc/trojan ，启动容器会报Dockerfile最后一条启动命令不存在或找不到启动命令文件的错误。具体原因不详，不过我们可以很快的解决它&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>给zookeeper添加ACL基本认证</title>
    <link href="https://garywu520.github.io/blog/2019/12/12/%E7%BB%99zookeeper%E6%B7%BB%E5%8A%A0%E5%9F%BA%E6%9C%AC%E8%AE%A4%E8%AF%81/"/>
    <id>https://garywu520.github.io/blog/2019/12/12/给zookeeper添加基本认证/</id>
    <published>2019-12-12T08:58:01.000Z</published>
    <updated>2019-12-12T09:15:19.858Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>添加一个认证用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">密码为明文</span></span><br><span class="line">addauth digest user1:'password1'</span><br></pre></td></tr></table></figure></li><li><p>设置权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setAcl / auth:user1:password1:cdrwa</span><br></pre></td></tr></table></figure></li><li><p>查看ACL设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getAcl /path</span><br></pre></td></tr></table></figure><a id="more"></a></li><li><p>连接示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> zkCli.sh -server 127.0.0.1:12181</span></span><br><span class="line">[zk: 127.0.0.1:12181(CONNECTED) 1] ls /</span><br><span class="line">Authentication is not valid : /</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash">[zk: 127.0.0.1:12181(CONNECTED) 2] getAcl /</span></span><br><span class="line">'digest,'user1:xuyC7ITdZYcNgdrRrz+l5XtaUog=</span><br><span class="line">: cdrwa</span><br><span class="line">[zk: 127.0.0.1:12181(CONNECTED) 3] addauth digest zhaiwei:'xxxxxx'</span><br><span class="line"></span><br><span class="line">[zk: 127.0.0.1:12181(CONNECTED) 4] ls /</span><br><span class="line">[zookeeper]</span><br></pre></td></tr></table></figure><p>参考：<a href="https://cloud.tencent.com/developer/article/1047819" target="_blank" rel="noopener">阿里云社区</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;&lt;p&gt;添加一个认证用户&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;密码为明文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;addauth digest user1:&#39;password1&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置权限&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setAcl / auth:user1:password1:cdrwa&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看ACL设置&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;getAcl /path&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="zookeeper" scheme="https://garywu520.github.io/blog/tags/zookeeper/"/>
    
      <category term="zk" scheme="https://garywu520.github.io/blog/tags/zk/"/>
    
      <category term="ACL" scheme="https://garywu520.github.io/blog/tags/ACL/"/>
    
  </entry>
  
  <entry>
    <title>使用阿里云免费的Docker私有仓库</title>
    <link href="https://garywu520.github.io/blog/2019/12/11/%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91%E5%85%8D%E8%B4%B9%E7%9A%84Docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93/"/>
    <id>https://garywu520.github.io/blog/2019/12/11/使用阿里云免费的Docker私有仓库/</id>
    <published>2019-12-11T07:30:13.000Z</published>
    <updated>2019-12-11T07:34:06.901Z</updated>
    
    <content type="html"><![CDATA[<p>貌似只要购买了ECC云服务器，就可以免费开通这个服务。</p><h5 id="1-访问-阿里云容器镜像服务"><a href="#1-访问-阿里云容器镜像服务" class="headerlink" title="1. 访问 阿里云容器镜像服务"></a>1. 访问 阿里云容器镜像服务</h5><p>链接：<a href="https://cr.console.aliyun.com/cn-hongkong/instances/repositories" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hongkong/instances/repositories</a></p><p>首先要设置一个叫做Registry密码，这个密码用来推送/拉取Docker镜像使用</p><h5 id="2-创建私有镜像仓库"><a href="#2-创建私有镜像仓库" class="headerlink" title="2. 创建私有镜像仓库"></a>2. 创建私有镜像仓库</h5><p>默认实例 —&gt; 镜像仓库 —&gt; 创建镜像仓库</p><p>可以选择镜像仓库的地域，这里开通的是香港节点的私有仓库</p><a id="more"></a><h5 id="3-推送本地Docker镜像到阿里云私有仓库"><a href="#3-推送本地Docker镜像到阿里云私有仓库" class="headerlink" title="3. 推送本地Docker镜像到阿里云私有仓库"></a>3. 推送本地Docker镜像到阿里云私有仓库</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">登录阿里云Docker Registry[按照提示输入Registry密码]</span></span><br><span class="line">docker login --username=xxxxxx@1009xxx8864439 registry.cn-hongkong.aliyuncs.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置镜像Tag</span></span><br><span class="line">sudo docker tag [Image Id] registry.cn-hongkong.aliyuncs.com/qst_images/qst_store:[镜像名_版本号]</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">推送镜像</span></span><br><span class="line">docker push registry.cn-hongkong.aliyuncs.com/qst_images/qst_store:[镜像名_版本号]</span><br></pre></td></tr></table></figure><h5 id="4-拉取阿里云私有仓库镜像"><a href="#4-拉取阿里云私有仓库镜像" class="headerlink" title="4. 拉取阿里云私有仓库镜像"></a>4. 拉取阿里云私有仓库镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">登录阿里云Docker Registry</span></span><br><span class="line">docker login --username=--username=xxxxxx@1009xxx8864439 registry.cn-hongkong.aliyuncs.com</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取镜像</span></span><br><span class="line">docker pull registry.cn-hongkong.aliyuncs.com/qst_images/qst_store:[镜像名_版本号]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;貌似只要购买了ECC云服务器，就可以免费开通这个服务。&lt;/p&gt;
&lt;h5 id=&quot;1-访问-阿里云容器镜像服务&quot;&gt;&lt;a href=&quot;#1-访问-阿里云容器镜像服务&quot; class=&quot;headerlink&quot; title=&quot;1. 访问 阿里云容器镜像服务&quot;&gt;&lt;/a&gt;1. 访问 阿里云容器镜像服务&lt;/h5&gt;&lt;p&gt;链接：&lt;a href=&quot;https://cr.console.aliyun.com/cn-hongkong/instances/repositories&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://cr.console.aliyun.com/cn-hongkong/instances/repositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;首先要设置一个叫做Registry密码，这个密码用来推送/拉取Docker镜像使用&lt;/p&gt;
&lt;h5 id=&quot;2-创建私有镜像仓库&quot;&gt;&lt;a href=&quot;#2-创建私有镜像仓库&quot; class=&quot;headerlink&quot; title=&quot;2. 创建私有镜像仓库&quot;&gt;&lt;/a&gt;2. 创建私有镜像仓库&lt;/h5&gt;&lt;p&gt;默认实例 —&amp;gt; 镜像仓库 —&amp;gt; 创建镜像仓库&lt;/p&gt;
&lt;p&gt;可以选择镜像仓库的地域，这里开通的是香港节点的私有仓库&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://garywu520.github.io/blog/tags/Docker/"/>
    
      <category term="阿里云" scheme="https://garywu520.github.io/blog/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
      <category term="镜像仓库" scheme="https://garywu520.github.io/blog/tags/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Maven私服部署-Docker安装nexus3</title>
    <link href="https://garywu520.github.io/blog/2019/12/10/Maven%E7%A7%81%E6%9C%8D%E9%83%A8%E7%BD%B2-Docker%E5%AE%89%E8%A3%85nexus3/"/>
    <id>https://garywu520.github.io/blog/2019/12/10/Maven私服部署-Docker安装nexus3/</id>
    <published>2019-12-10T08:37:29.000Z</published>
    <updated>2019-12-10T08:39:40.527Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-拉取nexus3镜像"><a href="#1-拉取nexus3镜像" class="headerlink" title="1. 拉取nexus3镜像"></a>1. 拉取nexus3镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker search nexus3</span><br><span class="line">docker pull sonatype/nexus3</span><br><span class="line">docker images</span><br></pre></td></tr></table></figure><h5 id="2-运行nexus容器"><a href="#2-运行nexus容器" class="headerlink" title="2. 运行nexus容器"></a>2. 运行nexus容器</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -id --privileged=true --name=nexus3 --restart=always -p 18081:8081 -v /data/A/nexus:/data/A/nexus sonatype/nexus3:latest</span><br></pre></td></tr></table></figure><a id="more"></a><p>参数解释：</p><ul><li>-id 创建守护式容器</li><li>–privileed=true  授权root权限(当挂载目录时，必须使用此项授权，否则容器会访问宿主机权限不足)</li><li>–name  给容器命名</li><li>-p  映射端口</li><li>-v  映射目录</li></ul><h5 id="3-访问nexus3"><a href="#3-访问nexus3" class="headerlink" title="3. 访问nexus3"></a>3. 访问nexus3</h5><p>docker运行后，稍等几分钟再进行访问</p><p>Web访问地址：http://公网IP:18081</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">默认账号：admin</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">默认密码需要登录docker查看，密码保存在了/nexus-data/admin.password文件中，进入docker查看：</span></span><br><span class="line">docker exec -it nexus3 /bin/bash</span><br><span class="line">cat /nexus-data/admin.password</span><br></pre></td></tr></table></figure><h5 id="4-查看仓库"><a href="#4-查看仓库" class="headerlink" title="4. 查看仓库"></a>4. 查看仓库</h5><p>设置齿轮 —&gt;  Repositories</p><h5 id="5-在项目中配置私服"><a href="#5-在项目中配置私服" class="headerlink" title="5. 在项目中配置私服"></a>5. 在项目中配置私服</h5><p>在 设置齿轮 —&gt;  Repositories —&gt;maven-public , URL列，点击COPY</p><p>把这个地址配置在本地maven的settings文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意：是public group仓库地址而不是releases或snapshots仓库，public默认包含了这两个仓库</span></span><br><span class="line"></span><br><span class="line">&lt;profiles&gt;</span><br><span class="line">    &lt;profile&gt;  </span><br><span class="line">    &lt;id&gt;dev&lt;/id&gt;  </span><br><span class="line">    &lt;repositories&gt;  </span><br><span class="line">     &lt;repository&gt;  </span><br><span class="line">        &lt;id&gt;local-nexus&lt;/id&gt;</span><br><span class="line">        &lt;url&gt;http://192.168.3.128:8081/repository/maven-public/&lt;/url&gt;  </span><br><span class="line">        &lt;releases&gt;  </span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/releases&gt;  </span><br><span class="line">        &lt;snapshots&gt;  </span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;  </span><br><span class="line">        &lt;/snapshots&gt;  </span><br><span class="line">      &lt;/repository&gt; </span><br><span class="line">    &lt;/repositories&gt;  </span><br><span class="line">  &lt;/profile&gt;  </span><br><span class="line">  &lt;/profiles&gt;</span><br></pre></td></tr></table></figure><p>配置maven settings文件的服务器用户名密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注意：id为私服中releases和snapshots仓库名，必须一致</span></span><br><span class="line">&lt;servers&gt;</span><br><span class="line">    &lt;server&gt;  </span><br><span class="line">        &lt;id&gt;maven-releases&lt;/id&gt;  </span><br><span class="line">        &lt;username&gt;admin&lt;/username&gt;  </span><br><span class="line">        &lt;password&gt;admin123&lt;/password&gt;  </span><br><span class="line">      &lt;/server&gt;  </span><br><span class="line">      &lt;server&gt;  </span><br><span class="line">        &lt;id&gt;maven-snapshots&lt;/id&gt;  </span><br><span class="line">        &lt;username&gt;admin&lt;/username&gt;  </span><br><span class="line">        &lt;password&gt;admin123&lt;/password&gt;  </span><br><span class="line">      &lt;/server&gt; </span><br><span class="line">  &lt;/servers&gt;</span><br></pre></td></tr></table></figure><p>在项目父pom文件中配置部署环境，注意id及URL必须与nexus仓库对应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--私服仓库--&gt;</span><br><span class="line">    &lt;distributionManagement&gt;</span><br><span class="line">        &lt;repository&gt;</span><br><span class="line">            &lt;id&gt;maven-releases&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Nexus Release Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://192.168.3.128:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class="line">        &lt;/repository&gt;</span><br><span class="line">        &lt;snapshotRepository&gt;</span><br><span class="line">            &lt;id&gt;maven-snapshots&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;Nexus Snapshot Repository&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http://192.168.3.128:8081/repository/maven-snapshots/&lt;/url&gt;</span><br><span class="line">        &lt;/snapshotRepository&gt;</span><br><span class="line">    &lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure><p>重新打开项目，对需要的模块进行deploy</p><p>最后在nexus中查看上传的jar包即可</p><p>参考：<a href="https://www.jianshu.com/p/09a6cab3785a" target="_blank" rel="noopener">Maven私服:Docker安装nexus3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-拉取nexus3镜像&quot;&gt;&lt;a href=&quot;#1-拉取nexus3镜像&quot; class=&quot;headerlink&quot; title=&quot;1. 拉取nexus3镜像&quot;&gt;&lt;/a&gt;1. 拉取nexus3镜像&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker search nexus3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker pull sonatype/nexus3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker images&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h5 id=&quot;2-运行nexus容器&quot;&gt;&lt;a href=&quot;#2-运行nexus容器&quot; class=&quot;headerlink&quot; title=&quot;2. 运行nexus容器&quot;&gt;&lt;/a&gt;2. 运行nexus容器&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run -id --privileged=true --name=nexus3 --restart=always -p 18081:8081 -v /data/A/nexus:/data/A/nexus sonatype/nexus3:latest&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="maven" scheme="https://garywu520.github.io/blog/tags/maven/"/>
    
      <category term="nexus3" scheme="https://garywu520.github.io/blog/tags/nexus3/"/>
    
  </entry>
  
  <entry>
    <title>Docker容器应用的logs日志收集</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/Docker%E5%AE%B9%E5%99%A8%E5%BA%94%E7%94%A8%E7%9A%84LOG%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/Docker容器应用的LOG日志收集/</id>
    <published>2019-12-03T07:18:35.000Z</published>
    <updated>2019-12-04T07:38:31.760Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-查看容器log插件"><a href="#1-查看容器log插件" class="headerlink" title="1. 查看容器log插件"></a>1. 查看容器log插件</h5><p>Docker有很多日志插件，默认使用json-file。只有使用json-file格式的时候，docker logs -f 才可以显示实时日志。</p><p>查看docker默认的日志插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker info | grep 'Logging Driver'</span><br></pre></td></tr></table></figure><p>当容器运行时，docker会在宿主机上创建一个该容器相关的文件，然后将容器产生的日志转存到该文件下。docker logs -f 命令就会找到该文件内容并显示在终端上</p><a id="more"></a><h5 id="2-启用syslog服务"><a href="#2-启用syslog服务" class="headerlink" title="2. 启用syslog服务"></a>2. 启用syslog服务</h5><p>默认，Linux 操作系统已经安装了 Syslog 软件包，但它叫 Rsyslog。无需单独安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsyslogd -v</span><br></pre></td></tr></table></figure><p>如果要开启 Rsyslog 服务，我们必须对 Rsyslog 进行配置</p><p>vim /etc/rsyslog.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启用服务器端口监听</span></span><br><span class="line"><span class="meta">$</span><span class="bash">ModLoad imtcp</span></span><br><span class="line"><span class="meta">$</span><span class="bash">InputTcpServerRun 5000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">当有多个docker容器服务的日志发送到syslog的时候，进行日志区分,实际区分名称与docker容器ID一一对应</span></span><br><span class="line"><span class="meta">$</span><span class="bash">template DockerLogs,<span class="string">"/var/log/syslog/%fromhost-ip%-%programname%.log"</span></span></span><br><span class="line">*.* ?DockerLogs</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/log/syslog</span><br><span class="line">systemctl restart rsyslog</span><br><span class="line"></span><br><span class="line">[root@test ~]# netstat -lntup|grep 5000            </span><br><span class="line">tcp    0   0 0.0.0.0:5000       0.0.0.0:*      LISTEN      9406/rsyslogd       </span><br><span class="line">tcp6   0   0 :::5000            :::*           LISTEN      9406/rsyslogd</span><br></pre></td></tr></table></figure><h5 id="3-为容器配置log插件"><a href="#3-为容器配置log插件" class="headerlink" title="3. 为容器配置log插件"></a>3. 为容器配置log插件</h5><blockquote><p>默认支持的log插件：<a href="https://docs.docker.com/config/containers/logging/configure/" target="_blank" rel="noopener">参考</a></p></blockquote><p>在启动容器时，可以使用 –log-driver 参数指定不同的日志插件，并使用 –log-opt参数进行响应设置。</p><p>下面是一个指定 Logging Driver 为 syslog 并传送到 logstash 的例子</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">-v /etc/trojan:/etc/trojan \</span><br><span class="line">-p 1080:1080 \</span><br><span class="line">--name trojan \</span><br><span class="line">--log-driver syslog \</span><br><span class="line">--log-opt syslog-address=tcp://192.168.1.10:5000 \</span><br><span class="line">--log-opt syslog-facility=daemon \</span><br><span class="line"> -d trojan:v2</span><br></pre></td></tr></table></figure><p>注释：</p><ul><li>–log-driver 指定日志插件为syslog</li><li>–log-opt syslog-address 指定把日志发送到的syslog服务器地址</li><li>–log-opt syslog-facility  指定要使用的syslog工具</li></ul><h5 id="4-收集容器应用log"><a href="#4-收集容器应用log" class="headerlink" title="4. 收集容器应用log"></a>4. 收集容器应用log</h5><p>在收集之前，可以先确认系统/var/log/message中是否已经有了docker中的trojan日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test supervisord.d]# tail -f /var/log/syslog/127.0.0.1-23357beeb213.log</span><br><span class="line">......</span><br><span class="line">Dec  4 14:12:07 localhost 23357beeb213[27509]: [2019-12-04 06:12:07] [INFO] 172.17.0.1:56160 disconnected, 10250 bytes received, 395 bytes sent, lasted for 17 seconds</span><br><span class="line">Dec  4 14:12:07 localhost 23357beeb213[27509]: [2019-12-04 06:12:07] [INFO] 172.17.0.1:56168 disconnected, 1338 bytes received, 395 bytes sent, lasted for 16 seconds</span><br><span class="line">Dec  4 14:12:20 localhost 23357beeb213[27509]: [2019-12-04 06:12:20] [INFO] 172.17.0.1:56212 requested connection to beacons.gvt2.com:443</span><br><span class="line">......</span><br></pre></td></tr></table></figure><p>既然文件都已经存储到系统文件了，索性logstash input直接使用file模块好了，就不用syslog了。如下：</p><p>logstash配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">  file &#123;</span><br><span class="line">    path =&gt; ["/var/log/syslog/127.0.0.1-23357beeb213.log"]</span><br><span class="line">    type =&gt; "trojan_docker_1080"</span><br><span class="line">    start_position =&gt; "beginning"</span><br><span class="line">    sincedb_path =&gt; "/usr/local/logstash-6.5.4/tmp/sincedb1"</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">  if [type] == "trojan_docker_1080" &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">      hosts =&gt; ["xx.xx.xx.xx:9200"]</span><br><span class="line">      index =&gt; "logstash-trojan_docker_1080-%&#123;+YYYY-MM-dd&#125;"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">测试语法正确性</span></span><br><span class="line">bin/logstash -f /usr/local/logstash-6.5.4/conf.d/logstash.conf -t</span><br></pre></td></tr></table></figure><p>重启logstash</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-查看容器log插件&quot;&gt;&lt;a href=&quot;#1-查看容器log插件&quot; class=&quot;headerlink&quot; title=&quot;1. 查看容器log插件&quot;&gt;&lt;/a&gt;1. 查看容器log插件&lt;/h5&gt;&lt;p&gt;Docker有很多日志插件，默认使用json-file。只有使用json-file格式的时候，docker logs -f 才可以显示实时日志。&lt;/p&gt;
&lt;p&gt;查看docker默认的日志插件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker info | grep &#39;Logging Driver&#39;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;当容器运行时，docker会在宿主机上创建一个该容器相关的文件，然后将容器产生的日志转存到该文件下。docker logs -f 命令就会找到该文件内容并显示在终端上&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="logs" scheme="https://garywu520.github.io/blog/tags/logs/"/>
    
      <category term="日志收集" scheme="https://garywu520.github.io/blog/tags/%E6%97%A5%E5%BF%97%E6%94%B6%E9%9B%86/"/>
    
  </entry>
  
  <entry>
    <title>centos7 yum docker</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/centos7-yum-docker/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/centos7-yum-docker/</id>
    <published>2019-12-03T05:36:48.000Z</published>
    <updated>2019-12-03T05:41:48.304Z</updated>
    
    <content type="html"><![CDATA[<ul><li>Install docker-ce</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">yum install -y docker-ce</span><br><span class="line"></span><br><span class="line">systemctl enable docker.service</span><br><span class="line">systemctl start docker.service</span><br><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>Install docker-compose</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y python-pip</span><br><span class="line">pip install docker-compose</span><br><span class="line"></span><br><span class="line">yum upgrade python*</span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure><p>参考：<a href="https://github.com/NaturalHistoryMuseum/scratchpads2/wiki/Install-Docker-and-Docker-Compose-(Centos-7)" target="_blank" rel="noopener">Install Docker &amp; Docker Compose - Centos 7</a></p>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;Install docker-ce&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yum install -y yum-utils device-mapper-persistent-data lvm2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yum install -y docker-ce&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl enable docker.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl start docker.service&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;systemctl status docker.service&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="docker-compose" scheme="https://garywu520.github.io/blog/tags/docker-compose/"/>
    
      <category term="centos7" scheme="https://garywu520.github.io/blog/tags/centos7/"/>
    
      <category term="yum" scheme="https://garywu520.github.io/blog/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>Docker与iptables防火墙</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/Docker%E4%B8%8Eiptables%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/Docker与iptables防火墙/</id>
    <published>2019-12-03T03:21:55.000Z</published>
    <updated>2019-12-03T03:40:18.327Z</updated>
    
    <content type="html"><![CDATA[<p>假设已有服务器已经配置了iptables，这个时候安装并运行docker容器后，docker会自动向iptables添加 FORWARD规则来实现与宿主机的网络通信。</p><p>一旦不小心，直接在iptables中新开放了端口操作，重载iptables规则后，docker添加的规则会被覆盖，这就导致了docker服务的网络异常。怎么解决？</p><a id="more"></a><h5 id="1-首先要在防火墙配置文件里面添加docker-FORWARD规则"><a href="#1-首先要在防火墙配置文件里面添加docker-FORWARD规则" class="headerlink" title="1. 首先要在防火墙配置文件里面添加docker FORWARD规则"></a>1. 首先要在防火墙配置文件里面添加docker FORWARD规则</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Docker</span></span><br><span class="line">iptables -A FORWARD -i docker0 -o eth0 -j ACCEPT</span><br><span class="line">iptables -A FORWARD -i eth0 -o docker0 -j ACCEPT</span><br></pre></td></tr></table></figure><h5 id="2-修改docker服务启动配置"><a href="#2-修改docker服务启动配置" class="headerlink" title="2. 修改docker服务启动配置"></a>2. 修改docker服务启动配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 通过此命令获取docker systemd的启动配置文件，接下来要修改</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status docker</span></span><br><span class="line">/usr/lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p>vim  /usr/lib/systemd/system/docker.service</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">找到如下行并添加参数：--iptables=<span class="literal">false</span>,意思是启动docker的时候不自动向iptables添加规则</span></span><br><span class="line">ExecStart=/usr/bin/dockerd -H fd:// --iptables=false --containerd=/run/containerd/containerd.sock</span><br></pre></td></tr></table></figure><h5 id="3-重启服务"><a href="#3-重启服务" class="headerlink" title="3. 重启服务"></a>3. 重启服务</h5><ul><li><p>重载iptables规则</p></li><li><p>首先stop掉已有容器</p></li><li><p>重启docker</p><p>systemctl daemon-reload  &amp;&amp; systemctl  restart  docker</p></li><li><p>启动docker容器</p></li></ul><p>这个时候，在iptables中再开启端口的时候，就不怕docker容器服务的网络会出现问题了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;假设已有服务器已经配置了iptables，这个时候安装并运行docker容器后，docker会自动向iptables添加 FORWARD规则来实现与宿主机的网络通信。&lt;/p&gt;
&lt;p&gt;一旦不小心，直接在iptables中新开放了端口操作，重载iptables规则后，docker添加的规则会被覆盖，这就导致了docker服务的网络异常。怎么解决？&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="iptables" scheme="https://garywu520.github.io/blog/tags/iptables/"/>
    
  </entry>
  
  <entry>
    <title>Postwoman API接口测试</title>
    <link href="https://garywu520.github.io/blog/2019/12/03/Postwoman-API%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <id>https://garywu520.github.io/blog/2019/12/03/Postwoman-API接口测试/</id>
    <published>2019-12-03T02:12:34.000Z</published>
    <updated>2019-12-03T02:22:45.731Z</updated>
    
    <content type="html"><![CDATA[<p>对于经常进行接口调试的同学来说，应该是比较熟悉 <code>Postman</code> 了。<code>Postman</code> 虽然功能强大，但也有很多弊端。比如：不支持 <code>Web</code> 方式，需要安装客户端软件等。如果你只想简单地测试下接口返回，就需要安装一个客户端工具就显得比较麻烦了。</p><p>为了解决这个痛点，今天就给大家推荐一个轻量级、功能强大且颜值超高的神器 <code>Postwoman</code>。<code>Postwoman</code> 是一个 <code>HTTP API</code> 测试工具，支持 <code>REST</code>、<code>SOAP</code> 和 <code>GraphQL</code> 请求，并且可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等功能。简单来说，<code>Postwoman</code> 是一个好用且功能非常强大的 <code>API</code> 调试工具。</p><a id="more"></a><h5 id="一、什么是postwoman？"><a href="#一、什么是postwoman？" class="headerlink" title="一、什么是postwoman？"></a>一、什么是postwoman？</h5><p><img src="https://github.com/liyasthomas/postwoman/raw/master/static/logo.png" alt="postwoman"></p><p><code>Postwoman</code> 是一个基于 <code>Vue</code> 开发的的 <code>Web</code> 项目，功能类似 <code>Poatman</code> 的免费且美观的开源替代方案，它可以帮助开发人员更快地创建请求，提升工作效率。目前，该项目在 <code>Github</code> 上的 <code>Star</code> 数已经超过 11k 了！</p><blockquote><p>项目地址：<a href="https://github.com/liyasthomas/postwoman" target="_blank" rel="noopener">https://github.com/liyasthomas/postwoman</a></p></blockquote><p><img src="https://github.com/liyasthomas/postwoman/raw/master/static/images/screenshot1.png" alt="Screenshot1"></p><h5 id="二、Postwoman功能介绍"><a href="#二、Postwoman功能介绍" class="headerlink" title="二、Postwoman功能介绍"></a>二、Postwoman功能介绍</h5><ol><li>Postwoman 相关特性</li></ol><ul><li>采用简约的 UI 设计，简单的设计是最好的设计</li><li>响应速度更快，软件使用更轻量、更简洁</li><li>实时发送请求并获取/复制响应</li></ul><p>Postwoman 支持的方法</p><ul><li>GET</li><li>HEAD</li><li>POST</li><li>PUT</li><li>DELETE</li><li>OPTIONS</li><li>PATCH</li></ul><p>Postwoman 支持界面定制</p><ul><li>支持主题选择：Kinda Dark（默认）、Clearly White、Just Black 和 System 主题</li><li>支持自定义强调颜色：绿色（默认）、黄色、粉红色、红色、紫色、橙色、青色和蓝色</li></ul><p>其它支持的特性</p><ul><li>支持以 <code>PWA</code> 方式进行安装</li><li>支持离线使用</li><li>内存和 <code>CPU</code> 使用率非常低</li><li>支持多平台、多设备</li><li>支持 <code>WebSocket</code></li><li>支持 <code>GraphQL</code></li><li>支持多种 <code>HTTP</code> 认证方式</li><li>……</li></ul><h5 id="三、如何使用Postwoman"><a href="#三、如何使用Postwoman" class="headerlink" title="三、如何使用Postwoman"></a>三、如何使用Postwoman</h5><p><code>Postwoman</code> 既然是一个 <code>Web</code> 项目，使用起来也就非常简单，你只需直接访问其官网地址即可直接使用。</p><blockquote><p>官网地址：<a href="https://postwoman.io/" target="_blank" rel="noopener">https://postwoman.io/</a></p></blockquote><p>如果你想在本地自行搭建也是可以的，Docker部署方式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取 Postwoman 相关镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker pull liyasthomas/postwoman</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 运行一个 Postwoman 的容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -p 3000:3000 liyasthomas/postwoman:latest</span></span><br></pre></td></tr></table></figure><p>搭建成功后，你只需打开浏览器访问对应主机 <code>IP</code> 的 <code>3000</code> 端口即可访问本地的 Postwoman 环境。</p><p>如果你觉得 <code>Postman</code> 不够好用或者确实是想要使用一个界面更加好看的接口调试工具，那么 <code>Postwoman</code> 将是你最佳的选择！</p><p>参考：<a href="https://mp.weixin.qq.com/s/dkLgcE3u88v8N4Prdt6vCQ" target="_blank" rel="noopener">微信公众号：运维之美</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于经常进行接口调试的同学来说，应该是比较熟悉 &lt;code&gt;Postman&lt;/code&gt; 了。&lt;code&gt;Postman&lt;/code&gt; 虽然功能强大，但也有很多弊端。比如：不支持 &lt;code&gt;Web&lt;/code&gt; 方式，需要安装客户端软件等。如果你只想简单地测试下接口返回，就需要安装一个客户端工具就显得比较麻烦了。&lt;/p&gt;
&lt;p&gt;为了解决这个痛点，今天就给大家推荐一个轻量级、功能强大且颜值超高的神器 &lt;code&gt;Postwoman&lt;/code&gt;。&lt;code&gt;Postwoman&lt;/code&gt; 是一个 &lt;code&gt;HTTP API&lt;/code&gt; 测试工具，支持 &lt;code&gt;REST&lt;/code&gt;、&lt;code&gt;SOAP&lt;/code&gt; 和 &lt;code&gt;GraphQL&lt;/code&gt; 请求，并且可以实现自动化接口测试、接口监控、模拟接口数据、生成接口文档、多人协作等功能。简单来说，&lt;code&gt;Postwoman&lt;/code&gt; 是一个好用且功能非常强大的 &lt;code&gt;API&lt;/code&gt; 调试工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="postman" scheme="https://garywu520.github.io/blog/tags/postman/"/>
    
      <category term="postwoman" scheme="https://garywu520.github.io/blog/tags/postwoman/"/>
    
      <category term="API" scheme="https://garywu520.github.io/blog/tags/API/"/>
    
      <category term="接口测试" scheme="https://garywu520.github.io/blog/tags/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockerfile制作trojan镜像</title>
    <link href="https://garywu520.github.io/blog/2019/12/02/%E4%BD%BF%E7%94%A8Dockerfile%E5%88%B6%E4%BD%9Ctrojan%E9%95%9C%E5%83%8F/"/>
    <id>https://garywu520.github.io/blog/2019/12/02/使用Dockerfile制作trojan镜像/</id>
    <published>2019-12-02T11:00:33.000Z</published>
    <updated>2019-12-02T11:26:23.511Z</updated>
    
    <content type="html"><![CDATA[<p>此Dockerfile文件具有参考意义，为制作其他服务镜像打好基础。比如容器内的服务如何在启动容器后，自动运行。</p><h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><ul><li>安装好docker</li><li>docker pull 好centos基础镜像</li></ul><a id="more"></a><h5 id="1-创建Dockerfile空白文件"><a href="#1-创建Dockerfile空白文件" class="headerlink" title="1. 创建Dockerfile空白文件"></a>1. 创建Dockerfile空白文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/docker_trojan</span><br><span class="line">cd /opt/docker_trojan</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><p>cat Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">From</span> centos:centos7.<span class="number">7.1908</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /etc/trojan</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./trojan/ /etc/trojan</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod +x /etc/trojan/trojan</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">1080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash">  [<span class="string">"/etc/trojan/trojan"</span>,<span class="string">"-c"</span>,<span class="string">"/etc/trojan/client.json"</span>]</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p>把需要拷贝到容器的源目录，与Dockerfile放在同级目录</p></li><li><p>使用ADD指令拷贝目录的时候，需要保证目标目录已存在</p></li><li><p>ENTRYPOINT 指令,当容器启动时，自动启动容器内服务</p></li></ul><h5 id="2-制作镜像"><a href="#2-制作镜像" class="headerlink" title="2. 制作镜像"></a>2. 制作镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t trojan:v2 .</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">内容输出</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker build -t trojan:v2 .</span></span><br><span class="line">Sending build context to Docker daemon  4.023MB</span><br><span class="line">Step 1/5 : From centos:centos7.7.1908</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 08d05d1d5859</span></span><br><span class="line">Step 2/5 : RUN mkdir /etc/trojan</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 0d72b0e1963c</span></span><br><span class="line">Removing intermediate container 0d72b0e1963c</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> ecc12edb1e6f</span></span><br><span class="line">Step 3/5 : ADD ./trojan/ /etc/trojan</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 64b8fc8bcacd</span></span><br><span class="line">Step 4/5 : RUN chmod +x /etc/trojan/trojan</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 9bd8d38d634d</span></span><br><span class="line">Removing intermediate container 9bd8d38d634d</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> e236ceda286d</span></span><br><span class="line">Step 5/5 : CMD /etc/trojan/trojan -c /etc/trojan/client.json</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> 17b302a27bc1</span></span><br><span class="line">Removing intermediate container 17b302a27bc1</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> f476f8cd236b</span></span><br><span class="line">Successfully built f476f8cd236b</span><br><span class="line">Successfully tagged trojan:v2</span><br></pre></td></tr></table></figure><h5 id="3-查看新镜像"><a href="#3-查看新镜像" class="headerlink" title="3. 查看新镜像"></a>3. 查看新镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@test docker_trojan]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">trojan              v2                  316c01516fdb        3 minutes ago       212MB</span><br><span class="line">centos              centos7.7.1908      08d05d1d5859        2 weeks ago         204MB</span><br></pre></td></tr></table></figure><h5 id="4-使用新镜像启动docker"><a href="#4-使用新镜像启动docker" class="headerlink" title="4. 使用新镜像启动docker"></a>4. 使用新镜像启动docker</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -v /etc/trojan:/etc/trojan -p 1080:1080 --name trojan -d trojan:v2</span><br></pre></td></tr></table></figure><p>进入容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it trojan /bin/bash</span><br><span class="line"></span><br><span class="line">[root@4f0251ab9801 /]# ps -ef|grep trojan</span><br><span class="line">root 1  0  0 10:57 ?   00:00:00 /etc/trojan/trojan -c /etc/trojan/client.json</span><br></pre></td></tr></table></figure><p>Dockerfile语法参考： <a href="https://garywu520.github.io/blog/2019/12/02/%E4%BD%BF%E7%94%A8Dockerfile%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F/#more">使用Dockerfile制作镜像</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此Dockerfile文件具有参考意义，为制作其他服务镜像打好基础。比如容器内的服务如何在启动容器后，自动运行。&lt;/p&gt;
&lt;h5 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;安装好docker&lt;/li&gt;
&lt;li&gt;docker pull 好centos基础镜像&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="Dockerfile" scheme="https://garywu520.github.io/blog/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>使用Dockerfile制作镜像</title>
    <link href="https://garywu520.github.io/blog/2019/12/02/%E4%BD%BF%E7%94%A8Dockerfile%E5%88%B6%E4%BD%9C%E9%95%9C%E5%83%8F/"/>
    <id>https://garywu520.github.io/blog/2019/12/02/使用Dockerfile制作镜像/</id>
    <published>2019-12-02T05:50:41.000Z</published>
    <updated>2019-12-02T05:52:58.634Z</updated>
    
    <content type="html"><![CDATA[<p>如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。</p><p>Dockerfile 是一个文本文件，其内包含了一条条的 <strong>指令(Instruction)</strong>，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。</p><p>以定制centos镜像为例，这次使用Dockerfile来定制</p><a id="more"></a><h5 id="一、创建Dockerfile空白文件"><a href="#一、创建Dockerfile空白文件" class="headerlink" title="一、创建Dockerfile空白文件"></a>一、创建Dockerfile空白文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /opt/docker_centos</span><br><span class="line">cd /opt/docker_centos</span><br><span class="line">touch Dockerfile</span><br></pre></td></tr></table></figure><h5 id="二、根据Dockerfile指令，编辑定制内容"><a href="#二、根据Dockerfile指令，编辑定制内容" class="headerlink" title="二、根据Dockerfile指令，编辑定制内容"></a>二、根据Dockerfile指令，编辑定制内容</h5><p>要定制Dockerfile文件，首先要明确其各指令的作用</p><ul><li><p>FROM</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FROM centos</span><br></pre></td></tr></table></figure><p>FROM用来指定一个基础镜像，如:centos或nginx等等，FROM指令必须是第一条指令。</p><p>除了基础镜像外，Docker还存在一个特殊的镜像，名为scratch。这个镜像是虚拟的概念，并不实际存在，它表示一个空白的镜像。对于 Linux 下静态编译的程序【如Go语言】来说，并不需要有操作系统提供运行时支持，所需的一切库都已经在可执行文件里了，因此直接 <code>FROM scratch</code> 会让镜像体积更加小巧。</p></li></ul><ul><li><p>RUN</p><p><code>RUN</code> 指令是用来执行命令行命令的，其有两种格式：</p><ul><li><p>shell格式: RUN &lt;命令&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RUN cd /root</span><br><span class="line">RUN echo "Dockerfile Test"</span><br><span class="line">RUN ls -lh</span><br></pre></td></tr></table></figure></li></ul></li><li><p>COPY  复制文件</p><p>COPY指令用于复制文件；</p><p>格式：COPY  –chown=<user>:<group>  &lt;源路径&gt;   &lt;镜像内目标路径&gt;</group></user></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY ./test  /home/test/</span><br></pre></td></tr></table></figure></li><li><p>CMD 容器启动命令</p><p>CMD用来指定容器的启动命令，启动命令需要在前台运行，否则当命令启动后容器就退出了。</p><p>格式：CMD  &lt;启动命令&gt;</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">CMD ["/bin/bash"]</span><br><span class="line">或</span><br><span class="line">CMD ["sh","run.sh"]</span><br></pre></td></tr></table></figure></li><li><p>ENTRYPOINT</p><p>ENTRYPOINT的格式和RUN指令格式和作用一样，都是在指定容器启动程序和参数</p><p>建议习惯性使用这个指令，而不是CMD，具体区别：<a href="https://yeasy.gitbooks.io/docker_practice/image/dockerfile/entrypoint.html" target="_blank" rel="noopener">参考</a></p></li><li><p>ENV 设置环境变量</p><p>格式：ENV <key> <value></value></key></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">ENV NODE_VERSION 7.2.0</span><br><span class="line"></span><br><span class="line">RUN curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/node-v$NODE_VERSION-linux-x64.tar.xz" \</span><br><span class="line">  &amp;&amp; curl -SLO "https://nodejs.org/dist/v$NODE_VERSION/SHASUMS256.txt.asc" \</span><br><span class="line">  &amp;&amp; gpg --batch --decrypt --output SHASUMS256.txt SHASUMS256.txt.asc</span><br></pre></td></tr></table></figure><p>当设置了环境变量之后，其他指令均可以直接在命令中调用此变量</p></li><li><p>EXPOSE 暴露端口</p><p>格式为: EXPOSE &lt;端口1&gt; [&lt;端口2&gt;…]</p><p>EXPOSE 指令是声明运行时容器提供服务端口，这仅仅是一个声明，在运行时并不会因为这个声明应用就会开启这个端口的服务。</p></li><li><p>WORKDIR 指定工作目录</p><p>格式:  WORKDIR &lt;工作目录路径&gt;</p><p>使用 <code>WORKDIR</code> 指令可以来指定工作目录（或者称为当前目录），以后各层的当前目录就被改为指定的目录，如该目录不存在，WORKDIR 会帮你建立目录。</p></li><li><p>USER指定当前用户</p><p>格式：USER &lt;用户名&gt;[:&lt;用户组&gt;]</p><p><code>USER</code> 只是帮助你切换到指定用户而已，这个用户必须是事先建立好的，否则无法切换。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">RUN groupadd -r redis &amp;&amp; useradd -r -g redis redis</span><br><span class="line">USER redis</span><br><span class="line">RUN [ "redis-server" ]</span><br></pre></td></tr></table></figure></li></ul><h5 id="三、构建镜像"><a href="#三、构建镜像" class="headerlink" title="三、构建镜像"></a>三、构建镜像</h5><p>Dockerfile文件根据各自需求定制完成后，现在就可以进行构建这个镜像了。使用  docker build  命令进行镜像的构建，格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">构建镜像格式</span></span><br><span class="line">docker build [选项] &lt;上下文路径/URL/-&gt;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">例如：</span></span><br><span class="line">docker build -t centos:v3 .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注意，命令最后有个“.”,表示上下文路径，并非当前目录;这里使用-t来指定最终构建后的镜像名称</span></span><br></pre></td></tr></table></figure><p><a href="https://yeasy.gitbooks.io/docker_practice/image/build.html" target="_blank" rel="noopener">什么是上下文路径？</a></p><p>构建后，镜像就可以直接使用了</p><p>参考：<a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener">Docker —— 从入门到实践</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果我们可以把每一层修改、安装、构建、操作的命令都写入一个脚本，用这个脚本来构建、定制镜像，那么之前提及的无法重复的问题、镜像构建透明性的问题、体积的问题就都会解决。这个脚本就是 Dockerfile。&lt;/p&gt;
&lt;p&gt;Dockerfile 是一个文本文件，其内包含了一条条的 &lt;strong&gt;指令(Instruction)&lt;/strong&gt;，每一条指令构建一层，因此每一条指令的内容，就是描述该层应当如何构建。&lt;/p&gt;
&lt;p&gt;以定制centos镜像为例，这次使用Dockerfile来定制&lt;/p&gt;
    
    </summary>
    
    
      <category term="高级运维" scheme="https://garywu520.github.io/blog/tags/%E9%AB%98%E7%BA%A7%E8%BF%90%E7%BB%B4/"/>
    
      <category term="Docker" scheme="https://garywu520.github.io/blog/tags/Docker/"/>
    
      <category term="Dockerfile" scheme="https://garywu520.github.io/blog/tags/Dockerfile/"/>
    
  </entry>
  
  <entry>
    <title>部署企业级Harbor私有docker镜像仓库</title>
    <link href="https://garywu520.github.io/blog/2019/11/28/%E9%83%A8%E7%BD%B2%E4%BC%81%E4%B8%9A%E7%BA%A7Harbor%E7%A7%81%E6%9C%89docker%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    <id>https://garywu520.github.io/blog/2019/11/28/部署企业级Harbor私有docker镜像仓库/</id>
    <published>2019-11-28T08:22:35.000Z</published>
    <updated>2019-11-28T08:25:05.953Z</updated>
    
    <content type="html"><![CDATA[<p>Docker本地镜像可以满足单机使用docker镜像的需求，而在生产环境上，需要将镜像发布到几时/上百台节点上，这时候本地镜像显得心有余而力不足。就需要部署一套开源私有仓库来统一管理镜像！</p><p><img src="https://github.com/goharbor/harbor/raw/master/docs/img/harbor_logo.png" alt="Harbor"></p><p>Habor是由VMWare公司开源的容器镜像仓库，它基于Docker-compose部署</p><p>官方地址： <a href="https://vmware.github.io/" target="_blank" rel="noopener">https://vmware.github.io/</a> </p><p>Github:  <a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener">https://github.com/goharbor/harbor</a> </p><a id="more"></a><h5 id="一、-Harbor主要功能"><a href="#一、-Harbor主要功能" class="headerlink" title="一、 Harbor主要功能"></a>一、 Harbor主要功能</h5><ul><li>基于角色访问控制</li><li>镜像复制</li><li>LDAP</li><li>镜像删除与空间回收</li><li>图形界面管理-原生中文支持</li><li>审计</li><li>REST API</li></ul><h5 id="二、Harbor组件"><a href="#二、Harbor组件" class="headerlink" title="二、Harbor组件"></a>二、Harbor组件</h5><table><thead><tr><th align="center">组件</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">harbor-adminserver</td><td align="center">配置管理中心</td></tr><tr><td align="center">harbor-db</td><td align="center">MySQL数据库</td></tr><tr><td align="center">harbor-jobservice</td><td align="center">负责镜像复制</td></tr><tr><td align="center">harbor-log</td><td align="center">记录操作日志</td></tr><tr><td align="center">harbor-ui</td><td align="center">Web管理页面和API</td></tr><tr><td align="center">nginx</td><td align="center">前端代理,负责页面和镜像上传/下载/转发</td></tr><tr><td align="center">redis</td><td align="center">会话</td></tr><tr><td align="center">registry</td><td align="center">镜像存储</td></tr></tbody></table><p>Harbor 3种安装方式：</p><ul><li>在线安装： 从Docker Hub下载Harbor相关镜像，因此安装软件包非常小 </li><li>离线安装： 安装包包含部署的相关镜像，因此安装包比较大 </li><li>OVA安装程序： 当用户具有VMware vCenter环境时，使用此安装程序，在部署OVA后启动Harbor </li></ul><h5 id="三、Harbor离线部署"><a href="#三、Harbor离线部署" class="headerlink" title="三、Harbor离线部署"></a>三、Harbor离线部署</h5><p> <a href="https://github.com/goharbor/harbor/releases/download/v1.9.3/harbor-offline-installer-v1.9.3.tgz" target="_blank" rel="noopener">harbor-offline-installer-v1.9.3.tgz</a>  下载地址：<a href="https://github.com/vmware/harbor/releases" target="_blank" rel="noopener">https://github.com/vmware/harbor/releases</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf harbor-offline-installer-v1.9.3.tgz</span><br><span class="line">cd harbor</span><br></pre></td></tr></table></figure><p>HTTPS方式部署</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hostname:</span> <span class="string">reg.mydomain.com</span>  <span class="comment">#域名或IP，这里是0.0.0.0</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">https:</span></span><br><span class="line"><span class="attr">   port:</span> <span class="number">443</span></span><br><span class="line"><span class="attr">   certificate:</span> <span class="string">/etc/ssl/harbor/server.crt</span></span><br><span class="line"><span class="attr">   private_key:</span> <span class="string">/etc/ssl/harbor/server.key</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">Harbor12345</span>   </span><br><span class="line"><span class="string">......</span></span><br><span class="line"><span class="attr">database:</span></span><br><span class="line"><span class="attr">  password:</span> <span class="string">root123</span></span><br></pre></td></tr></table></figure><p>准备自签SSL证书</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/ssl/harbor</span><br><span class="line">cd /etc/ssl/harbor</span><br></pre></td></tr></table></figure><p>cat ssl.sh</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">if [ $# != 1 ];then</span><br><span class="line">   echo "USAGE: sh $0 IP"</span><br><span class="line">   exit 1;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">CNIP=$1</span><br><span class="line"></span><br><span class="line">echo "3秒后,开始生成根证书...."</span><br><span class="line">sleep 3</span><br><span class="line">openssl genrsa -out cakey.pem 4096</span><br><span class="line">openssl req -new -x509 -key cakey.pem -out cacert.pem -subj "/C=HK/ST=Hongkong/L=Hongkong/O=NASA/OU=Dev/CN=$CNIP/emailAddress=hk_dev@nasa.com"</span><br><span class="line"></span><br><span class="line">echo "3秒后,开始生成csr以及证书签署..."</span><br><span class="line">sleep 3</span><br><span class="line">openssl genrsa -out server.key 4096</span><br><span class="line">openssl req -new -key server.key -out server.csr -subj "/C=HK/ST=Hongkong/L=Hongkong/O=NASA/OU=Dev/CN=$CNIP/emailAddress=hk_dev@nasa.com"</span><br><span class="line">openssl x509 -req -in server.csr -CA cacert.pem -CAkey cakey.pem -CAcreateserial -out server.crt -days 3650</span><br><span class="line"></span><br><span class="line">echo "自签证书已完成,详情如下:..."</span><br><span class="line">ls -lh server*</span><br></pre></td></tr></table></figure><p> 生成Harbor的配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/harbor</span><br><span class="line">./prepare</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">依赖于docker-compose</span></span><br><span class="line">curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /root/harbor</span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看运行状态</span></span><br><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure><h5 id="四、Web访问"><a href="#四、Web访问" class="headerlink" title="四、Web访问"></a>四、Web访问</h5><p> <a href="https://IP" target="_blank" rel="noopener">https://IP</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">账号：admin  密码：Harbor12345</span><br></pre></td></tr></table></figure><p>具体使用-请参考:  <a href="https://www.linuxidc.com/Linux/2019-07/159463.htm" target="_blank" rel="noopener">Linux公社</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Docker本地镜像可以满足单机使用docker镜像的需求，而在生产环境上，需要将镜像发布到几时/上百台节点上，这时候本地镜像显得心有余而力不足。就需要部署一套开源私有仓库来统一管理镜像！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://github.com/goharbor/harbor/raw/master/docs/img/harbor_logo.png&quot; alt=&quot;Harbor&quot;&gt;&lt;/p&gt;
&lt;p&gt;Habor是由VMWare公司开源的容器镜像仓库，它基于Docker-compose部署&lt;/p&gt;
&lt;p&gt;官方地址： &lt;a href=&quot;https://vmware.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vmware.github.io/&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Github:  &lt;a href=&quot;https://github.com/goharbor/harbor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/goharbor/harbor&lt;/a&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="docker" scheme="https://garywu520.github.io/blog/tags/docker/"/>
    
      <category term="镜像仓库" scheme="https://garywu520.github.io/blog/tags/%E9%95%9C%E5%83%8F%E4%BB%93%E5%BA%93/"/>
    
      <category term="harbor" scheme="https://garywu520.github.io/blog/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>开源wiki系统-XWiki</title>
    <link href="https://garywu520.github.io/blog/2019/11/20/%E5%BC%80%E6%BA%90wiki%E7%B3%BB%E7%BB%9F-XWiki/"/>
    <id>https://garywu520.github.io/blog/2019/11/20/开源wiki系统-XWiki/</id>
    <published>2019-11-20T07:38:58.000Z</published>
    <updated>2019-11-20T10:42:13.649Z</updated>
    
    <content type="html"><![CDATA[<h5 id="一、XWiki介绍"><a href="#一、XWiki介绍" class="headerlink" title="一、XWiki介绍"></a>一、XWiki介绍</h5><p>就是一个开源wiki，不像 Confluence 一样需要购买 License 才能使用</p><h5 id="二、Xwiki官网与下载"><a href="#二、Xwiki官网与下载" class="headerlink" title="二、Xwiki官网与下载"></a>二、Xwiki官网与下载</h5><ul><li>官网： <a href="https://www.xwiki.org/" target="_blank" rel="noopener">https://www.xwiki.org/</a> </li><li>XWiki下载页：<a href="http://download.forge.ow2.org/xwiki/" target="_blank" rel="noopener">xwiki download</a> – 检索关键字[xwiki-enterprise-installer-generic]</li><li>XWwiki安装的版本：xwiki-enterprise-installer-generic-9.4</li></ul><a id="more"></a><h5 id="三、-安装JDK"><a href="#三、-安装JDK" class="headerlink" title="三、 安装JDK"></a>三、 安装JDK</h5><ul><li><a href="https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html" target="_blank" rel="noopener">download jdk 8u202</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载jdk-8u202-linux-x64.rpm</span></span><br><span class="line">rpm -ivh jdk-8u202-linux-x64.rpm</span><br><span class="line">java -version</span><br></pre></td></tr></table></figure><p>cat  /root/.bash_profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">JAVA_Home config</span></span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_102/</span><br><span class="line">export JRE_HOME=/usr/java/jdk1.8.0_102/jre</span><br><span class="line">PATH=$PATH:$HOME/bin:$JAVA_HOME/bin</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile </span><br><span class="line">echo $JAVA_HOME</span><br><span class="line">echo $JRE_HOME</span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><h5 id="四、安装XWiki"><a href="#四、安装XWiki" class="headerlink" title="四、安装XWiki"></a>四、安装XWiki</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载xwiki-enterprise-installer-generic-9.4-standard.jar</span></span><br><span class="line">java -jar xwiki-enterprise-installer-generic-9.4-standard.jar</span><br><span class="line"></span><br><span class="line">注：此过程会提示几个问题，根据提示输入"1"或"Y"即可。默认安装目录: /usr/local/XWiki Enterprise 9.4</span><br></pre></td></tr></table></figure><p>启动XWiki</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mv /usr/local/XWiki\ Enterprise\ 9.4/ /usr/local/XWiki_Enterprise_9.4</span><br><span class="line">cd /usr/local/XWiki_Enterprise_9.4</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">XWiki 默认运行在 8080 端口，使用-p选项指定运行端口</span></span><br><span class="line">bash start_xwiki.sh -p 8888</span><br></pre></td></tr></table></figure><p><strong>Web访问: <a href="http://xx.xx.xx.xx:8888" target="_blank" rel="noopener">http://xx.xx.xx.xx:8888</a></strong></p><p>XWiki 默认的管理员用户及密码为：<br>用户名：Admin<br>密码：admin</p><h5 id="五、优化"><a href="#五、优化" class="headerlink" title="五、优化"></a>五、优化</h5><h6 id="1-supervisorctl启动管理"><a href="#1-supervisorctl启动管理" class="headerlink" title="1. supervisorctl启动管理"></a>1. supervisorctl启动管理</h6><p>cat /etc/supervisord.d/xwiki.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[program:xwiki]</span><br><span class="line">directory=/usr/local/XWiki_Enterprise_9.4</span><br><span class="line">command=/usr/local/XWiki_Enterprise_9.4/start_xwiki.sh -p 8888</span><br><span class="line">username=root</span><br><span class="line">autostart=true</span><br><span class="line">autorestart=true</span><br><span class="line">startsecs=5</span><br><span class="line">priority=1</span><br><span class="line">stopasgroup=true</span><br><span class="line">killasgroup=true</span><br></pre></td></tr></table></figure><p>注：由于是JAVA程序启动较慢，supervisor启动后耐心等待即可访问</p><h6 id="2-修改中文"><a href="#2-修改中文" class="headerlink" title="2.修改中文"></a>2.修改中文</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">点击Administer Wiki ---&gt;点击Content ---&gt; 点击Localization</span><br><span class="line">(1)第一项选择Yes</span><br><span class="line">(2)第二项选择 中文(中国)</span><br><span class="line">(3)第三项选择 中文(中国)</span><br><span class="line">(4)DATE格式： yyyy/MM/dd,HH:mm</span><br><span class="line">(5)TIMEZONE: Asia/HongKong</span><br></pre></td></tr></table></figure><h6 id="3-禁止用户注册"><a href="#3-禁止用户注册" class="headerlink" title="3. 禁止用户注册"></a>3. 禁止用户注册</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">管理WIKI ---&gt; Users &amp; Rights ---&gt; 权限：</span><br><span class="line">    -- Groups权限调整[禁止注册]</span><br><span class="line">    -- Users权限调整[禁止注册]</span><br><span class="line"></span><br><span class="line">注：Groups和Users均勾选如下选项</span><br><span class="line">yes 不论页面、空间权限如何设置，禁止非注册用户察看页面，</span><br><span class="line">yes 不论页面、空间权限如何设置，禁止非注册用户编辑页面，</span><br><span class="line">yes Require unregistered users to solve a captcha when posting a comment on a page</span><br></pre></td></tr></table></figure><h6 id="4-安装Markdown-1-2编辑器"><a href="#4-安装Markdown-1-2编辑器" class="headerlink" title="4.安装Markdown 1.2编辑器"></a>4.安装Markdown 1.2编辑器</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">搜索安装扩展：Markdown, 安装完成后，点击插件右侧的“配置”按钮</span><br><span class="line"></span><br><span class="line">编辑器改为Markdown: </span><br><span class="line">点击Administer Wiki ---&gt;点击Editing ---&gt; 选择默认文档语法为MarkDown</span><br></pre></td></tr></table></figure><h5 id="5-设置发信"><a href="#5-设置发信" class="headerlink" title="5. 设置发信"></a>5. 设置发信</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">管理WIKI ---&gt; Mail ,根据提示设置发信必要参数即可，当用户账户/密码忘记时，可通过邮箱方式找回</span><br></pre></td></tr></table></figure><h5 id="六、插件推荐"><a href="#六、插件推荐" class="headerlink" title="六、插件推荐"></a>六、插件推荐</h5><p>​       优质插件：<a href="https://extensions.xwiki.org/xwiki/bin/view/Main/#|t=extensions&p=1&l=300&s=installedCount&d=desc" target="_blank" rel="noopener">推荐</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;一、XWiki介绍&quot;&gt;&lt;a href=&quot;#一、XWiki介绍&quot; class=&quot;headerlink&quot; title=&quot;一、XWiki介绍&quot;&gt;&lt;/a&gt;一、XWiki介绍&lt;/h5&gt;&lt;p&gt;就是一个开源wiki，不像 Confluence 一样需要购买 License 才能使用&lt;/p&gt;
&lt;h5 id=&quot;二、Xwiki官网与下载&quot;&gt;&lt;a href=&quot;#二、Xwiki官网与下载&quot; class=&quot;headerlink&quot; title=&quot;二、Xwiki官网与下载&quot;&gt;&lt;/a&gt;二、Xwiki官网与下载&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;官网： &lt;a href=&quot;https://www.xwiki.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.xwiki.org/&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;XWiki下载页：&lt;a href=&quot;http://download.forge.ow2.org/xwiki/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;xwiki download&lt;/a&gt; – 检索关键字[xwiki-enterprise-installer-generic]&lt;/li&gt;
&lt;li&gt;XWwiki安装的版本：xwiki-enterprise-installer-generic-9.4&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="wiki" scheme="https://garywu520.github.io/blog/tags/wiki/"/>
    
      <category term="XWiki" scheme="https://garywu520.github.io/blog/tags/XWiki/"/>
    
      <category term="开源wiki" scheme="https://garywu520.github.io/blog/tags/%E5%BC%80%E6%BA%90wiki/"/>
    
  </entry>
  
  <entry>
    <title>部署自己的DoT DNS</title>
    <link href="https://garywu520.github.io/blog/2019/11/15/%E9%83%A8%E7%BD%B2%E8%87%AA%E5%B7%B1%E7%9A%84DoT-DNS/"/>
    <id>https://garywu520.github.io/blog/2019/11/15/部署自己的DoT-DNS/</id>
    <published>2019-11-15T02:05:04.000Z</published>
    <updated>2019-11-15T02:07:20.180Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-什么是DoT？"><a href="#1-什么是DoT？" class="headerlink" title="1. 什么是DoT？"></a>1. 什么是DoT？</h5><p>​      DoT即DNS-over-TLS, 可用于实现终端用户的隐私和安全，DoT它应该运行在853端口。因为大多数DNS客户端使用TCP或UDP协议，这些协议容易被窃听，并且容易受到中间人攻击，比如某国家的被 ISP 滥用。</p><p>​      在 RFC 7858中规定了 DNS-over-TLS 标准，这是一个非常直接的实现。 本质上，该标准规定使用现有的 DNS-over-TCP 协议支持，大多数 DNS 服务器已经具有这种支持，并向其中添加 TLS。 </p><a id="more"></a><h5 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2. 环境准备"></a>2. 环境准备</h5><ul><li><p>非朝鲜区域 云服务器1台</p></li><li><p>自签发SSL证书 [只有企业才有资格为一个公网IP签发证书]</p><p>— 证书自签类型：ECC椭圆曲线加密 384bits</p></li><li><p>Nginx</p></li></ul><h5 id="3-实现"><a href="#3-实现" class="headerlink" title="3. 实现"></a>3. 实现</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y nginx</span><br><span class="line">systemctl enable nginx</span><br><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p>修改nginx.conf include</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">与http区段平级</span></span><br><span class="line">include /etc/nginx/conf.d/*.conf;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">     ......</span><br><span class="line">     ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cat  /etc/nginx/conf.d/dot.conf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line"></span><br><span class="line">  upstream dns-servers &#123;</span><br><span class="line">    server    8.8.8.8:53;</span><br><span class="line">    server    8.8.4.4:53;</span><br><span class="line">    server    1.1.1.1:53;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">        listen 853 ssl;</span><br><span class="line">        proxy_pass dns-servers;</span><br><span class="line"></span><br><span class="line">        ssl_session_cache shared:SSL:10m;</span><br><span class="line">        ssl_session_timeout 10m;</span><br><span class="line">        ssl_protocols  TLSv1.2;</span><br><span class="line">        ssl_prefer_server_ciphers on;</span><br><span class="line">        ssl_certificate     /etc/nginx/ssl/server.crt;</span><br><span class="line">        ssl_certificate_key /etc/nginx/ssl/server.key;</span><br><span class="line">        ssl_trusted_certificate /etc/nginx/ssl/fullchain.crt;</span><br><span class="line">        ssl_dhparam /etc/nginx/ssl/dhparam.pem;</span><br><span class="line">        ssl_ciphers "ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384";</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：upstream代理的DNS可以是内网DNS主从，也可代理现有墙外DNS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>验证端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -lntup|grep 853</span></span><br><span class="line">tcp     0      0 0.0.0.0:853       0.0.0.0:*    LISTEN      21751/nginx: master</span><br></pre></td></tr></table></figure><h5 id="4-朝鲜网络–dig测试"><a href="#4-朝鲜网络–dig测试" class="headerlink" title="4. 朝鲜网络–dig测试"></a>4. 朝鲜网络–dig测试</h5><ul><li><p>配置本地unbound代理 这台Server 853端口</p></li><li><p>dig测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">本地unbound解析</span></span><br><span class="line">[root@test ~]# dig flickr.com @127.0.0.1</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-9.P2.el7 &lt;&lt;&gt;&gt; flickr.com @127.0.0.1</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">flickr.com.60INA13.226.113.74</span><br><span class="line"></span><br><span class="line">;; Query time: 380 msec</span><br><span class="line">;; SERVER: 127.0.0.1#53(127.0.0.1)</span><br><span class="line">;; WHEN: Thu Nov 14 18:58:01 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 55</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">非朝鲜网络解析</span></span><br><span class="line">[root@ns ~]# dig flickr.com @1.1.1.1</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.4-P2-RedHat-9.11.4-9.P2.el7 &lt;&lt;&gt;&gt; flickr.com @1.1.1.1</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">flickr.com.29INA13.226.113.74</span><br><span class="line"></span><br><span class="line">;; Query time: 1 msec</span><br><span class="line">;; SERVER: 1.1.1.1#53(1.1.1.1)</span><br><span class="line">;; WHEN: Thu Nov 14 05:58:32 EST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 55</span><br></pre></td></tr></table></figure><p>可以看出解析结果数据一致，解析结果未被污染</p></li></ul><h5 id="5-安全建议"><a href="#5-安全建议" class="headerlink" title="5. 安全建议"></a>5. 安全建议</h5><p>​    由于无法得到基于IP的安全证书，所以只能寄托于自签，自签时长建议缩短以天为单位，通过shell脚本自动更新来防止中间人攻击。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-什么是DoT？&quot;&gt;&lt;a href=&quot;#1-什么是DoT？&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是DoT？&quot;&gt;&lt;/a&gt;1. 什么是DoT？&lt;/h5&gt;&lt;p&gt;​      DoT即DNS-over-TLS, 可用于实现终端用户的隐私和安全，DoT它应该运行在853端口。因为大多数DNS客户端使用TCP或UDP协议，这些协议容易被窃听，并且容易受到中间人攻击，比如某国家的被 ISP 滥用。&lt;/p&gt;
&lt;p&gt;​      在 RFC 7858中规定了 DNS-over-TLS 标准，这是一个非常直接的实现。 本质上，该标准规定使用现有的 DNS-over-TCP 协议支持，大多数 DNS 服务器已经具有这种支持，并向其中添加 TLS。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="DNS" scheme="https://garywu520.github.io/blog/tags/DNS/"/>
    
      <category term="SSL" scheme="https://garywu520.github.io/blog/tags/SSL/"/>
    
      <category term="DoT" scheme="https://garywu520.github.io/blog/tags/DoT/"/>
    
      <category term="DoH" scheme="https://garywu520.github.io/blog/tags/DoH/"/>
    
      <category term="TLS" scheme="https://garywu520.github.io/blog/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>openssl自签ECC V3证书</title>
    <link href="https://garywu520.github.io/blog/2019/11/12/openssl%E8%87%AA%E7%AD%BEECC-V3%E8%AF%81%E4%B9%A6/"/>
    <id>https://garywu520.github.io/blog/2019/11/12/openssl自签ECC-V3证书/</id>
    <published>2019-11-12T10:29:06.000Z</published>
    <updated>2019-11-14T06:48:30.823Z</updated>
    
    <content type="html"><![CDATA[<p>前提：为支持更强的加密，建议升级openssl到最新版</p><h5 id="1-生成CA根证书"><a href="#1-生成CA根证书" class="headerlink" title="1. 生成CA根证书"></a>1. 生成CA根证书</h5><p>首先要准备一个配置文件和一个目录，稍后需要用第3版的证书[支持DNS域名和IP，浏览器可以校验证书里面的DNS是不是和网站实际的域名一样]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">serial 文件是openssl管理颁发序号的,index.txt是对newcerts下面新签发的证书的一个简单索引</span></span><br><span class="line">mkdir ssl &amp;&amp; cd ssl</span><br><span class="line">touch index.txt</span><br><span class="line">echo 01 &gt; serial</span><br></pre></td></tr></table></figure><a id="more"></a><p>cat openssl1.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">注：创建根证书的时候使用的参数是“basicConstraints = CA:<span class="literal">true</span>”</span></span><br><span class="line"><span class="meta">#</span><span class="bash">basicConstraints = CA:<span class="literal">true</span>” 表示创建的是“根证书”</span></span><br><span class="line"></span><br><span class="line">[req]</span><br><span class="line">req_extensions = v3_req</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line"></span><br><span class="line">[req_distinguished_name]</span><br><span class="line">countryName         = HK</span><br><span class="line">stateOrProvinceName = TLW</span><br><span class="line">localityName        = TLW</span><br><span class="line"></span><br><span class="line">[ v3_req ]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line"><span class="meta">#</span><span class="bash">DNS.1 = server1.example.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash">DNS.2 = mail.example.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash">DNS.3 = www.example.com</span></span><br><span class="line">IP.1 = xx.xx.xx.xx</span><br><span class="line"><span class="meta">#</span><span class="bash">IP.2 = xx.xx.xx.xx</span></span><br><span class="line"></span><br><span class="line">[ v3_ca ]</span><br><span class="line">basicConstraints = CA:true</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建根CA的私钥，加密强度为prime256v1</span></span><br><span class="line">openssl ecparam -genkey -name prime256v1 -out ca.key</span><br><span class="line">注：prime256v1为加密强度，可通过命令查看：openssl ecparam -list_curves</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">创建SHA-512自签名的根CA证书（CA certificate）</span></span><br><span class="line">openssl req -passout pass:"password" -new -sha512 -x509 -days 3650 -config openssl1.cnf -extensions v3_ca -key ca.key -out ca.crt -subj "//C=CN\ST=HongKong\L=HongKong\O=My Company\OU=My Department\CN=Heath\emailAddress=hkjs@hk.com"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证CA certificate是否符合要求</span></span><br><span class="line">openssl x509 -text -noout -in ca.crt</span><br></pre></td></tr></table></figure><h5 id="2-生成域名证书的签名请求"><a href="#2-生成域名证书的签名请求" class="headerlink" title="2. 生成域名证书的签名请求"></a>2. 生成域名证书的签名请求</h5><p>创建域名证书所需的cnf文件</p><p>cat openssl2.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改basicConstraints = CA:<span class="literal">false</span>” 表示创建的是“非根证书”，即普通证书</span></span><br><span class="line"></span><br><span class="line">[req]</span><br><span class="line">req_extensions = v3_req</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line"></span><br><span class="line">[req_distinguished_name]</span><br><span class="line">countryName         = HK</span><br><span class="line">stateOrProvinceName = TLW</span><br><span class="line">localityName        = TLW</span><br><span class="line"></span><br><span class="line">[v3_req]</span><br><span class="line">basicConstraints = CA:FALSE</span><br><span class="line">keyUsage = nonRepudiation, digitalSignature, keyEncipherment</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[alt_names]</span><br><span class="line"><span class="meta">#</span><span class="bash">DNS.1 = server1.example.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash">DNS.2 = mail.example.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash">DNS.3 = www.example.com</span></span><br><span class="line">IP.1 = xx.xx.xx.xx</span><br><span class="line"><span class="meta">#</span><span class="bash">IP.2 = xx.xx.xx.xx</span></span><br><span class="line"></span><br><span class="line">[v3_ca]</span><br><span class="line">basicConstraints = CA:FALSE</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成域名使用的server.key文件</span></span><br><span class="line">openssl ecparam -genkey -name prime256v1 -out server.key</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">生成server.csr文件</span></span><br><span class="line">openssl req -passout pass:"password" -new -sha512 -key server.key -out server.csr -extensions v3_req -config openssl2.cnf -subj "//C=CN\ST=HongKong\L=HongKong\O=My Company\OU=My Department\CN=Heath\emailAddress=hkjs@hk.com"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">验证DNS信息是否存在了X509v3 Subject Alternative Name里面</span></span><br><span class="line"><span class="meta">#</span><span class="bash">确保签名类型为“非根CA”类型，X509v3 Basic Constraints: CA:FALSE</span></span><br><span class="line">openssl req -text -noout -in server.csr</span><br></pre></td></tr></table></figure><h5 id="3-使用CA签名"><a href="#3-使用CA签名" class="headerlink" title="3. 使用CA签名"></a>3. 使用CA签名</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">签名之前需要进行如下操作</span></span><br><span class="line">cp /usr/local/ssl/openssl.cnf /root/ssl/</span><br></pre></td></tr></table></figure><p>vim openssl.cnf</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改CA目录</span></span><br><span class="line">[ CA_default ]</span><br><span class="line">dir = /root/ssl</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改CA策略</span></span><br><span class="line">[ policy_match ]</span><br><span class="line">countryName             = optional</span><br><span class="line">stateOrProvinceName     = optional</span><br><span class="line">organizationName        = optional</span><br><span class="line">organizationalUnitName  = optional</span><br><span class="line">commonName              = optional</span><br><span class="line">emailAddress            = optional</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">用根ca.crt 来给server.csr签名，生成server.crt文件</span></span><br><span class="line">openssl ca -days 3650 -cert ca.crt -keyfile ca.key -md sha512 -extensions v3_req -config openssl.cnf -in server.csr -out server.crt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注：如果提示部分目录或文件不存在，根据提示创建即可</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">验证证书有效性</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl verify -verbose -CAfile ca.crt server.crt</span></span><br><span class="line">server.crt: OK</span><br></pre></td></tr></table></figure><h5 id="4-生成fullchain证书"><a href="#4-生成fullchain证书" class="headerlink" title="4. 生成fullchain证书"></a>4. 生成fullchain证书</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将泛域名证书server.crt和根域名证书ca.crt合并为fullchain证书</span></span><br><span class="line">cat server.crt ca.crt &gt;fullchain.crt</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前提：为支持更强的加密，建议升级openssl到最新版&lt;/p&gt;
&lt;h5 id=&quot;1-生成CA根证书&quot;&gt;&lt;a href=&quot;#1-生成CA根证书&quot; class=&quot;headerlink&quot; title=&quot;1. 生成CA根证书&quot;&gt;&lt;/a&gt;1. 生成CA根证书&lt;/h5&gt;&lt;p&gt;首先要准备一个配置文件和一个目录，稍后需要用第3版的证书[支持DNS域名和IP，浏览器可以校验证书里面的DNS是不是和网站实际的域名一样]&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;serial 文件是openssl管理颁发序号的,index.txt是对newcerts下面新签发的证书的一个简单索引&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir ssl &amp;amp;&amp;amp; cd ssl&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch index.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo 01 &amp;gt; serial&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="https" scheme="https://garywu520.github.io/blog/tags/https/"/>
    
      <category term="openssl" scheme="https://garywu520.github.io/blog/tags/openssl/"/>
    
      <category term="ssl" scheme="https://garywu520.github.io/blog/tags/ssl/"/>
    
      <category term="eccdsa" scheme="https://garywu520.github.io/blog/tags/eccdsa/"/>
    
      <category term="ECC" scheme="https://garywu520.github.io/blog/tags/ECC/"/>
    
  </entry>
  
  <entry>
    <title>nginx代理websocket配置</title>
    <link href="https://garywu520.github.io/blog/2019/11/12/nginx%E4%BB%A3%E7%90%86websocket%E9%85%8D%E7%BD%AE/"/>
    <id>https://garywu520.github.io/blog/2019/11/12/nginx代理websocket配置/</id>
    <published>2019-11-12T08:39:25.000Z</published>
    <updated>2019-11-12T08:41:44.517Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-nginx配置"><a href="#1-nginx配置" class="headerlink" title="1. nginx配置"></a>1. nginx配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">注：7010为研发上线的websockt服务端口</span></span><br><span class="line"> location /wsfuture/ &#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:7010;</span><br><span class="line"></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection "upgrade";</span><br><span class="line">         </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">注：这里的wsfuture指的是研发提供的websocket服务程序的顶级目录，因为如果在此基础上添加二级目录访问出现404</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-本地测试"><a href="#2-本地测试" class="headerlink" title="2. 本地测试"></a>2. 本地测试</h5><ul><li><p>安装nodejs和npm[略]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></li><li><p>初始化npm</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">初始化npm来生成package.json文件</span></span><br><span class="line">npm init --yes</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装ws模块</span></span><br><span class="line">npm install ws --save</span><br><span class="line">npm install websocket --save</span><br></pre></td></tr></table></figure></li><li><p>本地连接测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">出现如下提示，说明连接正常</span></span><br><span class="line"><span class="meta">$</span><span class="bash">wscat --connect ws://127.0.0.1/wsfuture/IdglKTUUecw=</span></span><br><span class="line">Connected (press CTRL+C to quit)</span><br><span class="line">&lt;</span><br></pre></td></tr></table></figure><p>如果出现错误：error: Unexpected server response: 404 说明nginx代理路径设置不正确。</p></li></ul><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><ul><li>如果以上项目测试失败，需要linux模拟websocket服务端和客户端，来验证nginx代理websocket的功能的话，参考如下</li></ul><p>参考：<a href="https://yq.aliyun.com/articles/481455" target="_blank" rel="noopener">云栖社区</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-nginx配置&quot;&gt;&lt;a href=&quot;#1-nginx配置&quot; class=&quot;headerlink&quot; title=&quot;1. nginx配置&quot;&gt;&lt;/a&gt;1. nginx配置&lt;/h5&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt; #&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;注：7010为研发上线的websockt服务端口&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; location /wsfuture/ &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_pass http://127.0.0.1:7010;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_http_version 1.1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_set_header Upgrade $http_upgrade;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        proxy_set_header Connection &quot;upgrade&quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt;注：这里的wsfuture指的是研发提供的websocket服务程序的顶级目录，因为如果在此基础上添加二级目录访问出现404&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="https://garywu520.github.io/blog/tags/nginx/"/>
    
      <category term="websocket" scheme="https://garywu520.github.io/blog/tags/websocket/"/>
    
      <category term="ws" scheme="https://garywu520.github.io/blog/tags/ws/"/>
    
      <category term="wss" scheme="https://garywu520.github.io/blog/tags/wss/"/>
    
      <category term="nodejs" scheme="https://garywu520.github.io/blog/tags/nodejs/"/>
    
      <category term="wscat" scheme="https://garywu520.github.io/blog/tags/wscat/"/>
    
  </entry>
  
  <entry>
    <title>为https站点启用http2特性</title>
    <link href="https://garywu520.github.io/blog/2019/11/08/%E4%B8%BAhttps%E7%AB%99%E7%82%B9%E5%90%AF%E7%94%A8http2%E7%89%B9%E6%80%A7/"/>
    <id>https://garywu520.github.io/blog/2019/11/08/为https站点启用http2特性/</id>
    <published>2019-11-08T12:59:58.000Z</published>
    <updated>2019-11-08T13:10:08.567Z</updated>
    
    <content type="html"><![CDATA[<h5 id="1-HTTP-2简介"><a href="#1-HTTP-2简介" class="headerlink" title="1. HTTP/2简介"></a>1. HTTP/2简介</h5><p> <code>HTTP/2</code>（超文本传输协议第2版，最初命名为 HTTP 2.0），是HTTP协议的的第二个主要版本，使用于万维网。<code>HTTP/2</code> 是 HTTP 协议自 1999 年 HTTP 1.1 发布后的首个更新，主要基于 SPDY 协议。它由互联网工程任务组 (IETF) 的 <code>Hypertext Transfer Protocol Bis</code> (httpbis) 工作小组进行开发。该组织于2014年12月将 <code>HTTP/2</code> 标准提议递交至IESG进行讨论，于2015年2月17日被批准。<code>HTTP/2</code> 标准于2015年5月以 <code>RFC 7540</code> 正式发表。 </p><a id="more"></a><h5 id="2-HTTP-2特点"><a href="#2-HTTP-2特点" class="headerlink" title="2. HTTP/2特点"></a>2. HTTP/2特点</h5><ul><li>采用二进制格式传输数据，而非文本格式。二进制格式在协议的解析和优化扩展上带来更多的优势和可能。</li><li>对消息头进行压缩传输，能够节省消息头占用的网络的流量，而 <code>HTTP 1.1</code> 每次请求，都会携带大量冗余头信息，浪费了很多带宽资源，头压缩能够很好的解决该问题。</li><li>多路复用，就是多个请求都是通过一个 TCP 连接并发完成， <code>HTTP 1.1</code> 虽然通过 <code>pipeline</code> 也能并发请求，但是多个请求之间的响应会被阻塞的，所以 <code>pipeline</code> 至今也没有被普及应用，而 <code>HTTP/2</code> 做到了真正的并发请求，同时流还支持优先级和流量控制。</li><li>服务器推送，服务端能够更快的把资源推送给客户端，例如服务端可以主动把 <code>JS</code> 和 <code>CSS</code> 文件推送给客户端，而不需要客户端解析 HTML 再发送这些请求，当客户端需要的时候，它已经在客户端了。</li></ul><h5 id="3-HTTP-2站点的优势"><a href="#3-HTTP-2站点的优势" class="headerlink" title="3.  HTTP/2站点的优势"></a>3.  <strong>HTTP/2站点的优势</strong></h5><ul><li>提升网站访问速度。</li><li>降低服务器压力。</li><li>部分替代异步加载的使用。</li><li>保护网站安全。</li></ul><h5 id="4-硬核要求"><a href="#4-硬核要求" class="headerlink" title="4. 硬核要求"></a>4. 硬核要求</h5><ul><li>Nginx ＞1.9.5【nginx编译的时候需要指定新版本的openssl, –with-openssl=源码包解压目录】</li><li>OpenSSL＞1.0.2</li><li>因为 <code>HTTP/2</code> 不仅需要Web服务器还需要一个扩展支持，目前可以用的有 <code>ALPN</code> 和 <code>NPN</code> 两种(Chrome 已经移除了对 <code>NPN</code> 的支持)。只有 OpenSSL 1.0.2 以上版本才开始支持 <code>ALPN</code> 。 </li><li>仅支持HTTPS</li></ul><h5 id="5-在Nginx上启用HTTP-2"><a href="#5-在Nginx上启用HTTP-2" class="headerlink" title="5. 在Nginx上启用HTTP/2"></a>5. 在Nginx上启用HTTP/2</h5><p> 配置 Nginx 开启 <code>HTTP/2</code> 特别简单，在 <code>server</code> 配置段中的 <code>listen</code> 后增加 <code>http2</code> 即可 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /usr/<span class="built_in">local</span>/nginx/conf/nginx.conf</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 443 ssl http2;</span><br><span class="line">  server_name www.hi-linux.com;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 重启 Nginx 后，让配置生效。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h5 id="6-命令验证HTTP-2"><a href="#6-命令验证HTTP-2" class="headerlink" title="6. 命令验证HTTP/2"></a>6. 命令验证HTTP/2</h5><p>升级curl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载release</span></span><br><span class="line">rpm -Uvh  http://www.city-fan.org/ftp/contrib/yum-repo/rhel6/x86_64/city-fan.org-release-2-1.rhel6.noarch.rpm</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">查看最新版本</span></span><br><span class="line">yum --showduplicates list curl --disablerepo="*" --enablerepo="city*"</span><br></pre></td></tr></table></figure><p> vi /etc/yum.repos.d/city-fan.org.repo </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">将[city-fan.org]组的<span class="built_in">enable</span>值改为1,保存</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install curl</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> curl -V</span></span><br><span class="line">curl 7.67.0</span><br></pre></td></tr></table></figure><p>验证网站是否支持HTTP/2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl --http2 -I https://xxx.net</span></span><br><span class="line">HTTP/2 200</span><br></pre></td></tr></table></figure><p>web检测是否支持HTTP/2:</p><ul><li><strong>KeyCDN: <a href="https://tools.keycdn.com/http2-test" target="_blank" rel="noopener">http2-test</a></strong></li><li><strong>MySSL: <a href="https://myssl.com/http2_check.html" target="_blank" rel="noopener">http2_check</a></strong></li></ul><h5 id="7-浏览器支持"><a href="#7-浏览器支持" class="headerlink" title="7. 浏览器支持"></a>7. 浏览器支持</h5><p>目前支持 HTTP/2 浏览器列表</p><ul><li><p>Google Chrome、Mozilla Firefox、Microsoft Edge和Opera已支持HTTP/2，并默认启用。</p></li><li><p>Internet Explorer自IE 11开始支持HTTP/2，并预设激活</p></li></ul><p>​    更详细的浏览器列表可参考：<a href="http://caniuse.com/#feat=http2" target="_blank" rel="noopener">http://caniuse.com/#feat=http2</a> </p><p>部分文章参考：<a href="https://www.hi-linux.com/posts/24162.html" target="_blank" rel="noopener">运维之美</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;1-HTTP-2简介&quot;&gt;&lt;a href=&quot;#1-HTTP-2简介&quot; class=&quot;headerlink&quot; title=&quot;1. HTTP/2简介&quot;&gt;&lt;/a&gt;1. HTTP/2简介&lt;/h5&gt;&lt;p&gt; &lt;code&gt;HTTP/2&lt;/code&gt;（超文本传输协议第2版，最初命名为 HTTP 2.0），是HTTP协议的的第二个主要版本，使用于万维网。&lt;code&gt;HTTP/2&lt;/code&gt; 是 HTTP 协议自 1999 年 HTTP 1.1 发布后的首个更新，主要基于 SPDY 协议。它由互联网工程任务组 (IETF) 的 &lt;code&gt;Hypertext Transfer Protocol Bis&lt;/code&gt; (httpbis) 工作小组进行开发。该组织于2014年12月将 &lt;code&gt;HTTP/2&lt;/code&gt; 标准提议递交至IESG进行讨论，于2015年2月17日被批准。&lt;code&gt;HTTP/2&lt;/code&gt; 标准于2015年5月以 &lt;code&gt;RFC 7540&lt;/code&gt; 正式发表。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="Nginx" scheme="https://garywu520.github.io/blog/tags/Nginx/"/>
    
      <category term="HTTPS" scheme="https://garywu520.github.io/blog/tags/HTTPS/"/>
    
      <category term="HTTP" scheme="https://garywu520.github.io/blog/tags/HTTP/"/>
    
      <category term="http1.1" scheme="https://garywu520.github.io/blog/tags/http1-1/"/>
    
      <category term="http2" scheme="https://garywu520.github.io/blog/tags/http2/"/>
    
  </entry>
  
  <entry>
    <title>zimbra邮件服务器</title>
    <link href="https://garywu520.github.io/blog/2019/10/30/zimbra%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://garywu520.github.io/blog/2019/10/30/zimbra邮件服务器/</id>
    <published>2019-10-30T09:28:06.000Z</published>
    <updated>2019-10-30T09:29:50.344Z</updated>
    
    <content type="html"><![CDATA[<p>zimbra是企业级的电子邮件、日历和办公协作的解决方案。Zimbra Collaboration Suite【简称ZCS】包括Zimbra MTA、 Zimbra LDAP Server和Zimbra Mail Server. 本次演示的是其开源版本</p><h5 id="一、先决条件"><a href="#一、先决条件" class="headerlink" title="一、先决条件"></a>一、先决条件</h5><ul><li><p>干净的CentOS7</p></li><li><p>没有运行HTTP，MAIL，DNS，MySQL及LDAP服务</p></li><li><p>提前准备域名并将A记录和MX DNS记录解析到本Zimbra服务器</p></li><li><p>配置FQDN</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo "39.xx.xx.26  zimbra.domain.com" &gt;&gt; /etc/hosts</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hostname</span></span><br><span class="line">zimbra.domain.com</span><br></pre></td></tr></table></figure><a id="more"></a></li></ul><h5 id="二、安装依赖"><a href="#二、安装依赖" class="headerlink" title="二、安装依赖"></a>二、安装依赖</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install perl-core unzip libaio nmap-ncat sysstat openssh-clients wget</span><br></pre></td></tr></table></figure><h5 id="三、下载Zimbra-Collaboaration-Suite-tarball"><a href="#三、下载Zimbra-Collaboaration-Suite-tarball" class="headerlink" title="三、下载Zimbra Collaboaration Suite tarball"></a>三、下载Zimbra Collaboaration Suite tarball</h5><p>官方下载页面：  <a href="https://www.zimbra.com/downloads/zimbra-collaboration-open-source/" target="_blank" rel="noopener">Zimbra Collaboration Suite download page</a>  </p><p>填写基本信息，产品选择：Zimbra Collaboration – Open Source Edition ，之后便跳转到了下载页面，选择平台CentOS7, 点击x64_86 开始下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">下载</span></span><br><span class="line">wget https://files.zimbra.com/downloads/8.8.15_GA/zcs-8.8.15_GA_3869.RHEL7_64.20190918004220.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -zxf zcs-8.8.15_GA_3869.RHEL7_64.20190918004220.tgz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">安装Zimbra</span></span><br><span class="line">cd zcs-8.8.15_GA_3869.RHEL7_64.20190918004220</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">它首先会检查以前是否安装过zimbra,然后提示你是否同意EULA的条款，输入“y” 来接受许可证。</span></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">PLEASE READ THIS AGREEMENT CAREFULLY BEFORE USING THE SOFTWARE.</span><br><span class="line">SYNACOR, INC. ("SYNACOR") WILL ONLY LICENSE THIS SOFTWARE TO YOU IF YOU</span><br><span class="line">FIRST ACCEPT THE TERMS OF THIS AGREEMENT. BY DOWNLOADING OR INSTALLING</span><br><span class="line">THE SOFTWARE, OR USING THE PRODUCT, YOU ARE CONSENTING TO BE BOUND BY</span><br><span class="line">THIS AGREEMENT. IF YOU DO NOT AGREE TO ALL OF THE TERMS OF THIS</span><br><span class="line">AGREEMENT, THEN DO NOT DOWNLOAD, INSTALL OR USE THE PRODUCT.</span><br><span class="line"></span><br><span class="line">License Terms for this Zimbra Collaboration Suite Software:</span><br><span class="line">https://www.zimbra.com/license/zimbra-public-eula-2-6.html</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">Do you agree with the terms of the software license agreement? [N] y</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">接下来会提示你是否使用zimbra软件包存储库</span></span><br><span class="line">..</span><br><span class="line">Use Zimbra's package repository [Y] y</span><br><span class="line"></span><br><span class="line">Importing Zimbra GPG key</span><br><span class="line"></span><br><span class="line">Configuring package repository</span><br><span class="line"></span><br><span class="line">Checking for installable packages</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash">输入Enter键继续安装zimbra</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Select the packages to install</span><br><span class="line"></span><br><span class="line">Install zimbra-ldap [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-logger [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-mta [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-dnscache [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-snmp [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-store [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-apache [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-spell [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-memcached [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-proxy [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-drive [Y] y</span><br><span class="line"></span><br><span class="line">Install zimbra-imapd (BETA - for evaluation only) [N] </span><br><span class="line"></span><br><span class="line">Install zimbra-chat [Y] y</span><br><span class="line">Checking required space for zimbra-core</span><br><span class="line">Checking space for zimbra-store</span><br><span class="line">Checking required packages for zimbra-store</span><br><span class="line">zimbra-store package check complete.</span><br><span class="line"></span><br><span class="line">Installing:</span><br><span class="line">    zimbra-core</span><br><span class="line">    zimbra-ldap</span><br><span class="line">    zimbra-logger</span><br><span class="line">    zimbra-mta</span><br><span class="line">    zimbra-dnscache</span><br><span class="line">    zimbra-snmp</span><br><span class="line">    zimbra-store</span><br><span class="line">    zimbra-apache</span><br><span class="line">    zimbra-spell</span><br><span class="line">    zimbra-memcached</span><br><span class="line">    zimbra-proxy</span><br><span class="line">    zimbra-drive</span><br><span class="line">    zimbra-patch</span><br><span class="line">    zimbra-mta-patch</span><br><span class="line">    zimbra-proxy-patch</span><br><span class="line">    zimbra-chat</span><br><span class="line">...</span><br><span class="line"><span class="meta">#</span><span class="bash">之后系统会提示你是否允许修改系统来安装这些组件，输入“y”,然后按Enter键继续。</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果遇到DNS错误，只需要修改域名并继续</span></span><br><span class="line">...</span><br><span class="line">DNS ERROR resolving MX for zimbra.domain.com</span><br><span class="line">It is suggested that the domain name have an MX record configured in DNS</span><br><span class="line"></span><br><span class="line">Change domain name? [Yes] yes</span><br><span class="line">Create domain: [zimbra.domain.com] domain.com</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下面通过选择 “选项7”来修改Admin密码</span></span><br><span class="line">...</span><br><span class="line">Main menu</span><br><span class="line"></span><br><span class="line">   1) Common Configuration:                                                  </span><br><span class="line">   2) zimbra-ldap:                             Enabled                       </span><br><span class="line">   3) zimbra-logger:                           Enabled                       </span><br><span class="line">   4) zimbra-mta:                              Enabled                       </span><br><span class="line">   5) zimbra-dnscache:                         Enabled                       </span><br><span class="line">   6) zimbra-snmp:                             Enabled                       </span><br><span class="line">   7) zimbra-store:                            Enabled                       </span><br><span class="line">        +Create Admin User:                    yes                           </span><br><span class="line">        +Admin user to create:                 admin@domain.com           </span><br><span class="line">******* +Admin Password                        UNSET  </span><br><span class="line">......</span><br><span class="line">Address unconfigured (**) items  (? - help) 7</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">通过选项4，可以设置自己的密码，当然也可以保留默认值</span></span><br><span class="line">...</span><br><span class="line">Store configuration</span><br><span class="line"></span><br><span class="line">   1) Status:                                  Enabled                       </span><br><span class="line">   2) Create Admin User:                       yes                           </span><br><span class="line">   3) Admin user to create:                    admin@domain.com           </span><br><span class="line">** 4) Admin Password                           UNSET      </span><br><span class="line">Select, or 'r' for previous menu [r] 4</span><br><span class="line"></span><br><span class="line">Password for admin@domain.com (min 6 characters): [sIyXczeI6] MyStrongP</span><br></pre></td></tr></table></figure><p>返回上一个菜单并应用更改并继续进行zimbra配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Select, or 'r' for previous menu [r] r</span><br><span class="line"></span><br><span class="line">Main menu</span><br><span class="line"></span><br><span class="line">   1) Common Configuration:                                                  </span><br><span class="line">   2) zimbra-ldap:                             Enabled                       </span><br><span class="line">   3) zimbra-logger:                           Enabled                       </span><br><span class="line">   4) zimbra-mta:                              Enabled                       </span><br><span class="line">   5) zimbra-dnscache:                         Enabled                       </span><br><span class="line">   6) zimbra-snmp:                             Enabled                       </span><br><span class="line">   7) zimbra-store:                            Enabled                       </span><br><span class="line">   8) zimbra-spell:                            Enabled                       </span><br><span class="line">   9) zimbra-proxy:                            Enabled                       </span><br><span class="line">  10) Default Class of Service Configuration:                                </span><br><span class="line">   s) Save config to file                                                    </span><br><span class="line">   x) Expand menu                                                            </span><br><span class="line">   q) Quit                                    </span><br><span class="line"></span><br><span class="line">*** CONFIGURATION COMPLETE - press 'a' to apply</span><br><span class="line">Select from menu, or press 'a' to apply config (? - help) a</span><br><span class="line">Save configuration data to a file? [Yes] yes</span><br><span class="line">Save config in file: [/opt/zimbra/config.18030] </span><br><span class="line">Saving config in /opt/zimbra/config.18030...done.</span><br><span class="line">The system will be modified - continue? [No] yes</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>安装完成后，系统会提示你是否生成安装日志，输入[Yes]</p><h5 id="四、访问Access-Zimbra-Web-UI"><a href="#四、访问Access-Zimbra-Web-UI" class="headerlink" title="四、访问Access Zimbra Web UI"></a>四、访问Access Zimbra Web UI</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Zimbra管理控制台</span></span><br><span class="line">https://zimbra.domain.com:7071     账号：admin   密码：你上面设置的密码</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">Zimbra客户端</span></span><br><span class="line">https://zimbra.domain.com</span><br></pre></td></tr></table></figure><p>Zimbra现在已安装并可以运行。 现在，您可以通过安装合法的SSL / TLS证书，添加和管理帐户以及其他任务来开始使用。</p><h5 id="五、卸载"><a href="#五、卸载" class="headerlink" title="五、卸载"></a>五、卸载</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd zcs-8.8.15_GA_3869.RHEL7_64.20190918004220</span><br><span class="line">./install.sh -u</span><br></pre></td></tr></table></figure><h5 id="六、zimbra邮件管理"><a href="#六、zimbra邮件管理" class="headerlink" title="六、zimbra邮件管理"></a>六、zimbra邮件管理</h5><p>参考：<a href="https://www.cnblogs.com/awakenedy/articles/10696370.html" target="_blank" rel="noopener">Awakenedy</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;zimbra是企业级的电子邮件、日历和办公协作的解决方案。Zimbra Collaboration Suite【简称ZCS】包括Zimbra MTA、 Zimbra LDAP Server和Zimbra Mail Server. 本次演示的是其开源版本&lt;/p&gt;
&lt;h5 id=&quot;一、先决条件&quot;&gt;&lt;a href=&quot;#一、先决条件&quot; class=&quot;headerlink&quot; title=&quot;一、先决条件&quot;&gt;&lt;/a&gt;一、先决条件&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;干净的CentOS7&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;没有运行HTTP，MAIL，DNS，MySQL及LDAP服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;提前准备域名并将A记录和MX DNS记录解析到本Zimbra服务器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置FQDN&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;echo &quot;39.xx.xx.26  zimbra.domain.com&quot; &amp;gt;&amp;gt; /etc/hosts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; hostname&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;zimbra.domain.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="mail" scheme="https://garywu520.github.io/blog/tags/mail/"/>
    
      <category term="zimbra" scheme="https://garywu520.github.io/blog/tags/zimbra/"/>
    
      <category term="邮件服务器" scheme="https://garywu520.github.io/blog/tags/%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="ZCS" scheme="https://garywu520.github.io/blog/tags/ZCS/"/>
    
  </entry>
  
  <entry>
    <title>redis key批量清理</title>
    <link href="https://garywu520.github.io/blog/2019/10/29/redis-key%E6%89%B9%E9%87%8F%E6%B8%85%E7%90%86/"/>
    <id>https://garywu520.github.io/blog/2019/10/29/redis-key批量清理/</id>
    <published>2019-10-29T08:04:32.000Z</published>
    <updated>2019-10-29T08:06:32.039Z</updated>
    
    <content type="html"><![CDATA[<p>获取key到文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a "password" keys kline_* &gt;/root/keys.log</span><br></pre></td></tr></table></figure><p>删除key</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read LINE</span><br><span class="line">do</span><br><span class="line">    redis-cli -h 127.0.0.1 -p 6379 -a "password" del $LINE</span><br><span class="line">done &lt; /root/keys.log</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取key到文件&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code
      
    
    </summary>
    
    
      <category term="redis key清理" scheme="https://garywu520.github.io/blog/tags/redis-key%E6%B8%85%E7%90%86/"/>
    
      <category term="key" scheme="https://garywu520.github.io/blog/tags/key/"/>
    
      <category term="清理" scheme="https://garywu520.github.io/blog/tags/%E6%B8%85%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>zabbix server监控zabbix agent存活</title>
    <link href="https://garywu520.github.io/blog/2019/10/29/zabbix-server%E7%9B%91%E6%8E%A7zabbix-agent%E5%AD%98%E6%B4%BB/"/>
    <id>https://garywu520.github.io/blog/2019/10/29/zabbix-server监控zabbix-agent存活/</id>
    <published>2019-10-29T07:34:00.000Z</published>
    <updated>2019-10-29T08:01:12.270Z</updated>
    
    <content type="html"><![CDATA[<p>正常逻辑</p><p>如果按照正常部署方式，一般是创建zabbix-agent模板，通过net.tcp.listen[port] 或 自定义key，触发器≠1就告警，最后将模板应用到所有agent主机。</p><a id="more"></a><p>实际情况</p><p>如果你细心点就会发现，当某台机器的zabbix-agent 服务stop后，监控数据就取不到了，紧接着就是zabbix断图，此时，触发器≠1由于没有获取到任何值而不会触发告警，所以也就监控不到某个机器的zabbix agent服务何时异常退出或机器宕机，这看起来是很严重的问题。</p><p>解决思路</p><p>在zabbix server端的模板中，通过配置 net.tcp.listen[ip,port]  简单检查，来获取不同agent的运行状态。</p><p>缺点：由于每台机器的IP地址都不相同，故每台机器都需要添加一个监控项+触发器，对于上百台机器来说，这是很繁琐的工作。至于用什么方法简化自己繁琐的工作，这是一个脑力活儿</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正常逻辑&lt;/p&gt;
&lt;p&gt;如果按照正常部署方式，一般是创建zabbix-agent模板，通过net.tcp.listen[port] 或 自定义key，触发器≠1就告警，最后将模板应用到所有agent主机。&lt;/p&gt;
    
    </summary>
    
    
      <category term="监控" scheme="https://garywu520.github.io/blog/tags/%E7%9B%91%E6%8E%A7/"/>
    
      <category term="zabbix server" scheme="https://garywu520.github.io/blog/tags/zabbix-server/"/>
    
      <category term="zabbix agent" scheme="https://garywu520.github.io/blog/tags/zabbix-agent/"/>
    
  </entry>
  
  <entry>
    <title>MySQL缓存参数优化</title>
    <link href="https://garywu520.github.io/blog/2019/10/24/MySQL%E4%B8%A4%E4%B8%AA%E6%A0%B8%E5%BF%83%E5%8F%82%E6%95%B0%E4%BC%98%E5%8C%96/"/>
    <id>https://garywu520.github.io/blog/2019/10/24/MySQL两个核心参数优化/</id>
    <published>2019-10-24T09:38:36.000Z</published>
    <updated>2019-10-24T09:41:56.056Z</updated>
    
    <content type="html"><![CDATA[<p>表缓存与查询缓存</p><h5 id="1-表缓存"><a href="#1-表缓存" class="headerlink" title="1. 表缓存"></a>1. 表缓存</h5><p>MySQL table_open_cache优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global table_open_cache = 3072; </span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; show global variables like &apos;table_open_cache&apos;;</span><br><span class="line">+------------------+-------+</span><br><span class="line">| Variable_name    | Value |</span><br><span class="line">+------------------+-------+</span><br><span class="line">| table_open_cache | 3072  |</span><br><span class="line">+------------------+-------+</span><br><span class="line">1 row in set (0.01 sec)</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show global status like &apos;open%tables%&apos;;</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Open_tables   | 132   |</span><br><span class="line">| Opened_tables | 139   |</span><br><span class="line">+---------------+-------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>配置文件修改【永久生效】</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">table_open_cache = 3072</span><br></pre></td></tr></table></figure><p>Open_tables会根据table_open_cache的限制进行表缓存，当open_tables等于table_open_cache的时候，open_tables会清理较早时间的表缓存来为新缓存腾出空间，一直反复，在此过程中，mysql的这个操作会消耗一定的系统内存和cpu资源。所以有必要对table_open_cache进行适当优化。</p><p>注：table_open_cache务必要小于open_file_limit的值，否则可能出现客户端由于文件描述符不足而连接失败，对应unix系统的ulimit值。</p><hr><h5 id="2-查询缓存"><a href="#2-查询缓存" class="headerlink" title="2. 查询缓存"></a>2. 查询缓存</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &apos;%query_cache%&apos;;</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| Variable_name                | Value   |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line">| have_query_cache             | YES     |</span><br><span class="line">| query_cache_limit            | 1048576 |</span><br><span class="line">| query_cache_min_res_unit     | 4096    |</span><br><span class="line">| query_cache_size             | 1048576 |</span><br><span class="line">| query_cache_type             | OFF     |</span><br><span class="line">| query_cache_wlock_invalidate | ON      |</span><br><span class="line">+------------------------------+---------+</span><br><span class="line"></span><br><span class="line">mysql&gt; set global query_cache_type = 1;</span><br><span class="line">ERROR 1651 (HY000): Query cache is disabled; restart the server with query_cache_type=1 to enable it</span><br></pre></td></tr></table></figure><p>参数释义：</p><p>have_query_cache YES 表示数据库支持查询缓存功能[不代表已开启查询缓存]</p><p>query_cache_type: ON 表示启用查询缓存</p><p>query_cache_limit表示单条查询缓存的最大值，默认1M</p><p> query_cache_min_res_unit 表示缓存内存的最小单元，默认4k</p><p>query_cache_wlock_invalidate: 表示查询语句所查询的表如果被写锁锁定，是否仍然使用缓存返回结果。OFF表示使用缓存返回结果，ON表示关闭此功能。我们来描述一个场景：因为写锁是独占的，排他的，所以当写锁施加在对应表上的时候，如果对当前表发起查询请求，那么查询操作则需要等到写锁释放后才能进行。可是如果对于的查询语句正好命中了这张表的缓存，查询请求是否就不用继续等待写锁释放而直接从缓存中获取结果？默认值是OFF，也就是说当值为OFF时，即使表被施加了写锁，查询语句如果命中了对于的缓存，则会直接从缓存获取结果。换句话说，如果此值设置为ON，如果表被施加了写锁，那么当写锁释放时，数据可能发生了改变，所以在表被施加写锁期间，即使有查询命中了查询缓存，也不能从缓存获取结果。那么我们可以得出结论：当值设置为ON时，更加安全，保证了数据的一致性。</p><p>查询缓存：<a href="https://www.zsythink.net/archives/1111" target="_blank" rel="noopener">参考: 朱双印博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;表缓存与查询缓存&lt;/p&gt;
&lt;h5 id=&quot;1-表缓存&quot;&gt;&lt;a href=&quot;#1-表缓存&quot; class=&quot;headerlink&quot; title=&quot;1. 表缓存&quot;&gt;&lt;/a&gt;1. 表缓存&lt;/h5&gt;&lt;p&gt;MySQL table_open_cache优化&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; set global table_open_cache = 3072; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Query OK, 0 rows affected (0.00 sec)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql&amp;gt; show global variables like &amp;apos;table_open_cache&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| Variable_name    | Value |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| table_open_cache | 3072  |&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;+------------------+-------+&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 row in set (0.01 sec)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="MySQL" scheme="https://garywu520.github.io/blog/tags/MySQL/"/>
    
      <category term="表缓存" scheme="https://garywu520.github.io/blog/tags/%E8%A1%A8%E7%BC%93%E5%AD%98/"/>
    
      <category term="查询缓存" scheme="https://garywu520.github.io/blog/tags/%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/"/>
    
      <category term="table_open_cache" scheme="https://garywu520.github.io/blog/tags/table-open-cache/"/>
    
      <category term="query_cache" scheme="https://garywu520.github.io/blog/tags/query-cache/"/>
    
  </entry>
  
</feed>
